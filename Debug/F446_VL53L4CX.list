
F446_VL53L4CX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017490  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08017660  08017660  00018660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a64  08017a64  00019230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017a64  08017a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a6c  08017a6c  00019230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a6c  08017a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017a70  08017a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  08017a74  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a8  20000230  08017ca4  00019230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad8  08017ca4  00019ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048fe0  00000000  00000000  00019260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049b3  00000000  00000000  00062240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00066bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e3  00000000  00000000  000685a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd37  00000000  00000000  0006998b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f9a  00000000  00000000  000976c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdbe8  00000000  00000000  000bd65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bb244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf0  00000000  00000000  001bb288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001c2f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017648 	.word	0x08017648

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	08017648 	.word	0x08017648

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9d3 	b.w	8000fb0 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a25      	ldr	r2, [pc, #148]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <MX_GPIO_Init+0xd0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	4812      	ldr	r0, [pc, #72]	@ (8001088 <MX_GPIO_Init+0xd4>)
 8001040:	f011 fb94 	bl	801276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	@ (800108c <MX_GPIO_Init+0xd8>)
 800105c:	f011 f8fe 	bl	801225c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001060:	2320      	movs	r3, #32
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_GPIO_Init+0xd4>)
 8001078:	f011 f8f0 	bl	801225c <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020800 	.word	0x40020800

08001090 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch,1,100);
 8001098:	1d39      	adds	r1, r7, #4
 800109a:	2364      	movs	r3, #100	@ 0x64
 800109c:	2201      	movs	r2, #1
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <__io_putchar+0x20>)
 80010a0:	f013 fa0e 	bl	80144c0 <HAL_UART_Transmit>
	return ch;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002a8 	.word	0x200002a8

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f010 ff78 	bl	8011fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f80a 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f7ff ff78 	bl	8000fb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010c4:	f000 fafa 	bl	80016bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 80010c8:	f000 fb90 	bl	80017ec <init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80010cc:	f000 fbd2 	bl	8001874 <loop>
 80010d0:	e7fc      	b.n	80010cc <main+0x18>
	...

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2234      	movs	r2, #52	@ 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f014 fc08 	bl	80158f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <SystemClock_Config+0xd4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <SystemClock_Config+0xd4>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001106:	6413      	str	r3, [r2, #64]	@ 0x40
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <SystemClock_Config+0xd4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <SystemClock_Config+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001120:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <SystemClock_Config+0xd8>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <SystemClock_Config+0xd8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001148:	2310      	movs	r3, #16
 800114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800114c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001150:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001152:	2304      	movs	r3, #4
 8001154:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800115a:	2302      	movs	r3, #2
 800115c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4618      	mov	r0, r3
 8001164:	f012 febe 	bl	8013ee4 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800116e:	f000 f81f 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2102      	movs	r1, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f012 fb5e 	bl	8013850 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800119a:	f000 f809 	bl	80011b0 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	@ 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f010 fffa 	bl	80121f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f010 fef5 	bl	8012050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <BSP_I2C1_Init+0x58>)
 8001278:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <BSP_I2C1_Init+0x5c>)
 800127a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <BSP_I2C1_Init+0x60>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	4912      	ldr	r1, [pc, #72]	@ (80012cc <BSP_I2C1_Init+0x60>)
 8001284:	600a      	str	r2, [r1, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d117      	bne.n	80012ba <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800128a:	480e      	ldr	r0, [pc, #56]	@ (80012c4 <BSP_I2C1_Init+0x58>)
 800128c:	f011 ff40 	bl	8013110 <HAL_I2C_GetState>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d111      	bne.n	80012ba <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001296:	480b      	ldr	r0, [pc, #44]	@ (80012c4 <BSP_I2C1_Init+0x58>)
 8001298:	f000 f8d2 	bl	8001440 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10b      	bne.n	80012ba <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <BSP_I2C1_Init+0x58>)
 80012a4:	f000 f898 	bl	80013d8 <MX_I2C1_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012ae:	f06f 0307 	mvn.w	r3, #7
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	e001      	b.n	80012ba <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000024c 	.word	0x2000024c
 80012c8:	40005400 	.word	0x40005400
 80012cc:	200002a0 	.word	0x200002a0

080012d0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <BSP_I2C1_DeInit+0x48>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d014      	beq.n	800130c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <BSP_I2C1_DeInit+0x48>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <BSP_I2C1_DeInit+0x48>)
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <BSP_I2C1_DeInit+0x48>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <BSP_I2C1_DeInit+0x4c>)
 80012f6:	f000 f8ed 	bl	80014d4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80012fa:	4808      	ldr	r0, [pc, #32]	@ (800131c <BSP_I2C1_DeInit+0x4c>)
 80012fc:	f011 fb94 	bl	8012a28 <HAL_I2C_DeInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001306:	f06f 0307 	mvn.w	r3, #7
 800130a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002a0 	.word	0x200002a0
 800131c:	2000024c 	.word	0x2000024c

08001320 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af02      	add	r7, sp, #8
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	80fb      	strh	r3, [r7, #6]
 800132c:	4613      	mov	r3, r2
 800132e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	88f9      	ldrh	r1, [r7, #6]
 8001338:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800133c:	9200      	str	r2, [sp, #0]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	480b      	ldr	r0, [pc, #44]	@ (8001370 <BSP_I2C1_Send+0x50>)
 8001342:	f011 fbb5 	bl	8012ab0 <HAL_I2C_Master_Transmit>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00c      	beq.n	8001366 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800134c:	4808      	ldr	r0, [pc, #32]	@ (8001370 <BSP_I2C1_Send+0x50>)
 800134e:	f011 feed 	bl	801312c <HAL_I2C_GetError>
 8001352:	4603      	mov	r3, r0
 8001354:	2b04      	cmp	r3, #4
 8001356:	d003      	beq.n	8001360 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001358:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e002      	b.n	8001366 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001360:	f06f 0303 	mvn.w	r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000024c 	.word	0x2000024c

08001374 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	88f9      	ldrh	r1, [r7, #6]
 800138c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <BSP_I2C1_Recv+0x50>)
 8001396:	f011 fc89 	bl	8012cac <HAL_I2C_Master_Receive>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00c      	beq.n	80013ba <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <BSP_I2C1_Recv+0x50>)
 80013a2:	f011 fec3 	bl	801312c <HAL_I2C_GetError>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d003      	beq.n	80013b4 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013ac:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e002      	b.n	80013ba <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013b4:	f06f 0303 	mvn.w	r3, #3
 80013b8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000024c 	.word	0x2000024c

080013c8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80013cc:	f010 fe54 	bl	8012078 <HAL_GetTick>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <MX_I2C1_Init+0x60>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a13      	ldr	r2, [pc, #76]	@ (800143c <MX_I2C1_Init+0x64>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f011 f9bf 	bl	80127a0 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40005400 	.word	0x40005400
 800143c:	000186a0 	.word	0x000186a0

08001440 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <I2C1_MspInit+0x8c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <I2C1_MspInit+0x8c>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <I2C1_MspInit+0x8c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146a:	2312      	movs	r3, #18
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001476:	2304      	movs	r3, #4
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4813      	ldr	r0, [pc, #76]	@ (80014d0 <I2C1_MspInit+0x90>)
 8001482:	f010 feeb 	bl	801225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001486:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001498:	2304      	movs	r3, #4
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <I2C1_MspInit+0x90>)
 80014a4:	f010 feda 	bl	801225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <I2C1_MspInit+0x8c>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <I2C1_MspInit+0x8c>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <I2C1_MspInit+0x8c>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <I2C1_MspDeInit+0x30>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <I2C1_MspDeInit+0x30>)
 80014e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014e6:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80014e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ec:	4806      	ldr	r0, [pc, #24]	@ (8001508 <I2C1_MspDeInit+0x34>)
 80014ee:	f011 f849 	bl	8012584 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80014f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f6:	4804      	ldr	r0, [pc, #16]	@ (8001508 <I2C1_MspDeInit+0x34>)
 80014f8:	f011 f844 	bl	8012584 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return 1;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_kill>:

int _kill(int pid, int sig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001526:	f014 fa4d 	bl	80159c4 <__errno>
 800152a:	4603      	mov	r3, r0
 800152c:	2216      	movs	r2, #22
 800152e:	601a      	str	r2, [r3, #0]
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_exit>:

void _exit (int status)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ffe7 	bl	800151c <_kill>
  while (1) {}    /* Make sure we hang here */
 800154e:	bf00      	nop
 8001550:	e7fd      	b.n	800154e <_exit+0x12>

08001552 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e00a      	b.n	800157a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001564:	f3af 8000 	nop.w
 8001568:	4601      	mov	r1, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	b2ca      	uxtb	r2, r1
 8001572:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbf0      	blt.n	8001564 <_read+0x12>
  }

  return len;
 8001582:	687b      	ldr	r3, [r7, #4]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e009      	b.n	80015b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fd72 	bl	8001090 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbf1      	blt.n	800159e <_write+0x12>
  }
  return len;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_close>:

int _close(int file)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ec:	605a      	str	r2, [r3, #4]
  return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_isatty>:

int _isatty(int file)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f014 f9b2 	bl	80159c4 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20020000 	.word	0x20020000
 800168c:	00000400 	.word	0x00000400
 8001690:	200002a4 	.word	0x200002a4
 8001694:	20002ad8 	.word	0x20002ad8

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f012 fe94 	bl	8014420 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f7ff fd57 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002a8 	.word	0x200002a8
 800170c:	40004400 	.word	0x40004400

08001710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_UART_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_UART_MspInit+0x88>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800176a:	230c      	movs	r3, #12
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <HAL_UART_MspInit+0x8c>)
 8001786:	f010 fd69 	bl	801225c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40004400 	.word	0x40004400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <_ZL17vl53l4cx_io_writetPht>:
#include "vl53lx_api.h"


// 書き込み用の関数
static int32_t vl53l4cx_io_write(uint16_t DevAddr, uint8_t *pdata, uint16_t count)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	80fb      	strh	r3, [r7, #6]
 80017ac:	4613      	mov	r3, r2
 80017ae:	80bb      	strh	r3, [r7, #4]

  return BSP_I2C1_Send(DevAddr, pdata, count);
 80017b0:	88ba      	ldrh	r2, [r7, #4]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fdb2 	bl	8001320 <BSP_I2C1_Send>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZL16vl53l4cx_io_readtPht>:

// 読み取り用の関数
static int32_t vl53l4cx_io_read(uint16_t DevAddr, uint8_t *pdata, uint16_t count)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	6039      	str	r1, [r7, #0]
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80bb      	strh	r3, [r7, #4]

  return BSP_I2C1_Recv(DevAddr, pdata, count);
 80017d6:	88ba      	ldrh	r2, [r7, #4]
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fdc9 	bl	8001374 <BSP_I2C1_Recv>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <init>:
	8U,/* BotRightX : 15 (max) */
	8U /* BotRightY : 15 (max) */
};


void init(){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0


	while(VL53L4CX_RegisterBusIO(&vl53l4cx, &vl53l4cx_io) != 0){
 80017f0:	e011      	b.n	8001816 <init+0x2a>

		static uint8_t error_count = 0;

		if(error_count++ > 100){
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <init+0x6c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	b2d1      	uxtb	r1, r2
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <init+0x6c>)
 80017fc:	7011      	strb	r1, [r2, #0]
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	bf8c      	ite	hi
 8001802:	2301      	movhi	r3, #1
 8001804:	2300      	movls	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <init+0x2a>

			printf("InitError\n");
 800180c:	4813      	ldr	r0, [pc, #76]	@ (800185c <init+0x70>)
 800180e:	f013 ff93 	bl	8015738 <puts>
			while(1);
 8001812:	bf00      	nop
 8001814:	e7fd      	b.n	8001812 <init+0x26>
	while(VL53L4CX_RegisterBusIO(&vl53l4cx, &vl53l4cx_io) != 0){
 8001816:	4912      	ldr	r1, [pc, #72]	@ (8001860 <init+0x74>)
 8001818:	4812      	ldr	r0, [pc, #72]	@ (8001864 <init+0x78>)
 800181a:	f010 f88e 	bl	801193a <VL53L4CX_RegisterBusIO>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e1      	bne.n	80017f2 <init+0x6>
		}
	}

	printf("InitOK\n");
 800182e:	480e      	ldr	r0, [pc, #56]	@ (8001868 <init+0x7c>)
 8001830:	f013 ff82 	bl	8015738 <puts>

	// 登録した関数を使って初期化をする
	VL53L4CX_Init(&vl53l4cx);
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <init+0x78>)
 8001836:	f010 f8b5 	bl	80119a4 <VL53L4CX_Init>

	// ProflieConfingの設定(測定レートなど）
	VL53L4CX_ConfigProfile(&vl53l4cx, &vl53l4cx_profileConfig_t);
 800183a:	490c      	ldr	r1, [pc, #48]	@ (800186c <init+0x80>)
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <init+0x78>)
 800183e:	f010 f909 	bl	8011a54 <VL53L4CX_ConfigProfile>

	// ROIConfigの設定（測定範囲）
	VL53L4CX_ConfigROI(&vl53l4cx, &vl53l4cx_roiConfig_t);
 8001842:	490b      	ldr	r1, [pc, #44]	@ (8001870 <init+0x84>)
 8001844:	4807      	ldr	r0, [pc, #28]	@ (8001864 <init+0x78>)
 8001846:	f010 f962 	bl	8011b0e <VL53L4CX_ConfigROI>

	// 割り込みの設定（特定範囲に入ったらGPIO出力などができる）
	//VL53L4CX_ConfigIT(&vl53l4cx, pITConfig)

    // 測定開始（連続測距モード）
	VL53L4CX_Start(&vl53l4cx, VL53L4CX_MODE_BLOCKING_CONTINUOUS);
 800184a:	2101      	movs	r1, #1
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <init+0x78>)
 800184e:	f010 f9e1 	bl	8011c14 <VL53L4CX_Start>
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200027e0 	.word	0x200027e0
 800185c:	08017660 	.word	0x08017660
 8001860:	20000004 	.word	0x20000004
 8001864:	200002f0 	.word	0x200002f0
 8001868:	0801766c 	.word	0x0801766c
 800186c:	2000001c 	.word	0x2000001c
 8001870:	20000030 	.word	0x20000030

08001874 <loop>:

void loop(){
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	b087      	sub	sp, #28
 8001878:	af02      	add	r7, sp, #8

	// 結果を取得するための構造体のインスタンスを作成
	static VL53L4CX_Result_t res;

	// 測定結果を取得
	VL53L4CX_GetDistance(&vl53l4cx, &res);
 800187a:	4935      	ldr	r1, [pc, #212]	@ (8001950 <loop+0xdc>)
 800187c:	4835      	ldr	r0, [pc, #212]	@ (8001954 <loop+0xe0>)
 800187e:	f010 f975 	bl	8011b6c <VL53L4CX_GetDistance>

	if(res.ZoneResult[0].Status[0] == 1){
 8001882:	4b33      	ldr	r3, [pc, #204]	@ (8001950 <loop+0xdc>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d103      	bne.n	8001892 <loop+0x1e>

		printf("Error: GetDistance\n");
 800188a:	4833      	ldr	r0, [pc, #204]	@ (8001958 <loop+0xe4>)
 800188c:	f013 ff54 	bl	8015738 <puts>
        printf("%8d, %7.3lf, %7.3lf\n", res.ZoneResult[0].Distance[best_index], res.ZoneResult[0].Ambient[best_index], res.ZoneResult[0].Signal[best_index]);
	}

	// 測定終了
	//VL53L4CX_Stop(&vl53l4cx);
}
 8001890:	e059      	b.n	8001946 <loop+0xd2>
		float best_SNR = 0.0f;
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
		uint8_t best_index = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i=0; i<res.ZoneResult[0].NumberOfTargets; i++){
 800189c:	2300      	movs	r3, #0
 800189e:	73bb      	strb	r3, [r7, #14]
 80018a0:	e021      	b.n	80018e6 <loop+0x72>
			float SNR = res.ZoneResult[0].Signal[i] / res.ZoneResult[0].Ambient[i];
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001950 <loop+0xdc>)
 80018a6:	330c      	adds	r3, #12
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3308      	adds	r3, #8
 80018ae:	edd3 6a00 	vldr	s13, [r3]
 80018b2:	7bbb      	ldrb	r3, [r7, #14]
 80018b4:	4a26      	ldr	r2, [pc, #152]	@ (8001950 <loop+0xdc>)
 80018b6:	3308      	adds	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3308      	adds	r3, #8
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c6:	edc7 7a01 	vstr	s15, [r7, #4]
			if(best_SNR < SNR){
 80018ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d501      	bpl.n	80018e0 <loop+0x6c>
				best_index = i;
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i=0; i<res.ZoneResult[0].NumberOfTargets; i++){
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	3301      	adds	r3, #1
 80018e4:	73bb      	strb	r3, [r7, #14]
 80018e6:	7bba      	ldrb	r2, [r7, #14]
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <loop+0xdc>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3d8      	bcc.n	80018a2 <loop+0x2e>
        printf("%8s %7s %7s\n","Distance", "Ambient", "Signal");
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <loop+0xe8>)
 80018f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <loop+0xec>)
 80018f4:	491b      	ldr	r1, [pc, #108]	@ (8001964 <loop+0xf0>)
 80018f6:	481c      	ldr	r0, [pc, #112]	@ (8001968 <loop+0xf4>)
 80018f8:	f013 feb6 	bl	8015668 <iprintf>
        printf("%8d, %7.3lf, %7.3lf\n", res.ZoneResult[0].Distance[best_index], res.ZoneResult[0].Ambient[best_index], res.ZoneResult[0].Signal[best_index]);
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <loop+0xdc>)
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	689e      	ldr	r6, [r3, #8]
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4a11      	ldr	r2, [pc, #68]	@ (8001950 <loop+0xdc>)
 800190a:	3308      	adds	r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3308      	adds	r3, #8
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe37 	bl	8000588 <__aeabi_f2d>
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <loop+0xdc>)
 8001922:	330c      	adds	r3, #12
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3308      	adds	r3, #8
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe2b 	bl	8000588 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	e9cd 2300 	strd	r2, r3, [sp]
 800193a:	4622      	mov	r2, r4
 800193c:	462b      	mov	r3, r5
 800193e:	4631      	mov	r1, r6
 8001940:	480a      	ldr	r0, [pc, #40]	@ (800196c <loop+0xf8>)
 8001942:	f013 fe91 	bl	8015668 <iprintf>
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	bf00      	nop
 8001950:	200027e4 	.word	0x200027e4
 8001954:	200002f0 	.word	0x200002f0
 8001958:	08017674 	.word	0x08017674
 800195c:	08017688 	.word	0x08017688
 8001960:	08017690 	.word	0x08017690
 8001964:	08017698 	.word	0x08017698
 8001968:	080176a4 	.word	0x080176a4
 800196c:	080176b4 	.word	0x080176b4

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001974:	f7ff fe90 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	@ (80019bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800199e:	f014 f817 	bl	80159d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff fb87 	bl	80010b4 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80019b4:	08017a74 	.word	0x08017a74
  ldr r2, =_sbss
 80019b8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80019bc:	20002ad8 	.word	0x20002ad8

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>

080019c2 <VL53LX_DataInit>:
	return Status;
}


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 80019ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 80019d6:	2101      	movs	r1, #1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 fcb3 	bl	8003344 <VL53LX_data_init>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 80019e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 80019ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019ee:	2102      	movs	r1, #2
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f885 	bl	8001b00 <SetPresetModeL3CX>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 80019fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001a02:	f248 2135 	movw	r1, #33333	@ 0x8235
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f980 	bl	8001d0c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3318      	adds	r3, #24
 8001a1c:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8001a24:	220c      	movs	r2, #12
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f013 ff65 	bl	80158f8 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d105      	bne.n	8001a42 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001a36:	2102      	movs	r1, #2
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f003 fe52 	bl	80056e2 <VL53LX_set_dmax_mode>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 ff2f 	bl	80028b0 <VL53LX_SmudgeCorrectionEnable>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001a56:	2320      	movs	r3, #32
 8001a58:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 24e0 	strb.w	r2, [r3, #1248]	@ 0x4e0
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001a84:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f00f f923 	bl	8010cd4 <VL53LX_poll_for_boot_completion>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001ab0:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <ComputeDevicePresetMode+0x5c>)
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	8019      	strh	r1, [r3, #0]
 8001abc:	3302      	adds	r3, #2
 8001abe:	0c12      	lsrs	r2, r2, #16
 8001ac0:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <ComputeDevicePresetMode+0x2e>
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d003      	beq.n	8001ad4 <ComputeDevicePresetMode+0x34>
 8001acc:	e005      	b.n	8001ada <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
		break;
 8001ad2:	e004      	b.n	8001ade <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
		break;
 8001ad8:	e001      	b.n	8001ade <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	443b      	add	r3, r7
 8001ae4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	701a      	strb	r2, [r3, #0]

	return Status;
 8001aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	080176cc 	.word	0x080176cc

08001b00 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b08e      	sub	sp, #56	@ 0x38
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001b24:	2320      	movs	r3, #32
 8001b26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001b2a:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ffb4 	bl	8001aa0 <ComputeDevicePresetMode>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001b46:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8001b4a:	f107 001c 	add.w	r0, r7, #28
 8001b4e:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	f107 0318 	add.w	r3, r7, #24
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f002 f852 	bl	8003c0a <VL53LX_get_preset_mode_timing_cfg>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d112      	bne.n	8001b9a <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001b74:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8001b78:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8001b7a:	69fd      	ldr	r5, [r7, #28]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	9102      	str	r1, [sp, #8]
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	462b      	mov	r3, r5
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	4601      	mov	r1, r0
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f002 f89c 	bl	8003ccc <VL53LX_set_preset_mode>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ba8:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001baa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}

08001bb6 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3318      	adds	r3, #24
 8001bc6:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f893 3393 	ldrb.w	r3, [r3, #915]	@ 0x393
 8001bce:	2baa      	cmp	r3, #170	@ 0xaa
 8001bd0:	d106      	bne.n	8001be0 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001bd8:	2beb      	cmp	r3, #235	@ 0xeb
 8001bda:	d101      	bne.n	8001be0 <IsL4+0x2a>
		devL4 = 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001be0:	68fb      	ldr	r3, [r7, #12]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001bfa:	793b      	ldrb	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d808      	bhi.n	8001c12 <CheckValidRectRoi+0x24>
 8001c00:	797b      	ldrb	r3, [r7, #5]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	d805      	bhi.n	8001c12 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c06:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d802      	bhi.n	8001c12 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	d901      	bls.n	8001c16 <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c12:	23fc      	movs	r3, #252	@ 0xfc
 8001c14:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001c16:	793a      	ldrb	r2, [r7, #4]
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d803      	bhi.n	8001c26 <CheckValidRectRoi+0x38>
 8001c1e:	797a      	ldrb	r2, [r7, #5]
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d201      	bcs.n	8001c2a <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001c26:	23fc      	movs	r3, #252	@ 0xfc
 8001c28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d008      	beq.n	8001c6e <VL53LX_SetDistanceMode+0x34>
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d005      	beq.n	8001c6e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d002      	beq.n	8001c6e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001c68:	f06f 0303 	mvn.w	r3, #3
 8001c6c:	e049      	b.n	8001d02 <VL53LX_SetDistanceMode+0xc8>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa1 	bl	8001bb6 <IsL4>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <VL53LX_SetDistanceMode+0x4c>
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001c80:	f06f 0303 	mvn.w	r3, #3
 8001c84:	e03d      	b.n	8001d02 <VL53LX_SetDistanceMode+0xc8>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001c8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	f107 0210 	add.w	r2, r7, #16
 8001c9c:	f107 010c 	add.w	r1, r7, #12
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f001 fe8d 	bl	80039c0 <VL53LX_get_timeouts_us>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff21 	bl	8001b00 <SetPresetModeL3CX>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001cc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <VL53LX_SetDistanceMode+0x9e>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f882 34e0 	strb.w	r3, [r2, #1248]	@ 0x4e0
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10e      	bne.n	8001cfe <VL53LX_SetDistanceMode+0xc4>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f001 fe31 	bl	800394e <VL53LX_set_timeouts_us>
 8001cec:	4603      	mov	r3, r0
 8001cee:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <VL53LX_SetDistanceMode+0xc4>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8001d2a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4a31      	ldr	r2, [pc, #196]	@ (8001df4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d902      	bls.n	8001d3a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001d34:	23fc      	movs	r3, #252	@ 0xfc
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 8001d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	f107 0210 	add.w	r2, r7, #16
 8001d4a:	f107 010c 	add.w	r1, r7, #12
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f001 fe36 	bl	80039c0 <VL53LX_get_timeouts_us>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8001d5a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8001d5e:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8001d60:	2306      	movs	r3, #6
 8001d62:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff26 	bl	8001bb6 <IsL4>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8001d70:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8001d72:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d803      	bhi.n	8001d84 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001d7c:	23fc      	movs	r3, #252	@ 0xfc
 8001d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d82:	e003      	b.n	8001d8c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001d8a:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11c      	bne.n	8001dce <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	6a3a      	ldr	r2, [r7, #32]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d203      	bcs.n	8001da4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8001d9c:	23fc      	movs	r3, #252	@ 0xfc
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001da2:	e00d      	b.n	8001dc0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f001 fdca 	bl	800394e <VL53LX_set_timeouts_us>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001dc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	629a      	str	r2, [r3, #40]	@ 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f8c2 34e4 	str.w	r3, [r2, #1252]	@ 0x4e4
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3728      	adds	r7, #40	@ 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	00086470 	.word	0x00086470
 8001df4:	00989680 	.word	0x00989680
 8001df8:	00030d40 	.word	0x00030d40

08001dfc <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b092      	sub	sp, #72	@ 0x48
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff feeb 	bl	8001bee <CheckValidRectRoi>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (Status != VL53LX_ERROR_NONE)
 8001e1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <VL53LX_SetUserROI+0x30>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001e26:	f06f 0303 	mvn.w	r3, #3
 8001e2a:	e050      	b.n	8001ece <VL53LX_SetUserROI+0xd2>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	461a      	mov	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	3301      	adds	r3, #1
 8001e3a:	0fda      	lsrs	r2, r3, #31
 8001e3c:	4413      	add	r3, r2
 8001e3e:	105b      	asrs	r3, r3, #1
 8001e40:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	78db      	ldrb	r3, [r3, #3]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3301      	adds	r3, #1
 8001e52:	0fda      	lsrs	r2, r3, #31
 8001e54:	4413      	add	r3, r2
 8001e56:	105b      	asrs	r3, r3, #1
 8001e58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	789a      	ldrb	r2, [r3, #2]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	785a      	ldrb	r2, [r3, #1]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	zone_cfg.max_zones = 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8001e80:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001e84:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8001e88:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001e8c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	zone_cfg.user_zones[0].width = width;
 8001e90:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	zone_cfg.user_zones[0].height = height;
 8001e98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ((width < 3) || (height < 3))
 8001ea0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d903      	bls.n	8001eb0 <VL53LX_SetUserROI+0xb4>
 8001ea8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d803      	bhi.n	8001eb8 <VL53LX_SetUserROI+0xbc>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001eb0:	23fc      	movs	r3, #252	@ 0xfc
 8001eb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001eb6:	e008      	b.n	8001eca <VL53LX_SetUserROI+0xce>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f001 fe60 	bl	8003b84 <VL53LX_set_zone_config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8001eca:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3748      	adds	r7, #72	@ 0x48
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3318      	adds	r3, #24
 8001ee6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f001 f8fd 	bl	80030e8 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75bb      	strb	r3, [r7, #22]
 8001ef2:	e01a      	b.n	8001f2a <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001ef4:	7dbb      	ldrb	r3, [r7, #22]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001efc:	3308      	adds	r3, #8
 8001efe:	2100      	movs	r1, #0
 8001f00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001f04:	7dbb      	ldrb	r3, [r7, #22]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001f0e:	3318      	adds	r3, #24
 8001f10:	22ff      	movs	r2, #255	@ 0xff
 8001f12:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001f14:	7dbb      	ldrb	r3, [r7, #22]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001f1e:	331c      	adds	r3, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001f24:	7dbb      	ldrb	r3, [r7, #22]
 8001f26:	3301      	adds	r3, #1
 8001f28:	75bb      	strb	r3, [r7, #22]
 8001f2a:	7dbb      	ldrb	r3, [r7, #22]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d9e1      	bls.n	8001ef4 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	pdev->PreviousRangeActiveResults = 0;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7edb      	ldrb	r3, [r3, #27]
 8001f4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8001f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f001 ff79 	bl	8003e54 <VL53LX_init_and_start_range>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <VL53LX_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7edb      	ldrb	r3, [r3, #27]
 8001f82:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f002 fef2 	bl	8004d72 <VL53LX_clear_interrupt_and_enable_next_range>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8001fac:	6839      	ldr	r1, [r7, #0]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f00e fe56 	bl	8010c60 <VL53LX_is_new_data_ready>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	3b05      	subs	r3, #5
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d840      	bhi.n	8002058 <ConvertStatusHisto+0x94>
 8001fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <ConvertStatusHisto+0x18>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08002029 	.word	0x08002029
 8001fe0:	0800202f 	.word	0x0800202f
 8001fe4:	0800203b 	.word	0x0800203b
 8001fe8:	08002059 	.word	0x08002059
 8001fec:	08002053 	.word	0x08002053
 8001ff0:	08002059 	.word	0x08002059
 8001ff4:	08002059 	.word	0x08002059
 8001ff8:	08002059 	.word	0x08002059
 8001ffc:	08002059 	.word	0x08002059
 8002000:	08002059 	.word	0x08002059
 8002004:	08002059 	.word	0x08002059
 8002008:	08002059 	.word	0x08002059
 800200c:	08002059 	.word	0x08002059
 8002010:	08002059 	.word	0x08002059
 8002014:	08002035 	.word	0x08002035
 8002018:	08002047 	.word	0x08002047
 800201c:	08002059 	.word	0x08002059
 8002020:	0800204d 	.word	0x0800204d
 8002024:	08002041 	.word	0x08002041
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002028:	2304      	movs	r3, #4
 800202a:	73fb      	strb	r3, [r7, #15]
		break;
 800202c:	e016      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
		break;
 8002032:	e013      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8002034:	2306      	movs	r3, #6
 8002036:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8002038:	e010      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800203a:	2307      	movs	r3, #7
 800203c:	73fb      	strb	r3, [r7, #15]
		break;
 800203e:	e00d      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002040:	230c      	movs	r3, #12
 8002042:	73fb      	strb	r3, [r7, #15]
		break;
 8002044:	e00a      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002046:	2307      	movs	r3, #7
 8002048:	73fb      	strb	r3, [r7, #15]
		break;
 800204a:	e007      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 800204c:	230b      	movs	r3, #11
 800204e:	73fb      	strb	r3, [r7, #15]
		break;
 8002050:	e004      	b.n	800205c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
		break;
 8002056:	e001      	b.n	800205c <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8002058:	23ff      	movs	r3, #255	@ 0xff
 800205a:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	@ 0x38
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	4603      	mov	r3, r0
 800207c:	70fb      	strb	r3, [r7, #3]
 800207e:	460b      	mov	r3, r1
 8002080:	70bb      	strb	r3, [r7, #2]
 8002082:	4613      	mov	r3, r2
 8002084:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3318      	adds	r3, #24
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002094:	33f8      	adds	r3, #248	@ 0xf8
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800209c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800209e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80020aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ac:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020ae:	025b      	lsls	r3, r3, #9
 80020b0:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80020b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020b4:	6a3a      	ldr	r2, [r7, #32]
 80020b6:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80020b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80020bc:	025b      	lsls	r3, r3, #9
 80020be:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80020c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80020c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80020ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80020d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 80020da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020dc:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80020de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020e0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 80020e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020e6:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80020e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ea:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 80020ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020f0:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 80020f2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80020f6:	2b11      	cmp	r3, #17
 80020f8:	d009      	beq.n	800210e <SetTargetData+0xa2>
 80020fa:	2b11      	cmp	r3, #17
 80020fc:	dc0f      	bgt.n	800211e <SetTargetData+0xb2>
 80020fe:	2b03      	cmp	r3, #3
 8002100:	dc02      	bgt.n	8002108 <SetTargetData+0x9c>
 8002102:	2b00      	cmp	r3, #0
 8002104:	dc03      	bgt.n	800210e <SetTargetData+0xa2>
 8002106:	e00a      	b.n	800211e <SetTargetData+0xb2>
 8002108:	2b0d      	cmp	r3, #13
 800210a:	d004      	beq.n	8002116 <SetTargetData+0xaa>
 800210c:	e007      	b.n	800211e <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 800210e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002110:	2205      	movs	r2, #5
 8002112:	749a      	strb	r2, [r3, #18]
		break;
 8002114:	e006      	b.n	8002124 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8002116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002118:	220d      	movs	r2, #13
 800211a:	749a      	strb	r2, [r3, #18]
		break;
 800211c:	e002      	b.n	8002124 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 800211e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002120:	2200      	movs	r2, #0
 8002122:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002126:	7c9b      	ldrb	r3, [r3, #18]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d117      	bne.n	800215c <SetTargetData+0xf0>
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d114      	bne.n	800215c <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8002132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002134:	22ff      	movs	r2, #255	@ 0xff
 8002136:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 800213e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8002144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002146:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 800214a:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 800214c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214e:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8002152:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8002154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002156:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 800215a:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 800215c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800215e:	7c9b      	ldrb	r3, [r3, #18]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d108      	bne.n	8002176 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8002164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff2b 	bl	8001fc4 <ConvertStatusHisto>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8002172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002174:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	461a      	mov	r2, r3
 800217c:	f248 0191 	movw	r1, #32913	@ 0x8091
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f003 faef 	bl	8005764 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002186:	78bb      	ldrb	r3, [r7, #2]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002196:	8a1b      	ldrh	r3, [r3, #16]
 8002198:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 800219e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a0:	2200      	movs	r2, #0
 80021a2:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80021a4:	f107 030b 	add.w	r3, r7, #11
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f009 f97c 	bl	800b4a8 <VL53LX_compute_histo_merge_nb>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d109      	bne.n	80021d0 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 80021bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
	if ((active_results != 1) ||
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 81db 	beq.w	8002592 <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 80021dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021de:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	d004      	beq.n	80021ee <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80021e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021e6:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	f040 81d2 	bne.w	8002592 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80021ee:	787b      	ldrb	r3, [r7, #1]
 80021f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80021f8:	3318      	adds	r3, #24
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b07      	cmp	r3, #7
 80021fe:	d01c      	beq.n	800223a <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002204:	4413      	add	r3, r2
 8002206:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800220a:	3318      	adds	r3, #24
 800220c:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800220e:	2b04      	cmp	r3, #4
 8002210:	d013      	beq.n	800223a <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002212:	787b      	ldrb	r3, [r7, #1]
 8002214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002216:	4413      	add	r3, r2
 8002218:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800221c:	3318      	adds	r3, #24
 800221e:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 81b6 	bne.w	8002592 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002226:	787b      	ldrb	r3, [r7, #1]
 8002228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222a:	4413      	add	r3, r2
 800222c:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002230:	331c      	adds	r3, #28
 8002232:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 81ac 	bne.w	8002592 <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 800223a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002240:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002244:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002248:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 800224c:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 800224e:	429a      	cmp	r2, r3
 8002250:	d00c      	beq.n	800226c <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 8002252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002254:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002258:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800225c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 800225e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002260:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 8002264:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002266:	429a      	cmp	r2, r3
 8002268:	f040 816b 	bne.w	8002542 <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 800226c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800226e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002272:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002278:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800227c:	3308      	adds	r3, #8
 800227e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002282:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 8002290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	2b21      	cmp	r3, #33	@ 0x21
 8002296:	d008      	beq.n	80022aa <SetTargetData+0x23e>
 8002298:	2b21      	cmp	r3, #33	@ 0x21
 800229a:	f300 814e 	bgt.w	800253a <SetTargetData+0x4ce>
 800229e:	2b1b      	cmp	r3, #27
 80022a0:	f000 80d7 	beq.w	8002452 <SetTargetData+0x3e6>
 80022a4:	2b1e      	cmp	r3, #30
 80022a6:	d004      	beq.n	80022b2 <SetTargetData+0x246>
 80022a8:	e147      	b.n	800253a <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80022b0:	e147      	b.n	8002542 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 80022b8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dd0e      	ble.n	80022de <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80022c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80022c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	da07      	bge.n	80022de <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d104      	bne.n	80022de <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80022da:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80022dc:	e0b8      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80022de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e4:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 80022e8:	425b      	negs	r3, r3
 80022ea:	429a      	cmp	r2, r3
 80022ec:	da0f      	bge.n	800230e <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80022ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 80022f8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dd07      	ble.n	800230e <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8002304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002306:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800230a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800230c:	e0a0      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002310:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8002314:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002318:	429a      	cmp	r2, r3
 800231a:	dd0e      	ble.n	800233a <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002322:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002326:	429a      	cmp	r2, r3
 8002328:	da07      	bge.n	800233a <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 8002330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002332:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8002336:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002338:	e08a      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800233a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8002344:	425b      	negs	r3, r3
 8002346:	429a      	cmp	r2, r3
 8002348:	da0f      	bge.n	800236a <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800234a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800234e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002350:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8002354:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002356:	429a      	cmp	r2, r3
 8002358:	dd07      	ble.n	800236a <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d104      	bne.n	800236a <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8002366:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002368:	e072      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8002370:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002374:	429a      	cmp	r2, r3
 8002376:	dd0e      	ble.n	8002396 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800237e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002382:	429a      	cmp	r2, r3
 8002384:	da07      	bge.n	8002396 <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d104      	bne.n	8002396 <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 800238c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002392:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002394:	e05c      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002396:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 80023a0:	425b      	negs	r3, r3
 80023a2:	429a      	cmp	r2, r3
 80023a4:	da0f      	bge.n	80023c6 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80023a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ac:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 80023b0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dd07      	ble.n	80023c6 <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 80023bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023be:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 80023c2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80023c4:	e044      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 80023cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dd0e      	ble.n	80023f2 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80023d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d6:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80023da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023de:	429a      	cmp	r2, r3
 80023e0:	da07      	bge.n	80023f2 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d104      	bne.n	80023f2 <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 80023e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ea:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80023ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80023f0:	e02e      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80023f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 80023fc:	425b      	negs	r3, r3
 80023fe:	429a      	cmp	r2, r3
 8002400:	da0f      	bge.n	8002422 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002402:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002408:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 800240c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800240e:	429a      	cmp	r2, r3
 8002410:	dd07      	ble.n	8002422 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d104      	bne.n	8002422 <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 8002418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 800241e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002420:	e016      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8002428:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800242c:	429a      	cmp	r2, r3
 800242e:	da0b      	bge.n	8002448 <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002436:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800243a:	429a      	cmp	r2, r3
 800243c:	dd04      	ble.n	8002448 <SetTargetData+0x3dc>
					AddOffset =
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8002444:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002446:	e003      	b.n	8002450 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800244e:	e078      	b.n	8002542 <SetTargetData+0x4d6>
 8002450:	e077      	b.n	8002542 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002454:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002458:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800245c:	429a      	cmp	r2, r3
 800245e:	dd0e      	ble.n	800247e <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002462:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002466:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800246a:	429a      	cmp	r2, r3
 800246c:	da07      	bge.n	800247e <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 800247a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800247c:	e05c      	b.n	8002538 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800247e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002484:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002488:	425b      	negs	r3, r3
 800248a:	429a      	cmp	r2, r3
 800248c:	da0f      	bge.n	80024ae <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800248e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8002498:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800249a:	429a      	cmp	r2, r3
 800249c:	dd07      	ble.n	80024ae <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d104      	bne.n	80024ae <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 80024aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80024ac:	e044      	b.n	8002538 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 80024b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dd0e      	ble.n	80024da <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80024bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024be:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80024c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	da07      	bge.n	80024da <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d104      	bne.n	80024da <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 80024d6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80024d8:	e02e      	b.n	8002538 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80024da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 80024e4:	425b      	negs	r3, r3
 80024e6:	429a      	cmp	r2, r3
 80024e8:	da0f      	bge.n	800250a <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80024ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f0:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 80024f4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dd07      	ble.n	800250a <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8002506:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002508:	e016      	b.n	8002538 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8002510:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002514:	429a      	cmp	r2, r3
 8002516:	da0b      	bge.n	8002530 <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251a:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800251e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002522:	429a      	cmp	r2, r3
 8002524:	dd04      	ble.n	8002530 <SetTargetData+0x4c4>
					AddOffset =
 8002526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002528:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800252c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800252e:	e003      	b.n	8002538 <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8002536:	e004      	b.n	8002542 <SetTargetData+0x4d6>
 8002538:	e003      	b.n	8002542 <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8002540:	bf00      	nop
			}
		}

		if (uwr_status) {
 8002542:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002546:	2b00      	cmp	r3, #0
 8002548:	d023      	beq.n	8002592 <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 800254a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800254c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002550:	b29a      	uxth	r2, r3
 8002552:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002554:	4413      	add	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	b21a      	sxth	r2, r3
 800255a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800255c:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 800255e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002560:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002564:	b29a      	uxth	r2, r3
 8002566:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002568:	4413      	add	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	b21a      	sxth	r2, r3
 800256e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002570:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8002572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002578:	b29a      	uxth	r2, r3
 800257a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800257c:	4413      	add	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	b21a      	sxth	r2, r3
 8002582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002584:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8002586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002588:	2201      	movs	r2, #1
 800258a:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 800258c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258e:	2200      	movs	r2, #0
 8002590:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002596:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800259a:	3308      	adds	r3, #8
 800259c:	8ab9      	ldrh	r1, [r7, #20]
 800259e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80025a2:	787b      	ldrb	r3, [r7, #1]
 80025a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025a6:	7c91      	ldrb	r1, [r2, #18]
 80025a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80025b0:	3318      	adds	r3, #24
 80025b2:	460a      	mov	r2, r1
 80025b4:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80025b6:	787b      	ldrb	r3, [r7, #1]
 80025b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025ba:	7cd1      	ldrb	r1, [r2, #19]
 80025bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025be:	4413      	add	r3, r2
 80025c0:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80025c4:	331c      	adds	r3, #28
 80025c6:	460a      	mov	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025d0:	461a      	mov	r2, r3
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f882 30a0 	strb.w	r3, [r2, #160]	@ 0xa0

	Range = pRangeData->RangeMilliMeter;
 80025d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025da:	8a1b      	ldrh	r3, [r3, #16]
 80025dc:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80025de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e0:	7c9b      	ldrb	r3, [r3, #18]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d110      	bne.n	8002608 <SetTargetData+0x59c>
 80025e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da0c      	bge.n	8002608 <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 80025ee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <SetTargetData+0x5a8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	da03      	bge.n	8002602 <SetTargetData+0x596>
			pRangeData->RangeStatus =
 80025fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025fc:	220e      	movs	r2, #14
 80025fe:	749a      	strb	r2, [r3, #18]
 8002600:	e002      	b.n	8002608 <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002604:	2200      	movs	r2, #0
 8002606:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002608:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 800260c:	4618      	mov	r0, r3
 800260e:	3738      	adds	r7, #56	@ 0x38
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000034 	.word	0x20000034

08002618 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b08f      	sub	sp, #60	@ 0x3c
 800261c:	af04      	add	r7, sp, #16
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3318      	adds	r3, #24
 8002628:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	7c9a      	ldrb	r2, [r3, #18]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	78da      	ldrb	r2, [r3, #3]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	7c9b      	ldrb	r3, [r3, #18]
 8002656:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <SetMeasurementData+0x4e>

		iteration = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002664:	e002      	b.n	800266c <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002672:	e035      	b.n	80026e0 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8002674:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3308      	adds	r3, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800268c:	224c      	movs	r2, #76	@ 0x4c
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	3310      	adds	r3, #16
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	4413      	add	r3, r2
 8002698:	3304      	adds	r3, #4
 800269a:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 800269c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d113      	bne.n	80026cc <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7918      	ldrb	r0, [r3, #4]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	7c1b      	ldrb	r3, [r3, #16]
 80026ac:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80026b0:	7ff9      	ldrb	r1, [r7, #31]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	9202      	str	r2, [sp, #8]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4623      	mov	r3, r4
 80026be:	4602      	mov	r2, r0
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fcd3 	bl	800206c <SetTargetData>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 80026d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026da:	3301      	adds	r3, #1
 80026dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80026e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80026e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3c3      	bcc.n	8002674 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f893 243f 	ldrb.w	r2, [r3, #1087]	@ 0x43f
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80026fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002704:	e01f      	b.n	8002746 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800270a:	6a3a      	ldr	r2, [r7, #32]
 800270c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8002710:	3308      	adds	r3, #8
 8002712:	2100      	movs	r1, #0
 8002714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	4413      	add	r3, r2
 8002720:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002724:	3318      	adds	r3, #24
 8002726:	22ff      	movs	r2, #255	@ 0xff
 8002728:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800272a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	4413      	add	r3, r2
 8002732:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8002736:	331c      	adds	r3, #28
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800273c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002740:	3301      	adds	r3, #1
 8002742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800274a:	2b03      	cmp	r3, #3
 800274c:	d9db      	bls.n	8002706 <SetMeasurementData+0xee>
	}

	return Status;
 800274e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 8002752:	4618      	mov	r0, r3
 8002754:	372c      	adds	r7, #44	@ 0x2c
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}

0800275a <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3318      	adds	r3, #24
 800276c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8002774:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8002776:	225c      	movs	r2, #92	@ 0x5c
 8002778:	21ff      	movs	r1, #255	@ 0xff
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f013 f8bc 	bl	80158f8 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	2102      	movs	r1, #2
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f001 fef2 	bl	800456e <VL53LX_get_device_results>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff40 	bl	8002618 <SetMeasurementData>
 8002798:	4603      	mov	r3, r0
 800279a:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 800279c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b090      	sub	sp, #64	@ 0x40
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 80027b6:	f240 3305 	movw	r3, #773	@ 0x305
 80027ba:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3318      	adds	r3, #24
 80027c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pc = &pdev->customer;
 80027c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c4:	3348      	adds	r3, #72	@ 0x48
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34

	DistanceMode = VL53LXDevDataGet(Dev,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027ce:	f893 34e0 	ldrb.w	r3, [r3, #1248]	@ 0x4e0
 80027d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			CurrentParameters.DistanceMode);

	if (Status == VL53LX_ERROR_NONE)
 80027d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <VL53LX_PerformRefSpadManagement+0x48>
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 80027de:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f8db 	bl	80029a0 <VL53LX_run_ref_spad_char>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 80027f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80027f4:	f113 0f1d 	cmn.w	r3, #29
 80027f8:	d14e      	bne.n	8002898 <VL53LX_PerformRefSpadManagement+0xf0>

		Status = VL53LX_read_nvm_raw_data(Dev,
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	2206      	movs	r2, #6
 8002800:	2128      	movs	r1, #40	@ 0x28
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f00c fcc7 	bl	800f196 <VL53LX_read_nvm_raw_data>
 8002808:	4603      	mov	r3, r0
 800280a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 800280e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <VL53LX_PerformRefSpadManagement+0x82>
			Status = VL53LX_WriteMulti(Dev,
 8002816:	f107 020c 	add.w	r2, r7, #12
 800281a:	2302      	movs	r3, #2
 800281c:	2114      	movs	r1, #20
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f00e fe26 	bl	8011470 <VL53LX_WriteMulti>
 8002824:	4603      	mov	r3, r0
 8002826:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 800282a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <VL53LX_PerformRefSpadManagement+0x96>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002832:	7b3a      	ldrb	r2, [r7, #12]
 8002834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002836:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002838:	7b7a      	ldrb	r2, [r7, #13]
 800283a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283c:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	3310      	adds	r3, #16
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c



		if (Status == VL53LX_ERROR_NONE)
 8002846:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <VL53LX_PerformRefSpadManagement+0xb8>
			Status = VL53LX_WriteMulti(Dev,
 800284e:	2306      	movs	r3, #6
 8002850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002852:	210d      	movs	r1, #13
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f00e fe0b 	bl	8011470 <VL53LX_WriteMulti>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002860:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002864:	2b00      	cmp	r3, #0
 8002866:	d117      	bne.n	8002898 <VL53LX_PerformRefSpadManagement+0xf0>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286e:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	785a      	ldrb	r2, [r3, #1]
 8002874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002876:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8002878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287a:	789a      	ldrb	r2, [r3, #2]
 800287c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287e:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002882:	78da      	ldrb	r2, [r3, #3]
 8002884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002886:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	791a      	ldrb	r2, [r3, #4]
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288e:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002892:	795a      	ldrb	r2, [r3, #5]
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	715a      	strb	r2, [r3, #5]
		}

	}


	VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff f9cb 	bl	8001c3a <VL53LX_SetDistanceMode>

	LOG_FUNCTION_END(Status);
	return Status;
 80028a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3740      	adds	r7, #64	@ 0x40
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d84a      	bhi.n	8002968 <VL53LX_SmudgeCorrectionEnable+0xb8>
 80028d2:	a201      	add	r2, pc, #4	@ (adr r2, 80028d8 <VL53LX_SmudgeCorrectionEnable+0x28>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	080028e9 	.word	0x080028e9
 80028dc:	08002909 	.word	0x08002909
 80028e0:	08002929 	.word	0x08002929
 80028e4:	08002949 	.word	0x08002949
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f003 fe46 	bl	800657a <VL53LX_dynamic_xtalk_correction_disable>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f003 fe58 	bl	80065a8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80028f8:	4603      	mov	r3, r0
 80028fa:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f003 fe81 	bl	8006604 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002902:	4603      	mov	r3, r0
 8002904:	733b      	strb	r3, [r7, #12]
		break;
 8002906:	e032      	b.n	800296e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f003 fe1f 	bl	800654c <VL53LX_dynamic_xtalk_correction_enable>
 800290e:	4603      	mov	r3, r0
 8002910:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f003 fe8d 	bl	8006632 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002918:	4603      	mov	r3, r0
 800291a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f003 fe71 	bl	8006604 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002922:	4603      	mov	r3, r0
 8002924:	733b      	strb	r3, [r7, #12]
		break;
 8002926:	e022      	b.n	800296e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f003 fe0f 	bl	800654c <VL53LX_dynamic_xtalk_correction_enable>
 800292e:	4603      	mov	r3, r0
 8002930:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f003 fe7d 	bl	8006632 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002938:	4603      	mov	r3, r0
 800293a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f003 fe4a 	bl	80065d6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002942:	4603      	mov	r3, r0
 8002944:	733b      	strb	r3, [r7, #12]
		break;
 8002946:	e012      	b.n	800296e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f003 fdff 	bl	800654c <VL53LX_dynamic_xtalk_correction_enable>
 800294e:	4603      	mov	r3, r0
 8002950:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f003 fe28 	bl	80065a8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002958:	4603      	mov	r3, r0
 800295a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f003 fe51 	bl	8006604 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002962:	4603      	mov	r3, r0
 8002964:	733b      	strb	r3, [r7, #12]
		break;
 8002966:	e002      	b.n	800296e <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002968:	23fc      	movs	r3, #252	@ 0xfc
 800296a:	73fb      	strb	r3, [r7, #15]
		break;
 800296c:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002976:	7bbb      	ldrb	r3, [r7, #14]
 8002978:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8002982:	7b7b      	ldrb	r3, [r7, #13]
 8002984:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 800298e:	7b3b      	ldrb	r3, [r7, #12]
 8002990:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop

080029a0 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b08c      	sub	sp, #48	@ 0x30
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3318      	adds	r3, #24
 80029b2:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80029ba:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80029bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d104      	bne.n	80029ce <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f005 fdd5 	bl	8008574 <VL53LX_enable_powerforce>
 80029ca:	4603      	mov	r3, r0
 80029cc:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 80029ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d117      	bne.n	8002a06 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	7858      	ldrb	r0, [r3, #1]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	685c      	ldr	r4, [r3, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	891d      	ldrh	r5, [r3, #8]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	899b      	ldrh	r3, [r3, #12]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	8952      	ldrh	r2, [r2, #10]
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f8b1 12de 	ldrh.w	r1, [r1, #734]	@ 0x2de
 80029f0:	9102      	str	r1, [sp, #8]
 80029f2:	9201      	str	r2, [sp, #4]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	462b      	mov	r3, r5
 80029f8:	4622      	mov	r2, r4
 80029fa:	4601      	mov	r1, r0
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f007 fca0 	bl	800a342 <VL53LX_set_ref_spad_char_config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002a06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f890 	bl	8002b3a <VL53LX_run_device_test>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d108      	bne.n	8002a38 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002a26:	f107 020c 	add.w	r2, r7, #12
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	21d9      	movs	r1, #217	@ 0xd9
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f00e fd54 	bl	80114dc <VL53LX_ReadMulti>
 8002a34:	4603      	mov	r3, r0
 8002a36:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <VL53LX_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002a40:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a48:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002a4c:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a54:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	}



	if (status == VL53LX_ERROR_NONE)
 8002a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <VL53LX_run_ref_spad_char+0xd2>
		status =
			VL53LX_WriteMulti(
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	2302      	movs	r3, #2
 8002a66:	2114      	movs	r1, #20
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f00e fd01 	bl	8011470 <VL53LX_WriteMulti>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <VL53LX_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002a7a:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002a82:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <VL53LX_run_ref_spad_char+0x104>
		status =
			VL53LX_ReadMulti(
 8002a92:	f107 020c 	add.w	r2, r7, #12
 8002a96:	2306      	movs	r3, #6
 8002a98:	21ac      	movs	r1, #172	@ 0xac
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f00e fd1e 	bl	80114dc <VL53LX_ReadMulti>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <VL53LX_run_ref_spad_char+0x11e>
		status =
			VL53LX_WriteMulti(
 8002aac:	f107 020c 	add.w	r2, r7, #12
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	210d      	movs	r1, #13
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f00e fcdb 	bl	8011470 <VL53LX_WriteMulti>
 8002aba:	4603      	mov	r3, r0
 8002abc:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d117      	bne.n	8002af6 <VL53LX_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002ac6:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002ace:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002ad6:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002ae6:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002aee:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d114      	bne.n	8002b28 <VL53LX_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d00c      	beq.n	8002b22 <VL53LX_run_ref_spad_char+0x182>
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	dc0d      	bgt.n	8002b28 <VL53LX_run_ref_spad_char+0x188>
 8002b0c:	2b0e      	cmp	r3, #14
 8002b0e:	d002      	beq.n	8002b16 <VL53LX_run_ref_spad_char+0x176>
 8002b10:	2b0f      	cmp	r3, #15
 8002b12:	d003      	beq.n	8002b1c <VL53LX_run_ref_spad_char+0x17c>
 8002b14:	e008      	b.n	8002b28 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002b16:	23e4      	movs	r3, #228	@ 0xe4
 8002b18:	77fb      	strb	r3, [r7, #31]
			break;
 8002b1a:	e005      	b.n	8002b28 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002b1c:	23e3      	movs	r3, #227	@ 0xe3
 8002b1e:	77fb      	strb	r3, [r7, #31]
			break;
 8002b20:	e002      	b.n	8002b28 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002b22:	23e2      	movs	r3, #226	@ 0xe2
 8002b24:	77fb      	strb	r3, [r7, #31]
			break;
 8002b26:	bf00      	nop
		}
	}



	*pcal_status = status;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	7ffa      	ldrb	r2, [r7, #31]
 8002b2c:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002b2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}

08002b3a <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002b5c:	f107 030b 	add.w	r3, r7, #11
 8002b60:	461a      	mov	r2, r3
 8002b62:	2130      	movs	r1, #48	@ 0x30
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f00e fd4b 	bl	8011600 <VL53LX_RdByte>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002b76:	7afa      	ldrb	r2, [r7, #11]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f005 fc76 	bl	800847c <VL53LX_start_test>
 8002b90:	4603      	mov	r3, r0
 8002b92:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f00e f826 	bl	8010bee <VL53LX_wait_for_test_completion>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002bae:	f107 020c 	add.w	r2, r7, #12
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	2189      	movs	r1, #137	@ 0x89
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f00e fc90 	bl	80114dc <VL53LX_ReadMulti>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002bc8:	7b3a      	ldrb	r2, [r7, #12]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002bd0:	7b7a      	ldrb	r2, [r7, #13]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	}



	pdev->sys_results.result__range_status &=
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f893 3367 	ldrb.w	r3, [r3, #871]	@ 0x367
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f883 2367 	strb.w	r2, [r3, #871]	@ 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 fcde 	bl	80085bc <VL53LX_clear_interrupt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f005 fc34 	bl	800847c <VL53LX_start_test>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b21      	cmp	r3, #33	@ 0x21
 8002c38:	d006      	beq.n	8002c48 <select_offset_per_vcsel+0x24>
 8002c3a:	2b21      	cmp	r3, #33	@ 0x21
 8002c3c:	dc2b      	bgt.n	8002c96 <select_offset_per_vcsel+0x72>
 8002c3e:	2b1b      	cmp	r3, #27
 8002c40:	d01c      	beq.n	8002c7c <select_offset_per_vcsel+0x58>
 8002c42:	2b1e      	cmp	r3, #30
 8002c44:	d00d      	beq.n	8002c62 <select_offset_per_vcsel+0x3e>
 8002c46:	e026      	b.n	8002c96 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c4e:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	@ 0xc00
 8002c52:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5a:	f8b3 3c02 	ldrh.w	r3, [r3, #3074]	@ 0xc02
 8002c5e:	817b      	strh	r3, [r7, #10]
		break;
 8002c60:	e02b      	b.n	8002cba <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c68:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	@ 0xc04
 8002c6c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c74:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	@ 0xc06
 8002c78:	817b      	strh	r3, [r7, #10]
		break;
 8002c7a:	e01e      	b.n	8002cba <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c82:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8002c86:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c8e:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8002c92:	817b      	strh	r3, [r7, #10]
		break;
 8002c94:	e011      	b.n	8002cba <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8002ca0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca8:	f8b3 3c0a 	ldrh.w	r3, [r3, #3082]	@ 0xc0a
 8002cac:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002cae:	23fc      	movs	r3, #252	@ 0xfc
 8002cb0:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	801a      	strh	r2, [r3, #0]
		break;
 8002cb8:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002cc0:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <select_offset_per_vcsel+0xb6>
 8002cd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cd8:	e001      	b.n	8002cde <select_offset_per_vcsel+0xba>
 8002cda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	8013      	strh	r3, [r2, #0]

	return status;
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002cf2:	b490      	push	{r4, r7}
 8002cf4:	b08a      	sub	sp, #40	@ 0x28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	460b      	mov	r3, r1
 8002d02:	71fb      	strb	r3, [r7, #7]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d24:	e021      	b.n	8002d6a <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8002d26:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	461a      	mov	r2, r3
 8002d32:	0052      	lsls	r2, r2, #1
 8002d34:	441a      	add	r2, r3
 8002d36:	00d3      	lsls	r3, r2, #3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	4423      	add	r3, r4
 8002d46:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002d4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	4413      	add	r3, r2
 8002d52:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8002d54:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3206      	adds	r2, #6
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8002d64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d66:	3301      	adds	r3, #1
 8002d68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3d8      	bcc.n	8002d26 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d047      	beq.n	8002e0a <vl53lx_diff_histo_stddev+0x118>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d044      	beq.n	8002e0a <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d88:	e03a      	b.n	8002e00 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8002d8a:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	461a      	mov	r2, r3
 8002d96:	0052      	lsls	r2, r2, #1
 8002d98:	441a      	add	r2, r3
 8002d9a:	00d3      	lsls	r3, r2, #3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	4423      	add	r3, r4
 8002daa:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002dae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002db2:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dba:	fb03 f202 	mul.w	r2, r3, r2
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dc4:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8002dc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3206      	adds	r2, #6
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dd4:	fb03 f202 	mul.w	r2, r3, r2
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8002dea:	69b8      	ldr	r0, [r7, #24]
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	441a      	add	r2, r3
 8002df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df8:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8002dfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002e00:	79bb      	ldrb	r3, [r7, #6]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3bf      	bcc.n	8002d8a <vl53lx_diff_histo_stddev+0x98>
	}
}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	@ 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc90      	pop	{r4, r7}
 8002e12:	4770      	bx	lr

08002e14 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b08c      	sub	sp, #48	@ 0x30
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3318      	adds	r3, #24
 8002e22:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8002e44:	2318      	movs	r3, #24
 8002e46:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f248 018f 	movw	r1, #32911	@ 0x808f
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f002 fc86 	bl	8005764 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f248 018e 	movw	r1, #32910	@ 0x808e
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f002 fc7e 	bl	8005764 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6e:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 811a 	bne.w	80030ac <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8002e92:	7efb      	ldrb	r3, [r7, #27]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	7eba      	ldrb	r2, [r7, #26]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb2:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebc:	e004      	b.n	8002ec8 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8002ec8:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002ecc:	7efb      	ldrb	r3, [r7, #27]
 8002ece:	69f8      	ldr	r0, [r7, #28]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	0052      	lsls	r2, r2, #1
 8002ed4:	441a      	add	r2, r3
 8002ed6:	0153      	lsls	r3, r2, #5
 8002ed8:	461a      	mov	r2, r3
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4403      	add	r3, r0
 8002ee6:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dd0c      	ble.n	8002f0a <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8002ef0:	7e79      	ldrb	r1, [r7, #25]
 8002ef2:	7efa      	ldrb	r2, [r7, #27]
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	460b      	mov	r3, r1
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	69f8      	ldr	r0, [r7, #28]
 8002f06:	f7ff fef4 	bl	8002cf2 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	db23      	blt.n	8002f5a <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8002f18:	3310      	adds	r3, #16
 8002f1a:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f012 fce9 	bl	80158f8 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

			recom_been_reset = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 8002f38:	7efb      	ldrb	r3, [r7, #27]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f44:	2206      	movs	r2, #6
 8002f46:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002f4a:	e034      	b.n	8002fb6 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f52:	2207      	movs	r2, #7
 8002f54:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
 8002f58:	e02d      	b.n	8002fb6 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f60:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002f64:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002f6c:	e01e      	b.n	8002fac <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002f6e:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8002f72:	7e39      	ldrb	r1, [r7, #24]
 8002f74:	7efb      	ldrb	r3, [r7, #27]
 8002f76:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	3006      	adds	r0, #6
 8002f7e:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8002f82:	69f8      	ldr	r0, [r7, #28]
 8002f84:	461a      	mov	r2, r3
 8002f86:	0052      	lsls	r2, r2, #1
 8002f88:	441a      	add	r2, r3
 8002f8a:	00d3      	lsls	r3, r2, #3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	460b      	mov	r3, r1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	440b      	add	r3, r1
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4413      	add	r3, r2
 8002f98:	442b      	add	r3, r5
 8002f9a:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8002f9e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8002fa2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002fac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002fb0:	7ebb      	ldrb	r3, [r7, #26]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3db      	bcc.n	8002f6e <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbc:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d109      	bne.n	8002fde <vl53lx_histo_merge+0x1ca>
 8002fca:	7efb      	ldrb	r3, [r7, #27]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
 8002fdc:	e00e      	b.n	8002ffc <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8002fde:	7efb      	ldrb	r3, [r7, #27]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10b      	bne.n	8002ffc <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fea:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	@ 0xc0c
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff8:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <vl53lx_histo_merge+0x1f6>
 8003004:	7efb      	ldrb	r3, [r7, #27]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d069      	beq.n	80030de <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003010:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d162      	bne.n	80030de <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8003018:	2300      	movs	r3, #0
 800301a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800301c:	e008      	b.n	8003030 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 800301e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3206      	adds	r2, #6
 8003024:	2100      	movs	r1, #0
 8003026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 800302a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800302c:	3301      	adds	r3, #1
 800302e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003030:	7ebb      	ldrb	r3, [r7, #26]
 8003032:	b29b      	uxth	r3, r3
 8003034:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003036:	429a      	cmp	r2, r3
 8003038:	d3f1      	bcc.n	800301e <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 800303a:	2300      	movs	r3, #0
 800303c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800303e:	e02f      	b.n	80030a0 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003046:	e023      	b.n	8003090 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8003048:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	3206      	adds	r2, #6
 800304e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003052:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003056:	7efb      	ldrb	r3, [r7, #27]
 8003058:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 800305a:	69fc      	ldr	r4, [r7, #28]
 800305c:	461a      	mov	r2, r3
 800305e:	0052      	lsls	r2, r2, #1
 8003060:	441a      	add	r2, r3
 8003062:	00d3      	lsls	r3, r2, #3
 8003064:	461a      	mov	r2, r3
 8003066:	460b      	mov	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	440b      	add	r3, r1
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	4413      	add	r3, r2
 8003070:	442b      	add	r3, r5
 8003072:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 8003076:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 800307a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800307c:	18c1      	adds	r1, r0, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	3206      	adds	r2, #6
 8003082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003086:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800308a:	3301      	adds	r3, #1
 800308c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003090:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	429a      	cmp	r2, r3
 8003098:	dbd6      	blt.n	8003048 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 800309a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800309c:	3301      	adds	r3, #1
 800309e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80030a0:	7ebb      	ldrb	r3, [r7, #26]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d3ca      	bcc.n	8003040 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80030aa:	e018      	b.n	80030de <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030b2:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c0:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
		if (pdev->pos_before_next_recom == 255)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ca:	f893 3c0d 	ldrb.w	r3, [r3, #3085]	@ 0xc0d
 80030ce:	2bff      	cmp	r3, #255	@ 0xff
 80030d0:	d105      	bne.n	80030de <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	@ 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030e8 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0c6      	sub	sp, #280	@ 0x118
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80030f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030f6:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003104:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 800310c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003110:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003114:	2200      	movs	r2, #0
 8003116:	2185      	movs	r1, #133	@ 0x85
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	f00e fa15 	bl	8011548 <VL53LX_WrByte>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003124:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 800312c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003130:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	f005 fa1d 	bl	8008574 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 800313a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800313e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003142:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003146:	f248 018c 	movw	r1, #32908	@ 0x808c
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	f002 fb0a 	bl	8005764 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003154:	2b03      	cmp	r3, #3
 8003156:	d81b      	bhi.n	8003190 <VL53LX_load_patch+0xa8>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <VL53LX_load_patch+0x78>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003171 	.word	0x08003171
 8003164:	08003179 	.word	0x08003179
 8003168:	08003181 	.word	0x08003181
 800316c:	08003189 	.word	0x08003189
	case 0:
		patch_power = 0x00;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8003176:	e00e      	b.n	8003196 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8003178:	2310      	movs	r3, #16
 800317a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800317e:	e00a      	b.n	8003196 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8003180:	2320      	movs	r3, #32
 8003182:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8003186:	e006      	b.n	8003196 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8003188:	2340      	movs	r3, #64	@ 0x40
 800318a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800318e:	e002      	b.n	8003196 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8003196:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800319a:	2b00      	cmp	r3, #0
 800319c:	d134      	bne.n	8003208 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 800319e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031a6:	2229      	movs	r2, #41	@ 0x29
 80031a8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80031aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031b2:	22c9      	movs	r2, #201	@ 0xc9
 80031b4:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80031b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031be:	220e      	movs	r2, #14
 80031c0:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80031c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031ca:	2240      	movs	r2, #64	@ 0x40
 80031cc:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80031ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031d6:	2228      	movs	r2, #40	@ 0x28
 80031d8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80031da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031e8:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 80031ea:	f107 020c 	add.w	r2, r7, #12
 80031ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80031f2:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80031f6:	2306      	movs	r3, #6
 80031f8:	f240 4176 	movw	r1, #1142	@ 0x476
 80031fc:	6800      	ldr	r0, [r0, #0]
 80031fe:	f00e f937 	bl	8011470 <VL53LX_WriteMulti>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003208:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800320c:	2b00      	cmp	r3, #0
 800320e:	d132      	bne.n	8003276 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8003210:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003218:	2203      	movs	r2, #3
 800321a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800321c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003220:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003224:	226d      	movs	r2, #109	@ 0x6d
 8003226:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003228:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800322c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003230:	2203      	movs	r2, #3
 8003232:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003234:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003238:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800323c:	226f      	movs	r2, #111	@ 0x6f
 800323e:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003240:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003244:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003248:	2207      	movs	r2, #7
 800324a:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800324c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003250:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003254:	2229      	movs	r2, #41	@ 0x29
 8003256:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003258:	f107 020c 	add.w	r2, r7, #12
 800325c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003260:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8003264:	2306      	movs	r3, #6
 8003266:	f240 4196 	movw	r1, #1174	@ 0x496
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	f00e f900 	bl	8011470 <VL53LX_WriteMulti>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003276:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11a      	bne.n	80032b4 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 800327e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003282:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800328a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800328e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003292:	2207      	movs	r2, #7
 8003294:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003296:	f107 020c 	add.w	r2, r7, #12
 800329a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800329e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80032a2:	2302      	movs	r3, #2
 80032a4:	f240 4172 	movw	r1, #1138	@ 0x472
 80032a8:	6800      	ldr	r0, [r0, #0]
 80032aa:	f00e f8e1 	bl	8011470 <VL53LX_WriteMulti>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80032b4:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11a      	bne.n	80032f2 <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80032bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80032c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032d0:	2207      	movs	r2, #7
 80032d2:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80032d4:	f107 020c 	add.w	r2, r7, #12
 80032d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032dc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80032e0:	2302      	movs	r3, #2
 80032e2:	f240 4174 	movw	r1, #1140	@ 0x474
 80032e6:	6800      	ldr	r0, [r0, #0]
 80032e8:	f00e f8c2 	bl	8011470 <VL53LX_WriteMulti>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 80032f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 80032fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003302:	2201      	movs	r2, #1
 8003304:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f00e f91d 	bl	8011548 <VL53LX_WrByte>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003314:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 800331c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003320:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003324:	2201      	movs	r2, #1
 8003326:	2185      	movs	r1, #133	@ 0x85
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f00e f90d 	bl	8011548 <VL53LX_WrByte>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003334:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8003338:	4618      	mov	r0, r3
 800333a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b08a      	sub	sp, #40	@ 0x28
 8003348:	af04      	add	r7, sp, #16
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3318      	adds	r3, #24
 8003358:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003360:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8003366:	2162      	movs	r1, #98	@ 0x62
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f004 f9bd 	bl	80076e8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2204      	movs	r2, #4
 8003372:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2205      	movs	r2, #5
 800337e:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
	pres->zone_results.active_zones    = 0;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800338a:	2300      	movs	r3, #0
 800338c:	75bb      	strb	r3, [r7, #22]
 800338e:	e01b      	b.n	80033c8 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003390:	7dba      	ldrb	r2, [r7, #22]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4413      	add	r3, r2
 80033a2:	3308      	adds	r3, #8
 80033a4:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80033c2:	7dbb      	ldrb	r3, [r7, #22]
 80033c4:	3301      	adds	r3, #1
 80033c6:	75bb      	strb	r3, [r7, #22]
 80033c8:	7dbb      	ldrb	r3, [r7, #22]
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d9e0      	bls.n	8003390 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2205      	movs	r2, #5
 80033d2:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	pres->zone_hists.active_zones      = 0;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2205      	movs	r2, #5
 80033e2:	f883 238f 	strb.w	r2, [r3, #911]	@ 0x38f
	pres->zone_cal.active_zones        = 0;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80033ee:	2300      	movs	r3, #0
 80033f0:	75bb      	strb	r3, [r7, #22]
 80033f2:	e039      	b.n	8003468 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 80033f4:	7dba      	ldrb	r2, [r7, #22]
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 800340a:	7dba      	ldrb	r2, [r7, #22]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003420:	7dba      	ldrb	r2, [r7, #22]
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003436:	7dba      	ldrb	r2, [r7, #22]
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 800344c:	7dba      	ldrb	r2, [r7, #22]
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003462:	7dbb      	ldrb	r3, [r7, #22]
 8003464:	3301      	adds	r3, #1
 8003466:	75bb      	strb	r3, [r7, #22]
 8003468:	7dbb      	ldrb	r3, [r7, #22]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d9c2      	bls.n	80033f4 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	221e      	movs	r2, #30
 8003478:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2200      	movs	r2, #0
 800347e:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2200      	movs	r2, #0
 8003484:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2201      	movs	r2, #1
 800348a:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2201      	movs	r2, #1
 8003490:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2201      	movs	r2, #1
 8003496:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800349e:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80034a6:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80034ae:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2264      	movs	r2, #100	@ 0x64
 80034b4:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80034bc:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034cc:	2203      	movs	r2, #3
 80034ce:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pdev->offset_results.active_results = 0;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3



	pdev->gain_cal.standard_ranging_gain_factor =
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f240 72db 	movw	r2, #2011	@ 0x7db
 80034e4:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 80034ee:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f004 f8dc 	bl	80076b0 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 80034fe:	3310      	adds	r3, #16
 8003500:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f012 f9f6 	bl	80158f8 <memset>
	pdev->bin_rec_pos = 0;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
	pdev->pos_before_next_recom = 0;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <VL53LX_data_init+0x1f8>
 800352a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8b7 	bl	80036a6 <VL53LX_read_p2p_data>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800353c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800354a:	4618      	mov	r0, r3
 800354c:	f003 f888 	bl	8006660 <VL53LX_init_refspadchar_config_struct>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8003554:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003562:	4618      	mov	r0, r3
 8003564:	f003 f8a0 	bl	80066a8 <VL53LX_init_ssc_config_struct>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 800356c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f003 f8b1 	bl	80066ea <VL53LX_init_xtalk_config_struct>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 800358c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800359a:	4618      	mov	r0, r3
 800359c:	f003 f918 	bl	80067d0 <VL53LX_init_xtalk_extract_config_struct>
 80035a0:	4603      	mov	r3, r0
 80035a2:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 f93b 	bl	800682e <VL53LX_init_offset_cal_config_struct>
 80035b8:	4603      	mov	r3, r0
 80035ba:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 f956 	bl	800687c <VL53LX_init_zone_cal_config_struct>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80035d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f003 f96a 	bl	80068c4 <VL53LX_init_hist_post_process_config_struct>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 80035f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fb69 	bl	8006cda <VL53LX_init_hist_gen3_dmax_config_struct>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800360c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	33f8      	adds	r3, #248	@ 0xf8
 8003618:	4618      	mov	r0, r3
 800361a:	f003 f9c2 	bl	80069a2 <VL53LX_init_tuning_parm_storage_struct>
 800361e:	4603      	mov	r3, r0
 8003620:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8003622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	7858      	ldrb	r0, [r3, #1]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	8b1c      	ldrh	r4, [r3, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	689d      	ldr	r5, [r3, #8]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	6912      	ldr	r2, [r2, #16]
 800363e:	6939      	ldr	r1, [r7, #16]
 8003640:	6949      	ldr	r1, [r1, #20]
 8003642:	9102      	str	r1, [sp, #8]
 8003644:	9201      	str	r2, [sp, #4]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	462b      	mov	r3, r5
 800364a:	4622      	mov	r2, r4
 800364c:	4601      	mov	r1, r0
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fb3c 	bl	8003ccc <VL53LX_set_preset_mode>
 8003654:	4603      	mov	r3, r0
 8003656:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800365e:	461a      	mov	r2, r3
 8003660:	2118      	movs	r1, #24
 8003662:	2000      	movs	r0, #0
 8003664:	f008 fba1 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800366e:	461a      	mov	r2, r3
 8003670:	2118      	movs	r1, #24
 8003672:	2000      	movs	r0, #0
 8003674:	f008 fb99 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f203 531c 	addw	r3, r3, #1308	@ 0x51c
 800367e:	461a      	mov	r2, r3
 8003680:	210c      	movs	r1, #12
 8003682:	2000      	movs	r0, #0
 8003684:	f004 fd9b 	bl	80081be <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f007 fdbf 	bl	800b20c <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f007 fcc6 	bl	800b020 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f007 fde4 	bl	800b262 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800369a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bdb0      	pop	{r4, r5, r7, pc}

080036a6 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80036a6:	b590      	push	{r4, r7, lr}
 80036a8:	b091      	sub	sp, #68	@ 0x44
 80036aa:	af04      	add	r7, sp, #16
 80036ac:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3318      	adds	r3, #24
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80036c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c4:	3348      	adds	r3, #72	@ 0x48
 80036c6:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80036c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ca:	339c      	adds	r3, #156	@ 0x9c
 80036cc:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80036ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f00b fed6 	bl	800f490 <VL53LX_get_static_nvm_managed>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 80036ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	3348      	adds	r3, #72	@ 0x48
 80036f6:	4619      	mov	r1, r3
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f00c f807 	bl	800f70c <VL53LX_get_customer_nvm_managed>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003704:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003708:	2b00      	cmp	r3, #0
 800370a:	d117      	bne.n	800373c <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	f203 3392 	addw	r3, r3, #914	@ 0x392
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f00c fedc 	bl	80104d2 <VL53LX_get_nvm_copy_data>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003720:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8003728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372a:	f203 3292 	addw	r2, r3, #914	@ 0x392
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f004 facc 	bl	8007cd4 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 800373c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10e      	bne.n	8003762 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	895b      	ldrh	r3, [r3, #10]
 8003748:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8003762:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	33c0      	adds	r3, #192	@ 0xc0
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f00b fd41 	bl	800f1f8 <VL53LX_read_nvm_optical_centre>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 800377c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	3360      	adds	r3, #96	@ 0x60
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f00b fd57 	bl	800f23e <VL53LX_read_nvm_cal_peak_rate_map>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003796:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800379a:	2b00      	cmp	r3, #0
 800379c:	d12d      	bne.n	80037fa <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	339c      	adds	r3, #156	@ 0x9c
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f00b fd70 	bl	800f28a <VL53LX_read_nvm_additional_offset_cal_data>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	889b      	ldrh	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d120      	bne.n	80037fa <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11c      	bne.n	80037fa <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2280      	movs	r2, #128	@ 0x80
 80037c4:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80037cc:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	f893 03c2 	ldrb.w	r0, [r3, #962]	@ 0x3c2
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	f893 43c3 	ldrb.w	r4, [r3, #963]	@ 0x3c3
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	69f9      	ldr	r1, [r7, #28]
 80037e4:	3102      	adds	r1, #2
 80037e6:	9103      	str	r1, [sp, #12]
 80037e8:	9202      	str	r2, [sp, #8]
 80037ea:	2238      	movs	r2, #56	@ 0x38
 80037ec:	9201      	str	r2, [sp, #4]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	23ff      	movs	r3, #255	@ 0xff
 80037f2:	22c7      	movs	r2, #199	@ 0xc7
 80037f4:	4621      	mov	r1, r4
 80037f6:	f006 fa9e 	bl	8009d36 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 80037fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d12f      	bne.n	8003862 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	461a      	mov	r2, r3
 8003808:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f00b fd5f 	bl	800f2d0 <VL53LX_read_nvm_fmt_range_results_data>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8003818:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800381c:	2b00      	cmp	r3, #0
 800381e:	d120      	bne.n	8003862 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003820:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8003828:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003830:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8003838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 800384e:	e003      	b.n	8003858 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	2214      	movs	r2, #20
 8003854:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800385e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8003862:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8003870:	3304      	adds	r3, #4
 8003872:	461a      	mov	r2, r3
 8003874:	21de      	movs	r1, #222	@ 0xde
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f00d fef6 	bl	8011668 <VL53LX_RdWord>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388c:	d204      	bcs.n	8003898 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8003894:	f8a3 22de 	strh.w	r2, [r3, #734]	@ 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003898:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	33bc      	adds	r3, #188	@ 0xbc
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f918 	bl	8003adc <VL53LX_get_mode_mitigation_roi>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80038b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d114      	bne.n	80038e6 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80038c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80038e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3734      	adds	r7, #52	@ 0x34
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd90      	pop	{r4, r7, pc}

080038f2 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3318      	adds	r3, #24
 8003904:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800390c:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003914:	23f1      	movs	r3, #241	@ 0xf1
 8003916:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10e      	bne.n	800393e <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800392c:	f8b3 3364 	ldrh.w	r3, [r3, #868]	@ 0x364
 8003930:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af02      	add	r7, sp, #8
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3318      	adds	r3, #24
 8003964:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003970:	23f1      	movs	r3, #241	@ 0xf1
 8003972:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003974:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d11b      	bne.n	80039b4 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f8b3 12de 	ldrh.w	r1, [r3, #734]	@ 0x2de
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 80039a0:	9201      	str	r2, [sp, #4]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	460b      	mov	r3, r1
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	f004 ffa9 	bl	8008902 <VL53LX_calc_timeout_register_values>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80039b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3318      	adds	r3, #24
 80039d6:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f8b3 32de 	ldrh.w	r3, [r3, #734]	@ 0x2de
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80039ea:	23f1      	movs	r3, #241	@ 0xf1
 80039ec:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 80039ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d148      	bne.n	8003a88 <VL53LX_get_timeouts_us+0xc8>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f8b3 22de 	ldrh.w	r2, [r3, #734]	@ 0x2de
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f004 fdf6 	bl	80085f6 <VL53LX_calc_macro_period_us>
 8003a0a:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
			VL53LX_calc_timeout_us(
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 feb4 	bl	8008782 <VL53LX_calc_timeout_us>
 8003a1a:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
		timeout_encoded =
 8003a26:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003a28:	8a7b      	ldrh	r3, [r7, #18]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	f892 2335 	ldrb.w	r2, [r2, #821]	@ 0x335
		timeout_encoded = (timeout_encoded << 8) +
 8003a34:	4413      	add	r3, r2
 8003a36:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003a38:	8a7b      	ldrh	r3, [r7, #18]
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f004 ff07 	bl	8008850 <VL53LX_calc_decoded_timeout_us>
 8003a42:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
		timeout_encoded =
 8003a4e:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003a50:	8a7b      	ldrh	r3, [r7, #18]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	f892 2339 	ldrb.w	r2, [r2, #825]	@ 0x339
		timeout_encoded = (timeout_encoded << 8) +
 8003a5c:	4413      	add	r3, r2
 8003a5e:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003a60:	8a7b      	ldrh	r3, [r7, #18]
 8003a62:	6979      	ldr	r1, [r7, #20]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 fef3 	bl	8008850 <VL53LX_calc_decoded_timeout_us>
 8003a6a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	7858      	ldrb	r0, [r3, #1]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	7819      	ldrb	r1, [r3, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f203 335b 	addw	r3, r3, #859	@ 0x35b
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f005 ffbc 	bl	8009a34 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	7898      	ldrb	r0, [r3, #2]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	78d9      	ldrb	r1, [r3, #3]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003aca:	461a      	mov	r2, r3
 8003acc:	f005 fff1 	bl	8009ab2 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3318      	adds	r3, #24
 8003aee:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 8003b02:	f107 020e 	add.w	r2, r7, #14
 8003b06:	f107 010d 	add.w	r1, r7, #13
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 f9f6 	bl	800befc <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003b10:	7bba      	ldrb	r2, [r7, #14]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003b16:	7b7a      	ldrb	r2, [r7, #13]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f893 33c3 	ldrb.w	r3, [r3, #963]	@ 0x3c3
 8003b22:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	e008      	b.n	8003b6a <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	3301      	adds	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3f1      	bcc.n	8003b58 <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3318      	adds	r3, #24
 8003b96:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f103 00de 	add.w	r0, r3, #222	@ 0xde
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	331c      	adds	r3, #28
 8003ba2:	2214      	movs	r2, #20
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f011 ff3a 	bl	8015a1e <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	785a      	ldrb	r2, [r3, #1]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	33c2      	adds	r3, #194	@ 0xc2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ffbf 	bl	8003b46 <VL53LX_init_zone_config_histogram_bins>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d104      	bne.n	8003bde <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003bdc:	e00f      	b.n	8003bfe <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d807      	bhi.n	8003bf6 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
 8003bf4:	e003      	b.n	8003bfe <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2206      	movs	r2, #6
 8003bfa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b087      	sub	sp, #28
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	460b      	mov	r3, r1
 8003c18:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3318      	adds	r3, #24
 8003c22:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	2b21      	cmp	r3, #33	@ 0x21
 8003c28:	d030      	beq.n	8003c8c <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003c2a:	2b21      	cmp	r3, #33	@ 0x21
 8003c2c:	dc43      	bgt.n	8003cb6 <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003c2e:	2b1b      	cmp	r3, #27
 8003c30:	d002      	beq.n	8003c38 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003c32:	2b1e      	cmp	r3, #30
 8003c34:	d015      	beq.n	8003c62 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003c36:	e03e      	b.n	8003cb6 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
		*pphasecal_config_timeout_us =
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	601a      	str	r2, [r3, #0]

	break;
 8003c60:	e02c      	b.n	8003cbc <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
		*pphasecal_config_timeout_us =
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	601a      	str	r2, [r3, #0]
	break;
 8003c8a:	e017      	b.n	8003cbc <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
		*pdss_config__target_total_rate_mcps =
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
		*pphasecal_config_timeout_us =
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
		*pmm_config_timeout_us =
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
		*prange_config_timeout_us =
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	601a      	str	r2, [r3, #0]
	break;
 8003cb4:	e002      	b.n	8003cbc <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003cb6:	23fc      	movs	r3, #252	@ 0xfc
 8003cb8:	75fb      	strb	r3, [r7, #23]
		break;
 8003cba:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b096      	sub	sp, #88	@ 0x58
 8003cd0:	af06      	add	r7, sp, #24
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	72fb      	strb	r3, [r7, #11]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003cf8:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfc:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003d18:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003d20:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d24:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003d28:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	33c2      	adds	r3, #194	@ 0xc2
 8003d2e:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	33f8      	adds	r3, #248	@ 0xf8
 8003d34:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	7afa      	ldrb	r2, [r7, #11]
 8003d3a:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d40:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d46:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d4c:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8003d4e:	2103      	movs	r1, #3
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f003 fcc9 	bl	80076e8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	2b21      	cmp	r3, #33	@ 0x21
 8003d5a:	d02e      	beq.n	8003dba <VL53LX_set_preset_mode+0xee>
 8003d5c:	2b21      	cmp	r3, #33	@ 0x21
 8003d5e:	dc40      	bgt.n	8003de2 <VL53LX_set_preset_mode+0x116>
 8003d60:	2b1b      	cmp	r3, #27
 8003d62:	d002      	beq.n	8003d6a <VL53LX_set_preset_mode+0x9e>
 8003d64:	2b1e      	cmp	r3, #30
 8003d66:	d014      	beq.n	8003d92 <VL53LX_set_preset_mode+0xc6>
 8003d68:	e03b      	b.n	8003de2 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	9304      	str	r3, [sp, #16]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	9303      	str	r3, [sp, #12]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d86:	f003 f9ec 	bl	8007162 <VL53LX_preset_mode_histogram_long_range>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003d90:	e02b      	b.n	8003dea <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dae:	f003 fa76 	bl	800729e <VL53LX_preset_mode_histogram_medium_range>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003db8:	e017      	b.n	8003dea <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	9303      	str	r3, [sp, #12]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	9302      	str	r3, [sp, #8]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dd6:	f003 fb00 	bl	80073da <VL53LX_preset_mode_histogram_short_range>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8003de0:	e003      	b.n	8003dea <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003de2:	23fc      	movs	r3, #252	@ 0xfc
 8003de4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 8003de8:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8003dea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	893a      	ldrh	r2, [r7, #8]
 8003df6:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	893a      	ldrh	r2, [r7, #8]
 8003dfc:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8003dfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8003e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fd9e 	bl	800394e <VL53LX_set_timeouts_us>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8003e18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8003e20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff fd65 	bl	80038f2 <VL53LX_set_inter_measurement_period_ms>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8003e34:	3301      	adds	r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f004 f867 	bl	8007f14 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8003e46:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3740      	adds	r7, #64	@ 0x40
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b0d2      	sub	sp, #328	@ 0x148
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e62:	6018      	str	r0, [r3, #0]
 8003e64:	4608      	mov	r0, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e6c:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003e70:	4602      	mov	r2, r0
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e78:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003e7c:	460a      	mov	r2, r1
 8003e7e:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003e86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e8a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3318      	adds	r3, #24
 8003e92:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8003e96:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003ea4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003ea8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003eac:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8003eb0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003eb4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003eb8:	3348      	adds	r3, #72	@ 0x48
 8003eba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003ebe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ec2:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8003ec6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003eca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ece:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8003ed2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003ed6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003eda:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003ede:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003ee2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ee6:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003eea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003eee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ef2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003ef6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003efe:	332c      	adds	r3, #44	@ 0x2c
 8003f00:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003f04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f08:	3348      	adds	r3, #72	@ 0x48
 8003f0a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003f0e:	f107 030c 	add.w	r3, r7, #12
 8003f12:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8003f2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f32:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003f36:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003f3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003f4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f50:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8003f54:	f993 3000 	ldrsb.w	r3, [r3]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003f5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003f62:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8003f64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f68:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8003f6c:	3336      	adds	r3, #54	@ 0x36
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8003f74:	4413      	add	r3, r2
 8003f76:	1d9a      	adds	r2, r3, #6
 8003f78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f7c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f80:	4611      	mov	r1, r2
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	f7ff fd86 	bl	8003a94 <VL53LX_set_user_zone>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8003f8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f92:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d019      	beq.n	8003fce <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8003f9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003f9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003fa2:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003fb0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003fb4:	4413      	add	r3, r2
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003fbc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	f001 fb66 	bl	8005694 <VL53LX_set_zone_dss_config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003fce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fd2:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003fea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fee:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	@ 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003ff2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ff6:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003ffa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004002:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8004006:	2bff      	cmp	r3, #255	@ 0xff
 8004008:	d106      	bne.n	8004018 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800400a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800400e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004012:	2200      	movs	r2, #0
 8004014:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004018:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800401c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004020:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d139      	bne.n	800409c <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004028:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800402c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004030:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004034:	2b00      	cmp	r3, #0
 8004036:	d131      	bne.n	800409c <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004038:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800403c:	f893 2320 	ldrb.w	r2, [r3, #800]	@ 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8004040:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004048:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800404c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004056:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800405a:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
 800405e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8004066:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800406a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
			pN->algo__part_to_part_range_offset_mm =
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	b21a      	sxth	r2, r3
 8004072:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004076:	825a      	strh	r2, [r3, #18]
 8004078:	e003      	b.n	8004082 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 800407a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800407e:	2200      	movs	r2, #0
 8004080:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004082:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004086:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d805      	bhi.n	800409c <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004090:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004094:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004098:	2205      	movs	r2, #5
 800409a:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800409c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a4:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d117      	bne.n	80040dc <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80040ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b4:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10f      	bne.n	80040dc <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80040bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c4:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
		pdev->gen_cfg.system__interrupt_config_gpio =
 80040c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 80040d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040d4:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80040d8:	2206      	movs	r2, #6
 80040da:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 80040dc:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 80040e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040e8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f005 ff8c 	bl	800a00a <VL53LX_save_cfg_data>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 80040f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040fc:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	2b05      	cmp	r3, #5
 8004106:	d827      	bhi.n	8004158 <VL53LX_init_and_start_range+0x304>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <VL53LX_init_and_start_range+0x2bc>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004151 	.word	0x08004151
 8004114:	08004149 	.word	0x08004149
 8004118:	08004141 	.word	0x08004141
 800411c:	08004139 	.word	0x08004139
 8004120:	08004131 	.word	0x08004131
 8004124:	08004129 	.word	0x08004129
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004128:	2301      	movs	r3, #1
 800412a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800412e:	e017      	b.n	8004160 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004130:	230d      	movs	r3, #13
 8004132:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004136:	e013      	b.n	8004160 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004138:	2324      	movs	r3, #36	@ 0x24
 800413a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800413e:	e00f      	b.n	8004160 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004140:	2344      	movs	r3, #68	@ 0x44
 8004142:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004146:	e00b      	b.n	8004160 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004148:	235a      	movs	r3, #90	@ 0x5a
 800414a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800414e:	e007      	b.n	8004160 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004150:	2371      	movs	r3, #113	@ 0x71
 8004152:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8004156:	e003      	b.n	8004160 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004158:	2383      	movs	r3, #131	@ 0x83
 800415a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800415e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004160:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004164:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8004168:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 800416c:	f107 030c 	add.w	r3, r7, #12
 8004170:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004174:	2300      	movs	r3, #0
 8004176:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 800417a:	e00b      	b.n	8004194 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 800417c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800418a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800418e:	3301      	adds	r3, #1
 8004190:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004194:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8004198:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800419c:	429a      	cmp	r2, r3
 800419e:	d3ed      	bcc.n	800417c <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80041a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041a4:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d917      	bls.n	80041de <VL53LX_init_and_start_range+0x38a>
 80041ae:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d113      	bne.n	80041de <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041b6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80041ba:	f1c3 0301 	rsb	r3, r3, #1
 80041be:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80041c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80041c6:	f107 020c 	add.w	r2, r7, #12
 80041ca:	4413      	add	r3, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	210b      	movs	r1, #11
 80041d0:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80041d4:	f00b f8a7 	bl	800f326 <VL53LX_i2c_encode_static_nvm_managed>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80041de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041e2:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d917      	bls.n	800421c <VL53LX_init_and_start_range+0x3c8>
 80041ec:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80041f4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80041f8:	f1c3 030d 	rsb	r3, r3, #13
 80041fc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004200:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004204:	f107 020c 	add.w	r2, r7, #12
 8004208:	4413      	add	r3, r2
 800420a:	461a      	mov	r2, r3
 800420c:	2117      	movs	r1, #23
 800420e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8004212:	f00b f964 	bl	800f4de <VL53LX_i2c_encode_customer_nvm_managed>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800421c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004220:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d917      	bls.n	800425a <VL53LX_init_and_start_range+0x406>
 800422a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800422e:	2b00      	cmp	r3, #0
 8004230:	d113      	bne.n	800425a <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004232:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004236:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800423a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800423e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 8004242:	f107 020c 	add.w	r2, r7, #12
 8004246:	4413      	add	r3, r2
 8004248:	461a      	mov	r2, r3
 800424a:	2120      	movs	r1, #32
 800424c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8004250:	f00b faa7 	bl	800f7a2 <VL53LX_i2c_encode_static_config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800425a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800425e:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d917      	bls.n	8004298 <VL53LX_init_and_start_range+0x444>
 8004268:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004270:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8004274:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8004278:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800427c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 8004280:	f107 020c 	add.w	r2, r7, #12
 8004284:	4413      	add	r3, r2
 8004286:	461a      	mov	r2, r3
 8004288:	2116      	movs	r1, #22
 800428a:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800428e:	f00b fb6b 	bl	800f968 <VL53LX_i2c_encode_general_config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004298:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800429c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d917      	bls.n	80042d6 <VL53LX_init_and_start_range+0x482>
 80042a6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d113      	bne.n	80042d6 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80042ae:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80042b2:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80042b6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80042ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 80042be:	f107 020c 	add.w	r2, r7, #12
 80042c2:	4413      	add	r3, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	2117      	movs	r1, #23
 80042c8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80042cc:	f00b fbd0 	bl	800fa70 <VL53LX_i2c_encode_timing_config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80042d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042da:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d036      	beq.n	8004352 <VL53LX_init_and_start_range+0x4fe>
 80042e4:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d132      	bne.n	8004352 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80042ec:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80042f0:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 80042f4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80042f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004316:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004328:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8004330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004334:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004336:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 800433a:	f107 020c 	add.w	r2, r7, #12
 800433e:	4413      	add	r3, r2
 8004340:	461a      	mov	r2, r3
 8004342:	2112      	movs	r1, #18
 8004344:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8004348:	f00b fc14 	bl	800fb74 <VL53LX_i2c_encode_dynamic_config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8004352:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004356:	2b00      	cmp	r3, #0
 8004358:	d113      	bne.n	8004382 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 800435a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800435e:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8004362:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004366:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 800436a:	f107 020c 	add.w	r2, r7, #12
 800436e:	4413      	add	r3, r2
 8004370:	461a      	mov	r2, r3
 8004372:	2105      	movs	r1, #5
 8004374:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8004378:	f00b fc81 	bl	800fc7e <VL53LX_i2c_encode_system_control>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004382:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 800438a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800438e:	f107 020c 	add.w	r2, r7, #12
 8004392:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8004396:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800439a:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 800439e:	6800      	ldr	r0, [r0, #0]
 80043a0:	f00d f866 	bl	8011470 <VL53LX_WriteMulti>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 80043aa:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80043b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80043b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	f003 f9c4 	bl	8007748 <VL53LX_update_ll_driver_rd_state>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 80043c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80043ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80043d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	f003 fb56 	bl	8007a88 <VL53LX_update_ll_driver_cfg_state>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 80043e2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b0c8      	sub	sp, #288	@ 0x120
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80043fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043fe:	6018      	str	r0, [r3, #0]
 8004400:	460a      	mov	r2, r1
 8004402:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004406:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800440a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800440c:	2300      	movs	r3, #0
 800440e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004416:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3318      	adds	r3, #24
 800441e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004422:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004426:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800442a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 800442e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004432:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004436:	3318      	adds	r3, #24
 8004438:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800443c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004440:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004444:	331c      	adds	r3, #28
 8004446:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 800444a:	2388      	movs	r3, #136	@ 0x88
 800444c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800445c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004460:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d008      	beq.n	800447c <VL53LX_get_measurement_results+0x8c>
 800446a:	2b02      	cmp	r3, #2
 800446c:	d10d      	bne.n	800448a <VL53LX_get_measurement_results+0x9a>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800446e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004472:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8004476:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800447a:	e00a      	b.n	8004492 <VL53LX_get_measurement_results+0xa2>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800447c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004480:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8004484:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004488:	e003      	b.n	8004492 <VL53LX_get_measurement_results+0xa2>
	default:
		i2c_buffer_size_bytes =
 800448a:	232c      	movs	r3, #44	@ 0x2c
 800448c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8004490:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8004492:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <VL53LX_get_measurement_results+0xca>
		status =
			VL53LX_ReadMulti(
 800449a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800449e:	f107 0208 	add.w	r2, r7, #8
 80044a2:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80044a6:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80044aa:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80044ae:	6800      	ldr	r0, [r0, #0]
 80044b0:	f00d f814 	bl	80114dc <VL53LX_ReadMulti>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80044ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80044be:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d917      	bls.n	80044f8 <VL53LX_get_measurement_results+0x108>
 80044c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d113      	bne.n	80044f8 <VL53LX_get_measurement_results+0x108>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80044d0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80044d4:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 80044d8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80044dc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 80044e0:	f107 0208 	add.w	r2, r7, #8
 80044e4:	4413      	add	r3, r2
 80044e6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80044ea:	4619      	mov	r1, r3
 80044ec:	2038      	movs	r0, #56	@ 0x38
 80044ee:	f00b fd58 	bl	800ffa2 <VL53LX_i2c_decode_debug_results>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80044f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80044fc:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <VL53LX_get_measurement_results+0x146>
 8004506:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800450a:	2b00      	cmp	r3, #0
 800450c:	d113      	bne.n	8004536 <VL53LX_get_measurement_results+0x146>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800450e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8004512:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8004516:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800451a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 800451e:	f107 0208 	add.w	r2, r7, #8
 8004522:	4413      	add	r3, r2
 8004524:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004528:	4619      	mov	r1, r3
 800452a:	2021      	movs	r0, #33	@ 0x21
 800452c:	f00b fcd8 	bl	800fee0 <VL53LX_i2c_decode_core_results>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004536:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800453a:	2b00      	cmp	r3, #0
 800453c:	d110      	bne.n	8004560 <VL53LX_get_measurement_results+0x170>

		i2c_buffer_offset_bytes = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004544:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 8004548:	f107 0208 	add.w	r2, r7, #8
 800454c:	4413      	add	r3, r2
 800454e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004552:	4619      	mov	r1, r3
 8004554:	202c      	movs	r0, #44	@ 0x2c
 8004556:	f00b fbcd 	bl	800fcf4 <VL53LX_i2c_decode_system_results>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004560:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8004564:	4618      	mov	r0, r3
 8004566:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 800456e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004572:	b0a0      	sub	sp, #128	@ 0x80
 8004574:	af06      	add	r7, sp, #24
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	460b      	mov	r3, r1
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3318      	adds	r3, #24
 8004588:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004590:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8004592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004594:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8004596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004598:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800459c:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 800459e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045a0:	332c      	adds	r3, #44	@ 0x2c
 80045a2:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80045a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045a6:	33c2      	adds	r3, #194	@ 0xc2
 80045a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80045aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ac:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80045b0:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80045b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045ba:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80045c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045c2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80045c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045ca:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 80045ce:	3310      	adds	r3, #16
 80045d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80045d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80045d8:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80045da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045dc:	3348      	adds	r3, #72	@ 0x48
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 80045e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e2:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 80045e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045ea:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80045ee:	331c      	adds	r3, #28
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 80045f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045f4:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8290 	beq.w	8004b22 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004602:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004604:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004608:	4619      	mov	r1, r3
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fbcc 	bl	8004da8 <VL53LX_get_histogram_bin_data>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004616:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800461a:	2b00      	cmp	r3, #0
 800461c:	d118      	bne.n	8004650 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004622:	2b00      	cmp	r3, #0
 8004624:	d114      	bne.n	8004650 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004628:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800462c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004638:	4413      	add	r3, r2
 800463a:	1d1a      	adds	r2, r3, #4
 800463c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800463e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f004 f9d5 	bl	80089f4 <VL53LX_hist_copy_and_scale_ambient_info>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004650:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 8206 	bne.w	8004a66 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800465a:	f107 0313 	add.w	r3, r7, #19
 800465e:	4619      	mov	r1, r3
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f006 ff21 	bl	800b4a8 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 800466c:	2301      	movs	r3, #1
 800466e:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	3b01      	subs	r3, #1
 8004674:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004678:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800467a:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8004682:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	3202      	adds	r2, #2
 800468a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004690:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8004692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004694:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 8004698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469a:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 800469c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f004 f8ab 	bl	8008804 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80046ae:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80046b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80046b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80046ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046bc:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80046be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80046c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c6:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80046c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ca:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80046cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ce:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80046d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d4:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80046d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046d8:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 80046dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046de:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 80046e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046e2:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 80046e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046e8:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	@ 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80046ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ee:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80046f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046f4:	f893 2331 	ldrb.w	r2, [r3, #817]	@ 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80046f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046fa:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80046fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004700:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004706:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8004708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800470e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004710:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004714:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004718:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800471a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471c:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800471e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004720:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004724:	f203 3292 	addw	r2, r3, #914	@ 0x392
 8004728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800472a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f003 facf 	bl	8007cd4 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004738:	795b      	ldrb	r3, [r3, #5]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d002      	beq.n	8004744 <VL53LX_get_device_results+0x1d6>
 800473e:	2b03      	cmp	r3, #3
 8004740:	d02e      	beq.n	80047a0 <VL53LX_get_device_results+0x232>
 8004742:	e03d      	b.n	80047c0 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004746:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
 800474a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 800475a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800475c:	f893 e3c2 	ldrb.w	lr, [r3, #962]	@ 0x3c2
 8004760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004762:	f893 83c3 	ldrb.w	r8, [r3, #963]	@ 0x3c3
 8004766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004768:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800476c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800476e:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 8004772:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004774:	319c      	adds	r1, #156	@ 0x9c
 8004776:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004778:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 800477c:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 8004780:	b2a4      	uxth	r4, r4
 8004782:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8004784:	351c      	adds	r5, #28
 8004786:	9505      	str	r5, [sp, #20]
 8004788:	9404      	str	r4, [sp, #16]
 800478a:	9003      	str	r0, [sp, #12]
 800478c:	9102      	str	r1, [sp, #8]
 800478e:	9201      	str	r2, [sp, #4]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	4643      	mov	r3, r8
 8004794:	4672      	mov	r2, lr
 8004796:	4661      	mov	r1, ip
 8004798:	4630      	mov	r0, r6
 800479a:	f005 f89b 	bl	80098d4 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800479e:	e013      	b.n	80047c8 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80047a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a2:	331c      	adds	r3, #28
 80047a4:	4619      	mov	r1, r3
 80047a6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80047a8:	f7fe fa3c 	bl	8002c24 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80047ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	b21a      	sxth	r2, r3
 80047ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047bc:	839a      	strh	r2, [r3, #28]
		break;
 80047be:	e003      	b.n	80047c8 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 80047c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c2:	2200      	movs	r2, #0
 80047c4:	839a      	strh	r2, [r3, #28]
		break;
 80047c6:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 80047c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 814c 	bne.w	8004a6a <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 80047d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047da:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 80047de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e0:	f503 72ec 	add.w	r2, r3, #472	@ 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 80047e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e6:	f893 3331 	ldrb.w	r3, [r3, #817]	@ 0x331
		VL53LX_calc_max_effective_spads(
 80047ea:	461c      	mov	r4, r3
 80047ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ee:	f203 236a 	addw	r3, r3, #618	@ 0x26a
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4623      	mov	r3, r4
 80047f6:	f005 fa10 	bl	8009c1a <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 80047fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047fc:	799b      	ldrb	r3, [r3, #6]
 80047fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004800:	4619      	mov	r1, r3
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 ff83 	bl	800570e <VL53LX_get_dmax_calibration_data>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 800480e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 812b 	bne.w	8004a6e <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800481a:	f503 7515 	add.w	r5, r3, #596	@ 0x254
 800481e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004820:	f503 7605 	add.w	r6, r3, #532	@ 0x214
 8004824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004826:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800482a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800482c:	f202 521c 	addw	r2, r2, #1308	@ 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004830:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004832:	f501 51a0 	add.w	r1, r1, #5120	@ 0x1400
				pdev->wArea2,
 8004836:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004838:	f500 50d0 	add.w	r0, r0, #6656	@ 0x1a00
		status = VL53LX_ipp_hist_process_data(
 800483c:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 800483e:	9405      	str	r4, [sp, #20]
 8004840:	f107 0413 	add.w	r4, r7, #19
 8004844:	9404      	str	r4, [sp, #16]
 8004846:	9003      	str	r0, [sp, #12]
 8004848:	9102      	str	r1, [sp, #8]
 800484a:	9201      	str	r2, [sp, #4]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4633      	mov	r3, r6
 8004850:	462a      	mov	r2, r5
 8004852:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f00d f84f 	bl	80118f8 <VL53LX_ipp_hist_process_data>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004862:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d150      	bne.n	800490c <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 800486a:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800486c:	2b01      	cmp	r3, #1
 800486e:	d94d      	bls.n	800490c <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004876:	e045      	b.n	8004904 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004878:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800487c:	224c      	movs	r2, #76	@ 0x4c
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	3310      	adds	r3, #16
 8004884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004886:	4413      	add	r3, r2
 8004888:	3304      	adds	r3, #4
 800488a:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	7cfa      	ldrb	r2, [r7, #19]
 8004892:	fbb3 f2f2 	udiv	r2, r3, r2
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	7cfa      	ldrb	r2, [r7, #19]
 80048a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	7cfa      	ldrb	r2, [r7, #19]
 80048ae:	fb93 f2f2 	sdiv	r2, r3, r2
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80048ba:	461a      	mov	r2, r3
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	fb92 f3f3 	sdiv	r3, r2, r3
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048cc:	461a      	mov	r2, r3
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80048de:	461a      	mov	r2, r3
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	7cfa      	ldrb	r2, [r7, #19]
 80048f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80048fa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80048fe:	3301      	adds	r3, #1
 8004900:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004904:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004908:	2b03      	cmp	r3, #3
 800490a:	d9b5      	bls.n	8004878 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 800490c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004910:	2b00      	cmp	r3, #0
 8004912:	f040 80ae 	bne.w	8004a72 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004918:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 800491c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800491e:	f503 7171 	add.w	r1, r3, #964	@ 0x3c4
 8004922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004924:	330e      	adds	r3, #14
 8004926:	461a      	mov	r2, r3
 8004928:	f004 ff9e 	bl	8009868 <VL53LX_hist_wrap_dmax>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004932:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 809d 	bne.w	8004a76 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800493c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800493e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004946:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800494e:	4413      	add	r3, r2
 8004950:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004952:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004962:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004964:	4413      	add	r3, r2
 8004966:	f103 0208 	add.w	r2, r3, #8
 800496a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f004 fa9d 	bl	8008eac <VL53LX_hist_phase_consistency_check>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004978:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800497c:	2b00      	cmp	r3, #0
 800497e:	d17c      	bne.n	8004a7a <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004982:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800498a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004992:	4413      	add	r3, r2
 8004994:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004996:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80049a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049a8:	4413      	add	r3, r2
 80049aa:	f103 0208 	add.w	r2, r3, #8
 80049ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f004 feff 	bl	80097b8 <VL53LX_hist_xmonitor_consistency_check>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 80049c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d15a      	bne.n	8004a7e <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80049c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ca:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80049ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	2205      	movs	r2, #5
 80049d6:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80049d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049da:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80049de:	3301      	adds	r3, #1
 80049e0:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80049e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80049ec:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80049ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f0:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
		if (zid <
 80049f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d222      	bcs.n	8004a42 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 80049fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0c:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a10:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a14:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a18:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a22:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 8004a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a2c:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 8004a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a36:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a40:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004a42:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d11b      	bne.n	8004a82 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a4c:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
 8004a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a52:	f203 3266 	addw	r2, r3, #870	@ 0x366
 8004a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a58:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a60:	f005 fa38 	bl	8009ed4 <VL53LX_hist_copy_results_to_sys_and_core>
 8004a64:	e00e      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a66:	bf00      	nop
 8004a68:	e00c      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a6a:	bf00      	nop
 8004a6c:	e00a      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a6e:	bf00      	nop
 8004a70:	e008      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a72:	bf00      	nop
 8004a74:	e006      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a76:	bf00      	nop
 8004a78:	e004      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004a82:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d036      	beq.n	8004afa <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a8e:	79db      	ldrb	r3, [r3, #7]
 8004a90:	2b06      	cmp	r3, #6
 8004a92:	d00a      	beq.n	8004aaa <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004a94:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004a9c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f005 faec 	bl	800a07c <VL53LX_dynamic_zone_update>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004ab0:	e015      	b.n	8004ade <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ab4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 8004ab8:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <VL53LX_get_device_results+0x556>
 8004ac0:	2103      	movs	r1, #3
 8004ac2:	e000      	b.n	8004ac6 <VL53LX_get_device_results+0x558>
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004acc:	4413      	add	r3, r2
 8004ace:	460a      	mov	r2, r1
 8004ad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004ad4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004ade:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d9e5      	bls.n	8004ab2 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004ae6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d105      	bne.n	8004afa <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f005 fb3e 	bl	800a170 <VL53LX_multizone_hist_bins_update>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004afa:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f005 ffda 	bl	800aabc <VL53LX_dynamic_xtalk_correction_corrector>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b10:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d151      	bne.n	8004bbc <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e04c      	b.n	8004bbc <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004b22:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004b2a:	7afb      	ldrb	r3, [r7, #11]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff fc5e 	bl	80043f0 <VL53LX_get_measurement_results>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004b3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b44:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004b48:	4618      	mov	r0, r3
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b4c:	f203 3166 	addw	r1, r3, #870	@ 0x366
 8004b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b52:	f503 5299 	add.w	r2, r3, #4896	@ 0x1320
 8004b56:	3218      	adds	r2, #24
 8004b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b5a:	f000 fc27 	bl	80053ac <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d12a      	bne.n	8004bbc <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004b66:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10d      	bne.n	8004b8a <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f006 fbbb 	bl	800b2f2 <VL53LX_low_power_auto_setup_manual_calibration>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	2201      	movs	r2, #1
 8004b86:	709a      	strb	r2, [r3, #2]
 8004b88:	e00a      	b.n	8004ba0 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004b8a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	789b      	ldrb	r3, [r3, #2]
 8004ba4:	2bff      	cmp	r3, #255	@ 0xff
 8004ba6:	d009      	beq.n	8004bbc <VL53LX_get_device_results+0x64e>
 8004ba8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f006 fbf0 	bl	800b396 <VL53LX_low_power_auto_update_DSS>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bbe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc8:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8004bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bce:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd2:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8004bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bd8:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004bda:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80b0 	bne.w	8004d44 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be6:	2205      	movs	r2, #5
 8004be8:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004bec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bee:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bf8:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bfe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8004c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c08:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8004c0c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004c10:	429a      	cmp	r2, r3
 8004c12:	f080 8097 	bcs.w	8004d44 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004c16:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004c26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c28:	4413      	add	r3, r2
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c30:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c34:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c38:	785a      	ldrb	r2, [r3, #1]
 8004c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c3c:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004c3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c40:	789a      	ldrb	r2, [r3, #2]
 8004c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c44:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c48:	78da      	ldrb	r2, [r3, #3]
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c50:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c5a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c60:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c64:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c70:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8004c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 8004c7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c7c:	7c5a      	ldrb	r2, [r3, #17]
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c80:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c84:	7c9a      	ldrb	r2, [r3, #18]
 8004c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c88:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004c90:	e052      	b.n	8004d38 <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004c92:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004c96:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004c9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c9c:	204c      	movs	r0, #76	@ 0x4c
 8004c9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3338      	adds	r3, #56	@ 0x38
 8004ca6:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004ca8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4403      	add	r3, r0
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004cb8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004cbc:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004cc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004cc2:	204c      	movs	r0, #76	@ 0x4c
 8004cc4:	fb00 f303 	mul.w	r3, r0, r3
 8004cc8:	440b      	add	r3, r1
 8004cca:	333c      	adds	r3, #60	@ 0x3c
 8004ccc:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004cce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4403      	add	r3, r0
 8004cda:	330c      	adds	r3, #12
 8004cdc:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004cde:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004ce2:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004ce6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ce8:	204c      	movs	r0, #76	@ 0x4c
 8004cea:	fb00 f303 	mul.w	r3, r0, r3
 8004cee:	440b      	add	r3, r1
 8004cf0:	3354      	adds	r3, #84	@ 0x54
 8004cf2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004cf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3310      	adds	r3, #16
 8004d02:	4602      	mov	r2, r0
 8004d04:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004d06:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004d0a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8004d0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d10:	204c      	movs	r0, #76	@ 0x4c
 8004d12:	fb00 f303 	mul.w	r3, r0, r3
 8004d16:	440b      	add	r3, r1
 8004d18:	335e      	adds	r3, #94	@ 0x5e
 8004d1a:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004d1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	3312      	adds	r3, #18
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8004d2e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004d32:	3301      	adds	r3, #1
 8004d34:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004d38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d3a:	7c9b      	ldrb	r3, [r3, #18]
 8004d3c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3a6      	bcc.n	8004c92 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 8004d44:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004d48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f010 fe67 	bl	8015a1e <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8004d50:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f002 fde3 	bl	8007924 <VL53LX_check_ll_driver_rd_state>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004d64:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3768      	adds	r7, #104	@ 0x68
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d72 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff f85f 	bl	8003e54 <VL53LX_init_and_start_range>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0d2      	sub	sp, #328	@ 0x148
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004db2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004db6:	6018      	str	r0, [r3, #0]
 8004db8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004dbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004dc0:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8004dc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004dcc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004dd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ddc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004de6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8004dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004dee:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8004df2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8004df6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004dfa:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8004dfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8004e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e06:	f203 331e 	addw	r3, r3, #798	@ 0x31e
 8004e0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8004e0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004e12:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004e16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8004e1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004e1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 8004e54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8004e60:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10d      	bne.n	8004e84 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8004e68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e6c:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8004e70:	2353      	movs	r3, #83	@ 0x53
 8004e72:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8004e76:	2188      	movs	r1, #136	@ 0x88
 8004e78:	6800      	ldr	r0, [r0, #0]
 8004e7a:	f00c fb2f 	bl	80114dc <VL53LX_ReadMulti>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8004e84:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004e8e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8004e98:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004e9c:	785a      	ldrb	r2, [r3, #1]
 8004e9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ea2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8004eac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004eb0:	789a      	ldrb	r2, [r3, #2]
 8004eb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eb6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8004ec0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004ec4:	78da      	ldrb	r2, [r3, #3]
 8004ec6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eca:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8004ed4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	2002      	movs	r0, #2
 8004ede:	f003 f9ec 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8004ee6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004eea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 8004ef4:	234e      	movs	r3, #78	@ 0x4e
 8004ef6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004efa:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004efe:	f107 020c 	add.w	r2, r7, #12
 8004f02:	4413      	add	r3, r2
 8004f04:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8004f08:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004f0c:	2002      	movs	r0, #2
 8004f0e:	f003 f9d4 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8004f16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f1a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 8004f24:	2350      	movs	r3, #80	@ 0x50
 8004f26:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8004f2a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f2e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004f32:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004f36:	5cd2      	ldrb	r2, [r2, r3]
 8004f38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8004f46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f4a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8004f54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f5c:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8004f60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004f64:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8004f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f76:	f883 235e 	strb.w	r2, [r3, #862]	@ 0x35e



	i2c_buffer_offset_bytes =
 8004f7a:	2351      	movs	r3, #81	@ 0x51
 8004f7c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8004f80:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f84:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004f88:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004f8c:	5cd3      	ldrb	r3, [r2, r3]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004f94:	2352      	movs	r3, #82	@ 0x52
 8004f96:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8004f9a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004f9e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004fa2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004fa6:	5cd2      	ldrb	r2, [r2, r3]
 8004fa8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004fac:	4413      	add	r3, r2
 8004fae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8004fb2:	234d      	movs	r3, #77	@ 0x4d
 8004fb4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8004fb8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004fbc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004fc0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8004fc4:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8004fc8:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004fca:	2306      	movs	r3, #6
 8004fcc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004fd0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004fd4:	f107 020c 	add.w	r2, r7, #12
 8004fd8:	4413      	add	r3, r2
 8004fda:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004fe4:	e01a      	b.n	800501c <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004fe6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004fea:	2003      	movs	r0, #3
 8004fec:	f003 fa04 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 8004ff0:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8004ff2:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8004ff6:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004ff8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ffc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3206      	adds	r2, #6
 8005004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8005008:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800500c:	3303      	adds	r3, #3
 800500e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005012:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8005016:	3301      	adds	r3, #1
 8005018:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 800501c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8005020:	2b17      	cmp	r3, #23
 8005022:	d9e0      	bls.n	8004fe6 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005024:	f107 0208 	add.w	r2, r7, #8
 8005028:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800502c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005030:	f248 018d 	movw	r1, #32909	@ 0x808d
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	f000 fb95 	bl	8005764 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 800503a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800503e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8005048:	2b00      	cmp	r3, #0
 800504a:	d118      	bne.n	800507e <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800504c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005050:	f503 53e0 	add.w	r3, r3, #7168	@ 0x1c00
 8005054:	3310      	adds	r3, #16
 8005056:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f010 fc4b 	bl	80158f8 <memset>
		pdev->bin_rec_pos = 0;
 8005062:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2c0c 	strb.w	r2, [r3, #3084]	@ 0xc0c
		pdev->pos_before_next_recom = 0;
 8005070:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2c0d 	strb.w	r2, [r3, #3085]	@ 0xc0d
	}

	if (hist_merge == 1)
 800507e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005082:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d10b      	bne.n	80050a4 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 800508c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005090:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8005094:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005098:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f7fd feb8 	bl	8002e14 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80050a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050a8:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 80050ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 80050b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80050c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050ca:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2218      	movs	r2, #24
 80050d2:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80050d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2218      	movs	r2, #24
 80050e0:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 80050e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050e6:	78da      	ldrb	r2, [r3, #3]
 80050e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80050ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80050f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050fa:	799b      	ldrb	r3, [r3, #6]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8005100:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005104:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 800510e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005112:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800511c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005120:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 8005122:	4413      	add	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800512a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8005134:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005138:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 800513a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800513e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8005148:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800514c:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8005150:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005154:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005158:	6811      	ldr	r1, [r2, #0]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	f003 fd48 	bl	8008bf0 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005160:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005164:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d115      	bne.n	8005198 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800516c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005170:	791b      	ldrb	r3, [r3, #4]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005176:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800517a:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 800517c:	4413      	add	r3, r2
 800517e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8005182:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005186:	799a      	ldrb	r2, [r3, #6]
 8005188:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800518c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8005196:	e014      	b.n	80051c2 <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8005198:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800519c:	79db      	ldrb	r3, [r3, #7]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80051a2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80051a6:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 80051a8:	4413      	add	r3, r2
 80051aa:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80051ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051b2:	7a5a      	ldrb	r2, [r3, #9]
 80051b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80051c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2200      	movs	r2, #0
 80051ce:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 80051d6:	e01f      	b.n	8005218 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80051d8:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80051dc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80051e0:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	4413      	add	r3, r2
 80051e8:	7b1b      	ldrb	r3, [r3, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b07      	cmp	r3, #7
 80051f0:	d10d      	bne.n	800520e <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 80051f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80051f6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	7adb      	ldrb	r3, [r3, #11]
 80051fe:	3304      	adds	r3, #4
 8005200:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005202:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005206:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800520e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8005212:	3301      	adds	r3, #1
 8005214:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8005218:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800521c:	2b05      	cmp	r3, #5
 800521e:	d9db      	bls.n	80051d8 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005220:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8005224:	4618      	mov	r0, r3
 8005226:	f003 fb56 	bl	80088d6 <VL53LX_decode_timeout>
 800522a:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 800522c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005230:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 800523a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800523e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8005248:	4618      	mov	r0, r3
 800524a:	f006 f96d 	bl	800b528 <VL53LX_calc_pll_period_us>
 800524e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8005252:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005256:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	3301      	adds	r3, #1
 8005262:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005266:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800526a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 8005274:	4619      	mov	r1, r3
 8005276:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800527a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800527e:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8005282:	f006 f968 	bl	800b556 <VL53LX_duration_maths>
 8005286:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8005288:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800528c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8005296:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800529a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80052a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052aa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	f006 fa77 	bl	800b7a2 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80052b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	f006 fe8e 	bl	800bfde <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80052c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052c6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80052ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052ce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80052d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052da:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80052de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052e2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 80052ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80052ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	789b      	ldrb	r3, [r3, #2]
 80052f6:	461a      	mov	r2, r3
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005304:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005308:	4413      	add	r3, r2
 800530a:	3302      	adds	r3, #2
 800530c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005314:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005316:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800531a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005328:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800532a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800532e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800533c:	2200      	movs	r2, #0
 800533e:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005340:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005344:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b11      	cmp	r3, #17
 8005354:	bf8c      	ite	hi
 8005356:	2201      	movhi	r2, #1
 8005358:	2200      	movls	r2, #0
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	2a00      	cmp	r2, #0
 800535e:	d11c      	bne.n	800539a <VL53LX_get_histogram_bin_data+0x5f2>
 8005360:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <VL53LX_get_histogram_bin_data+0x600>)
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf14      	ite	ne
 800536e:	2301      	movne	r3, #1
 8005370:	2300      	moveq	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005378:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800537c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	b2da      	uxtb	r2, r3
 800538c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005390:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8005392:	23fa      	movs	r3, #250	@ 0xfa
 8005394:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 8005398:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800539a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 800539e:	4618      	mov	r0, r3
 80053a0:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	0002200e 	.word	0x0002200e

080053ac <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b08b      	sub	sp, #44	@ 0x2c
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2200      	movs	r2, #0
 80053cc:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	78da      	ldrb	r2, [r3, #3]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2200      	movs	r2, #0
 80053da:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2204      	movs	r2, #4
 80053e0:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	8a1b      	ldrh	r3, [r3, #16]
 80053ec:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	8a9b      	ldrh	r3, [r3, #20]
 80053f2:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	8a5b      	ldrh	r3, [r3, #18]
 80053f8:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005400:	e00b      	b.n	800541a <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	2200      	movs	r2, #0
 800540e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005414:	3301      	adds	r3, #1
 8005416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800541a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800541e:	2b04      	cmp	r3, #4
 8005420:	d9ef      	bls.n	8005402 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800542e:	e0fe      	b.n	800562e <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005436:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	2200      	movs	r2, #0
 800543c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	78db      	ldrb	r3, [r3, #3]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800544e:	2b09      	cmp	r3, #9
 8005450:	d104      	bne.n	800545c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2213      	movs	r2, #19
 8005456:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 800545a:	e007      	b.n	800546c <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2200      	movs	r2, #0
 8005470:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2200      	movs	r2, #0
 8005476:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2200      	movs	r2, #0
 800547c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	2200      	movs	r2, #0
 8005482:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2200      	movs	r2, #0
 8005488:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2200      	movs	r2, #0
 800548e:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005498:	2b01      	cmp	r3, #1
 800549a:	d05c      	beq.n	8005556 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 800549c:	e0a8      	b.n	80055f0 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	789b      	ldrb	r3, [r3, #2]
 80054a2:	2b07      	cmp	r3, #7
 80054a4:	d103      	bne.n	80054ae <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	8a7a      	ldrh	r2, [r7, #18]
 80054aa:	82da      	strh	r2, [r3, #22]
 80054ac:	e00b      	b.n	80054c6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	789b      	ldrb	r3, [r3, #2]
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d103      	bne.n	80054be <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	8aba      	ldrh	r2, [r7, #20]
 80054ba:	82da      	strh	r2, [r3, #22]
 80054bc:	e003      	b.n	80054c6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	8afa      	ldrh	r2, [r7, #22]
 80054ca:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	895b      	ldrh	r3, [r3, #10]
 80054e0:	015b      	lsls	r3, r3, #5
 80054e2:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ea:	d302      	bcc.n	80054f2 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80054ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054f0:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005508:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800551a:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	da01      	bge.n	8005526 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005522:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8005526:	12db      	asrs	r3, r3, #11
 8005528:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	b21a      	sxth	r2, r3
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8005554:	e04c      	b.n	80055f0 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800556c:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	8bdb      	ldrh	r3, [r3, #30]
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005584:	d302      	bcc.n	800558c <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005586:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800558a:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	b29a      	uxth	r2, r3
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 80055a2:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055b4:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da01      	bge.n	80055c0 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80055bc:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80055c0:	12db      	asrs	r3, r3, #11
 80055c2:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	b21a      	sxth	r2, r3
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 80055ee:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	334c      	adds	r3, #76	@ 0x4c
 8005622:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005628:	3301      	adds	r3, #1
 800562a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800562e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005632:	2b01      	cmp	r3, #1
 8005634:	f67f aefc 	bls.w	8005430 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2b11      	cmp	r3, #17
 8005648:	bf8c      	ite	hi
 800564a:	2201      	movhi	r2, #1
 800564c:	2200      	movls	r2, #0
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	2a00      	cmp	r2, #0
 8005652:	d117      	bne.n	8005684 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 8005654:	4a0e      	ldr	r2, [pc, #56]	@ (8005690 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf14      	ite	ne
 8005662:	2301      	movne	r3, #1
 8005664:	2300      	moveq	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	b2da      	uxtb	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005682:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005684:	bf00      	nop
 8005686:	372c      	adds	r7, #44	@ 0x2c
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	0002200e 	.word	0x0002200e

08005694 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3318      	adds	r3, #24
 80056a6:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	332c      	adds	r3, #44	@ 0x2c
 80056ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d109      	bne.n	80056ca <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2202      	movs	r2, #2
 80056ba:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
 80056c8:	e003      	b.n	80056d2 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80056d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3318      	adds	r3, #24
 80056f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80056fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b086      	sub	sp, #24
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	460b      	mov	r3, r1
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3318      	adds	r3, #24
 8005724:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d009      	beq.n	8005740 <VL53LX_get_dmax_calibration_data+0x32>
 800572c:	2b02      	cmp	r3, #2
 800572e:	d10f      	bne.n	8005750 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 8005734:	220a      	movs	r2, #10
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f010 f970 	bl	8015a1e <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800573e:	e00a      	b.n	8005756 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 8005744:	220a      	movs	r2, #10
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f010 f968 	bl	8015a1e <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800574e:	e002      	b.n	8005756 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005750:	23fc      	movs	r3, #252	@ 0xfc
 8005752:	75fb      	strb	r3, [r7, #23]
	break;
 8005754:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005756:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	@ 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005772:	2300      	movs	r3, #0
 8005774:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3318      	adds	r3, #24
 800577a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8005782:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800578a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800578c:	897b      	ldrh	r3, [r7, #10]
 800578e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005792:	2bb9      	cmp	r3, #185	@ 0xb9
 8005794:	f200 86ca 	bhi.w	800652c <VL53LX_get_tuning_parm+0xdc8>
 8005798:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <VL53LX_get_tuning_parm+0x3c>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	08005a89 	.word	0x08005a89
 80057a4:	08005a99 	.word	0x08005a99
 80057a8:	08005aa9 	.word	0x08005aa9
 80057ac:	08005ab9 	.word	0x08005ab9
 80057b0:	08005ac7 	.word	0x08005ac7
 80057b4:	08005ad5 	.word	0x08005ad5
 80057b8:	08005ae3 	.word	0x08005ae3
 80057bc:	08005af1 	.word	0x08005af1
 80057c0:	08005aff 	.word	0x08005aff
 80057c4:	08005b0d 	.word	0x08005b0d
 80057c8:	08005b1b 	.word	0x08005b1b
 80057cc:	08005b27 	.word	0x08005b27
 80057d0:	08005b35 	.word	0x08005b35
 80057d4:	08005b43 	.word	0x08005b43
 80057d8:	08005b4f 	.word	0x08005b4f
 80057dc:	08005b5d 	.word	0x08005b5d
 80057e0:	08005b6b 	.word	0x08005b6b
 80057e4:	08005b7b 	.word	0x08005b7b
 80057e8:	08005b8b 	.word	0x08005b8b
 80057ec:	08005b99 	.word	0x08005b99
 80057f0:	08005ba9 	.word	0x08005ba9
 80057f4:	08005bb7 	.word	0x08005bb7
 80057f8:	08005bc7 	.word	0x08005bc7
 80057fc:	08005bd7 	.word	0x08005bd7
 8005800:	08005be7 	.word	0x08005be7
 8005804:	08005bf7 	.word	0x08005bf7
 8005808:	08005c07 	.word	0x08005c07
 800580c:	08005c17 	.word	0x08005c17
 8005810:	08005c27 	.word	0x08005c27
 8005814:	08005c37 	.word	0x08005c37
 8005818:	08005c47 	.word	0x08005c47
 800581c:	08005c55 	.word	0x08005c55
 8005820:	08005c65 	.word	0x08005c65
 8005824:	08005c75 	.word	0x08005c75
 8005828:	08005c85 	.word	0x08005c85
 800582c:	08005c95 	.word	0x08005c95
 8005830:	08005ca5 	.word	0x08005ca5
 8005834:	08005cb5 	.word	0x08005cb5
 8005838:	08005cc5 	.word	0x08005cc5
 800583c:	08005cd5 	.word	0x08005cd5
 8005840:	08005ce5 	.word	0x08005ce5
 8005844:	08005cf5 	.word	0x08005cf5
 8005848:	08005d05 	.word	0x08005d05
 800584c:	08005d15 	.word	0x08005d15
 8005850:	08005d25 	.word	0x08005d25
 8005854:	08005d35 	.word	0x08005d35
 8005858:	08005d43 	.word	0x08005d43
 800585c:	08005d51 	.word	0x08005d51
 8005860:	08005d5f 	.word	0x08005d5f
 8005864:	08005d6d 	.word	0x08005d6d
 8005868:	08005d7b 	.word	0x08005d7b
 800586c:	08005d89 	.word	0x08005d89
 8005870:	08005d97 	.word	0x08005d97
 8005874:	08005da5 	.word	0x08005da5
 8005878:	08005db3 	.word	0x08005db3
 800587c:	08005dc1 	.word	0x08005dc1
 8005880:	08005dcf 	.word	0x08005dcf
 8005884:	08005ddd 	.word	0x08005ddd
 8005888:	08005deb 	.word	0x08005deb
 800588c:	08005df9 	.word	0x08005df9
 8005890:	08005e07 	.word	0x08005e07
 8005894:	08005e15 	.word	0x08005e15
 8005898:	08005e23 	.word	0x08005e23
 800589c:	08005e31 	.word	0x08005e31
 80058a0:	08005e3f 	.word	0x08005e3f
 80058a4:	08005e4d 	.word	0x08005e4d
 80058a8:	08005e5b 	.word	0x08005e5b
 80058ac:	08005e69 	.word	0x08005e69
 80058b0:	08005e77 	.word	0x08005e77
 80058b4:	08005e85 	.word	0x08005e85
 80058b8:	08005e93 	.word	0x08005e93
 80058bc:	08005ea1 	.word	0x08005ea1
 80058c0:	08005eaf 	.word	0x08005eaf
 80058c4:	08005ebd 	.word	0x08005ebd
 80058c8:	08005ec9 	.word	0x08005ec9
 80058cc:	08005ed7 	.word	0x08005ed7
 80058d0:	08005ee5 	.word	0x08005ee5
 80058d4:	08005ef1 	.word	0x08005ef1
 80058d8:	08005efd 	.word	0x08005efd
 80058dc:	08005f09 	.word	0x08005f09
 80058e0:	08005f15 	.word	0x08005f15
 80058e4:	08005f21 	.word	0x08005f21
 80058e8:	08005f2d 	.word	0x08005f2d
 80058ec:	08005f3b 	.word	0x08005f3b
 80058f0:	08005f49 	.word	0x08005f49
 80058f4:	08005f57 	.word	0x08005f57
 80058f8:	08005f65 	.word	0x08005f65
 80058fc:	08005f73 	.word	0x08005f73
 8005900:	08005f81 	.word	0x08005f81
 8005904:	08005f8f 	.word	0x08005f8f
 8005908:	08005f9d 	.word	0x08005f9d
 800590c:	08005fab 	.word	0x08005fab
 8005910:	08005fb9 	.word	0x08005fb9
 8005914:	08005fc7 	.word	0x08005fc7
 8005918:	08005fd5 	.word	0x08005fd5
 800591c:	08005fe3 	.word	0x08005fe3
 8005920:	08005ff1 	.word	0x08005ff1
 8005924:	08005fff 	.word	0x08005fff
 8005928:	0800600d 	.word	0x0800600d
 800592c:	0800601b 	.word	0x0800601b
 8005930:	08006029 	.word	0x08006029
 8005934:	08006037 	.word	0x08006037
 8005938:	08006045 	.word	0x08006045
 800593c:	08006053 	.word	0x08006053
 8005940:	08006061 	.word	0x08006061
 8005944:	0800606f 	.word	0x0800606f
 8005948:	0800607d 	.word	0x0800607d
 800594c:	0800608b 	.word	0x0800608b
 8005950:	08006099 	.word	0x08006099
 8005954:	080060a7 	.word	0x080060a7
 8005958:	080060b5 	.word	0x080060b5
 800595c:	080060c3 	.word	0x080060c3
 8005960:	080060d1 	.word	0x080060d1
 8005964:	080060df 	.word	0x080060df
 8005968:	080060ed 	.word	0x080060ed
 800596c:	080060fb 	.word	0x080060fb
 8005970:	08006109 	.word	0x08006109
 8005974:	08006117 	.word	0x08006117
 8005978:	08006125 	.word	0x08006125
 800597c:	08006137 	.word	0x08006137
 8005980:	08006149 	.word	0x08006149
 8005984:	0800615b 	.word	0x0800615b
 8005988:	0800616d 	.word	0x0800616d
 800598c:	0800617f 	.word	0x0800617f
 8005990:	08006191 	.word	0x08006191
 8005994:	080061a3 	.word	0x080061a3
 8005998:	080061b5 	.word	0x080061b5
 800599c:	080061c7 	.word	0x080061c7
 80059a0:	080061d9 	.word	0x080061d9
 80059a4:	080061eb 	.word	0x080061eb
 80059a8:	080061fd 	.word	0x080061fd
 80059ac:	0800620f 	.word	0x0800620f
 80059b0:	08006221 	.word	0x08006221
 80059b4:	08006233 	.word	0x08006233
 80059b8:	08006245 	.word	0x08006245
 80059bc:	08006257 	.word	0x08006257
 80059c0:	08006269 	.word	0x08006269
 80059c4:	0800627b 	.word	0x0800627b
 80059c8:	08006289 	.word	0x08006289
 80059cc:	08006297 	.word	0x08006297
 80059d0:	080062a5 	.word	0x080062a5
 80059d4:	080062b3 	.word	0x080062b3
 80059d8:	080062c1 	.word	0x080062c1
 80059dc:	080062cf 	.word	0x080062cf
 80059e0:	080062dd 	.word	0x080062dd
 80059e4:	080062ef 	.word	0x080062ef
 80059e8:	080062fd 	.word	0x080062fd
 80059ec:	0800630b 	.word	0x0800630b
 80059f0:	08006319 	.word	0x08006319
 80059f4:	08006327 	.word	0x08006327
 80059f8:	08006335 	.word	0x08006335
 80059fc:	08006343 	.word	0x08006343
 8005a00:	08006351 	.word	0x08006351
 8005a04:	0800635f 	.word	0x0800635f
 8005a08:	0800636d 	.word	0x0800636d
 8005a0c:	0800637b 	.word	0x0800637b
 8005a10:	08006389 	.word	0x08006389
 8005a14:	08006397 	.word	0x08006397
 8005a18:	080063a5 	.word	0x080063a5
 8005a1c:	080063b3 	.word	0x080063b3
 8005a20:	080063c1 	.word	0x080063c1
 8005a24:	080063cf 	.word	0x080063cf
 8005a28:	080063dd 	.word	0x080063dd
 8005a2c:	080063eb 	.word	0x080063eb
 8005a30:	080063f9 	.word	0x080063f9
 8005a34:	08006407 	.word	0x08006407
 8005a38:	08006415 	.word	0x08006415
 8005a3c:	08006423 	.word	0x08006423
 8005a40:	08006431 	.word	0x08006431
 8005a44:	0800643f 	.word	0x0800643f
 8005a48:	0800644d 	.word	0x0800644d
 8005a4c:	0800645b 	.word	0x0800645b
 8005a50:	08006469 	.word	0x08006469
 8005a54:	08006477 	.word	0x08006477
 8005a58:	08006485 	.word	0x08006485
 8005a5c:	08006493 	.word	0x08006493
 8005a60:	080064a1 	.word	0x080064a1
 8005a64:	080064af 	.word	0x080064af
 8005a68:	080064bd 	.word	0x080064bd
 8005a6c:	080064cb 	.word	0x080064cb
 8005a70:	080064d9 	.word	0x080064d9
 8005a74:	080064e7 	.word	0x080064e7
 8005a78:	080064f5 	.word	0x080064f5
 8005a7c:	08006503 	.word	0x08006503
 8005a80:	08006511 	.word	0x08006511
 8005a84:	0800651f 	.word	0x0800651f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8005a8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]
	break;
 8005a94:	f000 bd51 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8005a9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
	break;
 8005aa4:	f000 bd49 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8005aae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
	break;
 8005ab4:	f000 bd41 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
	break;
 8005ac2:	f000 bd3a 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
	break;
 8005ad0:	f000 bd33 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	789b      	ldrb	r3, [r3, #2]
 8005ad8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
	break;
 8005ade:	f000 bd2c 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	78db      	ldrb	r3, [r3, #3]
 8005ae6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
	break;
 8005aec:	f000 bd25 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
	break;
 8005afa:	f000 bd1e 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	795b      	ldrb	r3, [r3, #5]
 8005b02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
	break;
 8005b08:	f000 bd17 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	799b      	ldrb	r3, [r3, #6]
 8005b10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
	break;
 8005b16:	f000 bd10 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
	break;
 8005b22:	f000 bd0a 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	891b      	ldrh	r3, [r3, #8]
 8005b2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
	break;
 8005b30:	f000 bd03 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	8a1b      	ldrh	r3, [r3, #16]
 8005b38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
	break;
 8005b3e:	f000 bcfc 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
	break;
 8005b4a:	f000 bcf6 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	7e1b      	ldrb	r3, [r3, #24]
 8005b52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
	break;
 8005b58:	f000 bcef 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	8b5b      	ldrh	r3, [r3, #26]
 8005b60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
	break;
 8005b66:	f000 bce8 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8005b70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	break;
 8005b76:	f000 bce0 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005b80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
	break;
 8005b86:	f000 bcd8 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
	break;
 8005b94:	f000 bcd1 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	break;
 8005ba4:	f000 bcc9 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
	break;
 8005bb2:	f000 bcc2 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8005bbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
	break;
 8005bc2:	f000 bcba 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8005bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
	break;
 8005bd2:	f000 bcb2 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8005bdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
	break;
 8005be2:	f000 bcaa 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8005bec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
	break;
 8005bf2:	f000 bca2 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005bfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
	break;
 8005c02:	f000 bc9a 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8005c0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
	break;
 8005c12:	f000 bc92 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	@ 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
	break;
 8005c22:	f000 bc8a 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	@ 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
	break;
 8005c32:	f000 bc82 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 8005c3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
	break;
 8005c42:	f000 bc7a 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	601a      	str	r2, [r3, #0]
	break;
 8005c50:	f000 bc73 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	@ 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
	break;
 8005c60:	f000 bc6b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
	break;
 8005c70:	f000 bc63 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	@ 0x29e
 8005c7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
	break;
 8005c80:	f000 bc5b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8005c8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	601a      	str	r2, [r3, #0]
	break;
 8005c90:	f000 bc53 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8005c9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	break;
 8005ca0:	f000 bc4b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8005caa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]
	break;
 8005cb0:	f000 bc43 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8005cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
	break;
 8005cc0:	f000 bc3b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8005cca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
	break;
 8005cd0:	f000 bc33 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8005cda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]
	break;
 8005ce0:	f000 bc2b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8005cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	601a      	str	r2, [r3, #0]
	break;
 8005cf0:	f000 bc23 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8005cfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
	break;
 8005d00:	f000 bc1b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
		*ptuning_parm_value = (int32_t)(
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
	break;
 8005d10:	f000 bc13 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8005d1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
	break;
 8005d20:	f000 bc0b 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
		*ptuning_parm_value = (int32_t)(
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	601a      	str	r2, [r3, #0]
	break;
 8005d30:	f000 bc03 	b.w	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005d3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]
	break;
 8005d40:	e3fb      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8005d48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
	break;
 8005d4e:	e3f4      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8005d56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
	break;
 8005d5c:	e3ed      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f893 32a2 	ldrb.w	r3, [r3, #674]	@ 0x2a2
 8005d64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
	break;
 8005d6a:	e3e6      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8005d72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
	break;
 8005d78:	e3df      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8005d80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	break;
 8005d86:	e3d8      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8005d8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
	break;
 8005d94:	e3d1      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	@ 0x2a0
 8005d9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
	break;
 8005da2:	e3ca      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8005daa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
	break;
 8005db0:	e3c3      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8005db8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
	break;
 8005dbe:	e3bc      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8005dc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
	break;
 8005dcc:	e3b5      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8005dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	break;
 8005dda:	e3ae      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8005de2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
	break;
 8005de8:	e3a7      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8005df0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
	break;
 8005df6:	e3a0      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8005dfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
	break;
 8005e04:	e399      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8005e0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
	break;
 8005e12:	e392      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f8b3 3260 	ldrh.w	r3, [r3, #608]	@ 0x260
 8005e1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]
	break;
 8005e20:	e38b      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f8b3 3262 	ldrh.w	r3, [r3, #610]	@ 0x262
 8005e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
	break;
 8005e2e:	e384      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005e36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
	break;
 8005e3c:	e37d      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f8b3 3266 	ldrh.w	r3, [r3, #614]	@ 0x266
 8005e44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
	break;
 8005e4a:	e376      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	@ 0x268
 8005e52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
	break;
 8005e58:	e36f      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8005e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
	break;
 8005e66:	e368      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8005e6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
	break;
 8005e74:	e361      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8005e7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
	break;
 8005e82:	e35a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8005e8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
	break;
 8005e90:	e353      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8005e98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
	break;
 8005e9e:	e34c      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8005ea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]
	break;
 8005eac:	e345      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8005eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
	break;
 8005eba:	e33e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	7c1b      	ldrb	r3, [r3, #16]
 8005ec0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
	break;
 8005ec6:	e338      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005ece:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
	break;
 8005ed4:	e331      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005edc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	601a      	str	r2, [r3, #0]
	break;
 8005ee2:	e32a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
	break;
 8005eee:	e324      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
	break;
 8005efa:	e31e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	8adb      	ldrh	r3, [r3, #22]
 8005f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	break;
 8005f06:	e318      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	8b1b      	ldrh	r3, [r3, #24]
 8005f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
	break;
 8005f12:	e312      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]
	break;
 8005f1e:	e30c      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
	break;
 8005f2a:	e306      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005f32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]
	break;
 8005f38:	e2ff      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	break;
 8005f46:	e2f8      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
	break;
 8005f54:	e2f1      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
	break;
 8005f62:	e2ea      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 8005f6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
	break;
 8005f70:	e2e3      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f893 32c1 	ldrb.w	r3, [r3, #705]	@ 0x2c1
 8005f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
	break;
 8005f7e:	e2dc      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f893 32c2 	ldrb.w	r3, [r3, #706]	@ 0x2c2
 8005f86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
	break;
 8005f8c:	e2d5      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	@ 0x2c4
 8005f94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
	break;
 8005f9a:	e2ce      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005fa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
	break;
 8005fa8:	e2c7      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
 8005fb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
	break;
 8005fb6:	e2c0      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
 8005fbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
	break;
 8005fc4:	e2b9      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8005fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
	break;
 8005fd2:	e2b2      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	@ 0x2d6
 8005fda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
	break;
 8005fe0:	e2ab      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8005fe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
	break;
 8005fee:	e2a4      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8005ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
	break;
 8005ffc:	e29d      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8006004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
	break;
 800600a:	e296      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8006012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	break;
 8006018:	e28f      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f8b3 3126 	ldrh.w	r3, [r3, #294]	@ 0x126
 8006020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	break;
 8006026:	e288      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 800602e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]
	break;
 8006034:	e281      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f8b3 312a 	ldrh.w	r3, [r3, #298]	@ 0x12a
 800603c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
	break;
 8006042:	e27a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800604a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]
	break;
 8006050:	e273      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8006058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
	break;
 800605e:	e26c      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8006066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	break;
 800606c:	e265      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8006074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
	break;
 800607a:	e25e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	break;
 8006088:	e257      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8006090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	break;
 8006096:	e250      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800609e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
	break;
 80060a4:	e249      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80060ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
	break;
 80060b2:	e242      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80060ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	break;
 80060c0:	e23b      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80060c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
	break;
 80060ce:	e234      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80060d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	break;
 80060dc:	e22d      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80060e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
	break;
 80060ea:	e226      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80060f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
	break;
 80060f8:	e21f      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006100:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
	break;
 8006106:	e218      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800610e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
	break;
 8006114:	e211      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800611c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	break;
 8006122:	e20a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612a:	f8b3 3398 	ldrh.w	r3, [r3, #920]	@ 0x398
 800612e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	break;
 8006134:	e201      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613c:	f8d3 339c 	ldr.w	r3, [r3, #924]	@ 0x39c
 8006140:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
	break;
 8006146:	e1f8      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8006152:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
	break;
 8006158:	e1ef      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006160:	f893 33a4 	ldrb.w	r3, [r3, #932]	@ 0x3a4
 8006164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	break;
 800616a:	e1e6      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006172:	f8d3 33a8 	ldr.w	r3, [r3, #936]	@ 0x3a8
 8006176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
	break;
 800617c:	e1dd      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006184:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 8006188:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
	break;
 800618e:	e1d4      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006196:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800619a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	601a      	str	r2, [r3, #0]
	break;
 80061a0:	e1cb      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 80061ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
	break;
 80061b2:	e1c2      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80061be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
	break;
 80061c4:	e1b9      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061cc:	f9b3 33be 	ldrsh.w	r3, [r3, #958]	@ 0x3be
 80061d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
	break;
 80061d6:	e1b0      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061de:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	@ 0x3c0
 80061e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]
	break;
 80061e8:	e1a7      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f0:	f893 33c2 	ldrb.w	r3, [r3, #962]	@ 0x3c2
 80061f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
	break;
 80061fa:	e19e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006202:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	e195      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006214:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
		*ptuning_parm_value = (int32_t)(
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
	break;
 800621e:	e18c      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800622a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	601a      	str	r2, [r3, #0]
	break;
 8006230:	e183      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006238:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800623c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	601a      	str	r2, [r3, #0]
	break;
 8006242:	e17a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800624a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800624e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
	break;
 8006254:	e171      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800625c:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 8006260:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
	break;
 8006266:	e168      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800626e:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 8006272:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
	break;
 8006278:	e15f      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006280:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	break;
 8006286:	e158      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800628e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
	break;
 8006294:	e151      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 800629c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
	break;
 80062a2:	e14a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80062aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
	break;
 80062b0:	e143      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 80062b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
	break;
 80062be:	e13c      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80062c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
	break;
 80062cc:	e135      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 80062d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
	break;
 80062da:	e12e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80062e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
	break;
 80062ec:	e125      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 80062f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
	break;
 80062fa:	e11e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	@ 0x186
 8006302:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
	break;
 8006308:	e117      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	@ 0x188
 8006310:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	break;
 8006316:	e110      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	@ 0x18a
 800631e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
	break;
 8006324:	e109      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	@ 0x18c
 800632c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
	break;
 8006332:	e102      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	@ 0x18e
 800633a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	break;
 8006340:	e0fb      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	@ 0x190
 8006348:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	break;
 800634e:	e0f4      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	@ 0x192
 8006356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
	break;
 800635c:	e0ed      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	@ 0x194
 8006364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
	break;
 800636a:	e0e6      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	@ 0x196
 8006372:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
	break;
 8006378:	e0df      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	@ 0x198
 8006380:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	break;
 8006386:	e0d8      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	@ 0x19a
 800638e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
	break;
 8006394:	e0d1      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	@ 0x19c
 800639c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
	break;
 80063a2:	e0ca      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	@ 0x19e
 80063aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
	break;
 80063b0:	e0c3      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	@ 0x1a0
 80063b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
	break;
 80063be:	e0bc      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	@ 0x1a2
 80063c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
	break;
 80063cc:	e0b5      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	@ 0x1a4
 80063d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
	break;
 80063da:	e0ae      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	@ 0x1a6
 80063e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
	break;
 80063e8:	e0a7      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	@ 0x1a8
 80063f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
	break;
 80063f6:	e0a0      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	@ 0x1aa
 80063fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
	break;
 8006404:	e099      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	@ 0x1ac
 800640c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
	break;
 8006412:	e092      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	@ 0x1ae
 800641a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
	break;
 8006420:	e08b      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	@ 0x1b0
 8006428:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
	break;
 800642e:	e084      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	@ 0x1b2
 8006436:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
	break;
 800643c:	e07d      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	@ 0x1b4
 8006444:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]
	break;
 800644a:	e076      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	@ 0x1b6
 8006452:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
	break;
 8006458:	e06f      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	@ 0x1b8
 8006460:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
	break;
 8006466:	e068      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 800646e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]
	break;
 8006474:	e061      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	@ 0x1bc
 800647c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
	break;
 8006482:	e05a      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 800648a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
	break;
 8006490:	e053      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 8006498:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
	break;
 800649e:	e04c      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 80064a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]
	break;
 80064ac:	e045      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 80064b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
	break;
 80064ba:	e03e      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 80064c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
	break;
 80064c8:	e037      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 80064d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
	break;
 80064d6:	e030      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 80064de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	601a      	str	r2, [r3, #0]
	break;
 80064e4:	e029      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 80064ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	break;
 80064f2:	e022      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 80064fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	601a      	str	r2, [r3, #0]
	break;
 8006500:	e01b      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 8006508:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
	break;
 800650e:	e014      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 8006516:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
	break;
 800651c:	e00d      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 8006524:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
	break;
 800652a:	e006      	b.n	800653a <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006532:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006534:	23fc      	movs	r3, #252	@ 0xfc
 8006536:	77fb      	strb	r3, [r7, #31]
	break;
 8006538:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800653a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3724      	adds	r7, #36	@ 0x24
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3318      	adds	r3, #24
 800655c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 800656a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3318      	adds	r3, #24
 800658a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394

	LOG_FUNCTION_END(status);

	return status;
 8006598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3318      	adds	r3, #24
 80065b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 80065c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3318      	adds	r3, #24
 80065e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 80065f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3318      	adds	r3, #24
 8006614:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396

	LOG_FUNCTION_END(status);

	return status;
 8006622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3318      	adds	r3, #24
 8006642:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395

	LOG_FUNCTION_END(status);

	return status;
 8006650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2208      	movs	r2, #8
 8006670:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	220b      	movs	r2, #11
 8006676:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800667e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006686:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800668e:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006696:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2212      	movs	r2, #18
 80066be:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	220f      	movs	r2, #15
 80066c4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 80066d2:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	220c      	movs	r2, #12
 80066d8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80066da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	895b      	ldrh	r3, [r3, #10]
 80066fc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	895b      	ldrh	r3, [r3, #10]
 800671a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2240      	movs	r2, #64	@ 0x40
 8006744:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	741a      	strb	r2, [r3, #16]
 8006768:	e002      	b.n	8006770 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2201      	movs	r2, #1
 800676e:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d114      	bne.n	80067a2 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800677c:	2b01      	cmp	r3, #1
 800677e:	d110      	bne.n	80067a2 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	7d9b      	ldrb	r3, [r3, #22]
 8006794:	f001 ff5e 	bl	8008654 <VL53LX_calc_range_ignore_threshold>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	831a      	strh	r2, [r3, #24]
 80067a0:	e002      	b.n	80067a8 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2200      	movs	r2, #0
 80067a6:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 80067ae:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2232      	movs	r2, #50	@ 0x32
 80067b4:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80067bc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	228c      	movs	r2, #140	@ 0x8c
 80067c2:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80067c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80067e2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80067ea:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2207      	movs	r2, #7
 80067f0:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80067f8:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006800:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8006808:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2246      	movs	r2, #70	@ 0x46
 800680e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006816:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	228c      	movs	r2, #140	@ 0x8c
 800681c:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006840:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006848:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006850:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006858:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2208      	movs	r2, #8
 800685e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2228      	movs	r2, #40	@ 0x28
 8006864:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2209      	movs	r2, #9
 800686a:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800686c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800688e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006896:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800689e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80068a6:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2210      	movs	r2, #16
 80068ac:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2208      	movs	r2, #8
 80068b2:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80068b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	6039      	str	r1, [r7, #0]
 80068ce:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2204      	movs	r2, #4
 80068d8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2202      	movs	r2, #2
 80068ea:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2250      	movs	r2, #80	@ 0x50
 80068f6:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2264      	movs	r2, #100	@ 0x64
 80068fc:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f241 023d 	movw	r2, #4157	@ 0x103d
 8006904:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2210      	movs	r2, #16
 800690a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2232      	movs	r2, #50	@ 0x32
 8006910:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2264      	movs	r2, #100	@ 0x64
 8006916:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2201      	movs	r2, #1
 800691c:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	22b4      	movs	r2, #180	@ 0xb4
 8006922:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8006930:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2208      	movs	r2, #8
 8006936:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2288      	movs	r2, #136	@ 0x88
 800693e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2208      	movs	r2, #8
 8006946:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006958:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2200      	movs	r2, #0
 800695e:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	79fa      	ldrb	r2, [r7, #7]
 8006964:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800696e:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2232      	movs	r2, #50	@ 0x32
 8006974:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800697c:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	228c      	movs	r2, #140	@ 0x8c
 8006982:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2250      	movs	r2, #80	@ 0x50
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2232      	movs	r2, #50	@ 0x32
 8006990:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	221e      	movs	r2, #30
 80069b2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	220e      	movs	r2, #14
 80069b8:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f642 7294 	movw	r2, #12180	@ 0x2f94
 80069c0:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	220e      	movs	r2, #14
 80069c6:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	220a      	movs	r2, #10
 80069cc:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2206      	movs	r2, #6
 80069d2:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	220e      	movs	r2, #14
 80069d8:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	220a      	movs	r2, #10
 80069de:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2206      	movs	r2, #6
 80069e4:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2209      	movs	r2, #9
 80069ea:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2205      	movs	r2, #5
 80069f0:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2203      	movs	r2, #3
 80069f6:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2206      	movs	r2, #6
 80069fc:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2206      	movs	r2, #6
 8006a02:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2206      	movs	r2, #6
 8006a08:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2221      	movs	r2, #33	@ 0x21
 8006a14:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	223c      	movs	r2, #60	@ 0x3c
 8006a26:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	223c      	movs	r2, #60	@ 0x3c
 8006a2c:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	223c      	movs	r2, #60	@ 0x3c
 8006a32:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2280      	movs	r2, #128	@ 0x80
 8006a38:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2280      	movs	r2, #128	@ 0x80
 8006a3e:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2280      	movs	r2, #128	@ 0x80
 8006a44:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2210      	movs	r2, #16
 8006a52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2202      	movs	r2, #2
 8006a72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a8c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f640 22be 	movw	r2, #2750	@ 0xabe
 8006a96:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	22fa      	movs	r2, #250	@ 0xfa
 8006a9e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006aa8:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006ab2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006abc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006ac6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8006ad0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006ada:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	22c8      	movs	r2, #200	@ 0xc8
 8006ae2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f640 1238 	movw	r2, #2360	@ 0x938
 8006aec:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f640 1247 	movw	r2, #2375	@ 0x947
 8006afe:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f640 4235 	movw	r2, #3125	@ 0xc35
 8006b08:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f241 2270 	movw	r2, #4720	@ 0x1270
 8006b12:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8006b1c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f241 228e 	movw	r2, #4750	@ 0x128e
 8006b26:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 8006b30:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	22fa      	movs	r2, #250	@ 0xfa
 8006b48:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8006b52:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8006b5c:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f241 1294 	movw	r2, #4500	@ 0x1194
 8006b66:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8006b70:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	22c8      	movs	r2, #200	@ 0xc8
 8006b78:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006ba2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8006bac:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8006bb6:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006bf8:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006c00:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006c08:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006c10:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c18:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006c20:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006c28:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006c30:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006c38:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006c40:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f241 7270 	movw	r2, #6000	@ 0x1770
 8006c48:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c50:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c58:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c60:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c68:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c70:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8006c78:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006c80:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006c88:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006c90:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006c9e:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8006ca6:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2206      	movs	r2, #6
 8006cc6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006cec:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2238      	movs	r2, #56	@ 0x38
 8006cf2:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2270      	movs	r2, #112	@ 0x70
 8006cfe:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2210      	movs	r2, #16
 8006d04:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2264      	movs	r2, #100	@ 0x64
 8006d0a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d12:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	220f      	movs	r2, #15
 8006d18:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2234      	movs	r2, #52	@ 0x34
 8006d1e:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	22c8      	movs	r2, #200	@ 0xc8
 8006d24:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006d2c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006d34:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006d5e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2211      	movs	r2, #17
 8006da0:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2202      	movs	r2, #2
 8006da6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2202      	movs	r2, #2
 8006db2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2208      	movs	r2, #8
 8006db8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	22ff      	movs	r2, #255	@ 0xff
 8006dfa:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	220b      	movs	r2, #11
 8006e34:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	220d      	movs	r2, #13
 8006e48:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8006e70:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2238      	movs	r2, #56	@ 0x38
 8006e7c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	22ff      	movs	r2, #255	@ 0xff
 8006e82:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	221a      	movs	r2, #26
 8006e94:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	22cc      	movs	r2, #204	@ 0xcc
 8006eac:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	220b      	movs	r2, #11
 8006eb2:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	22f5      	movs	r2, #245	@ 0xf5
 8006ebe:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2209      	movs	r2, #9
 8006ec4:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2278      	movs	r2, #120	@ 0x78
 8006ee0:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2221      	movs	r2, #33	@ 0x21
 8006ef8:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2243      	movs	r2, #67	@ 0x43
 8006efe:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2210      	movs	r2, #16
 8006f04:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2232      	movs	r2, #50	@ 0x32
 8006f0a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2254      	movs	r2, #84	@ 0x54
 8006f10:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2207      	movs	r2, #7
 8006f16:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2221      	movs	r2, #33	@ 0x21
 8006f1c:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2243      	movs	r2, #67	@ 0x43
 8006f22:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2210      	movs	r2, #16
 8006f28:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2243      	movs	r2, #67	@ 0x43
 8006f34:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2205      	movs	r2, #5
 8006f3a:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2207      	movs	r2, #7
 8006f46:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2221      	movs	r2, #33	@ 0x21
 8006f4c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2243      	movs	r2, #67	@ 0x43
 8006f52:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2210      	movs	r2, #16
 8006f58:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2232      	movs	r2, #50	@ 0x32
 8006f5e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2254      	movs	r2, #84	@ 0x54
 8006f64:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f6c:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f74:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	2205      	movs	r2, #5
 8006f80:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	2200      	movs	r2, #0
 8006f86:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8006f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8a:	220f      	movs	r2, #15
 8006f8c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8006f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f90:	220f      	movs	r2, #15
 8006f92:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	2208      	movs	r2, #8
 8006f98:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fba:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	220b      	movs	r2, #11
 8006fc6:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2209      	movs	r2, #9
 8006fcc:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	22c7      	movs	r2, #199	@ 0xc7
 8006ffc:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	22ff      	movs	r2, #255	@ 0xff
 8007002:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	22db      	movs	r2, #219	@ 0xdb
 8007008:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	2202      	movs	r2, #2
 800700e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	2200      	movs	r2, #0
 8007014:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	2201      	movs	r2, #1
 800701a:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	2201      	movs	r2, #1
 8007020:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	2221      	movs	r2, #33	@ 0x21
 8007026:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007028:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b090      	sub	sp, #64	@ 0x40
 800703c:	af0a      	add	r7, sp, #40	@ 0x28
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	68b8      	ldr	r0, [r7, #8]
 8007062:	f7ff fe70 	bl	8006d46 <VL53LX_preset_mode_standard_ranging>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800706a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d171      	bne.n	8007156 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007078:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	9308      	str	r3, [sp, #32]
 800707e:	2305      	movs	r3, #5
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	2304      	movs	r3, #4
 8007084:	9306      	str	r3, [sp, #24]
 8007086:	2303      	movs	r3, #3
 8007088:	9305      	str	r3, [sp, #20]
 800708a:	2302      	movs	r3, #2
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	2301      	movs	r3, #1
 8007090:	9303      	str	r3, [sp, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	9302      	str	r3, [sp, #8]
 8007096:	2304      	movs	r3, #4
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	2303      	movs	r3, #3
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	2302      	movs	r3, #2
 80070a0:	2201      	movs	r2, #1
 80070a2:	2100      	movs	r1, #0
 80070a4:	2007      	movs	r0, #7
 80070a6:	f000 ff6a 	bl	8007f7e <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	3302      	adds	r3, #2
 80070ae:	9308      	str	r3, [sp, #32]
 80070b0:	2305      	movs	r3, #5
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	2304      	movs	r3, #4
 80070b6:	9306      	str	r3, [sp, #24]
 80070b8:	2303      	movs	r3, #3
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	2302      	movs	r3, #2
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	2301      	movs	r3, #1
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	2300      	movs	r3, #0
 80070c6:	9302      	str	r3, [sp, #8]
 80070c8:	2304      	movs	r3, #4
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	2303      	movs	r3, #3
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2302      	movs	r3, #2
 80070d2:	2201      	movs	r2, #1
 80070d4:	2100      	movs	r1, #0
 80070d6:	2007      	movs	r0, #7
 80070d8:	f000 ffe1 	bl	800809e <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	2209      	movs	r2, #9
 80070e0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	220b      	movs	r2, #11
 80070e6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	2209      	movs	r2, #9
 80070ec:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	220b      	movs	r2, #11
 80070f2:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	2220      	movs	r2, #32
 80070fe:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	2200      	movs	r2, #0
 8007104:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	221a      	movs	r2, #26
 800710a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	2200      	movs	r2, #0
 8007110:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	2228      	movs	r2, #40	@ 0x28
 8007116:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2200      	movs	r2, #0
 800711c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	2221      	movs	r2, #33	@ 0x21
 8007122:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	22f5      	movs	r2, #245	@ 0xf5
 8007128:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2208      	movs	r2, #8
 800712e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2288      	movs	r2, #136	@ 0x88
 8007136:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9e6 	bl	8007516 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	229b      	movs	r2, #155	@ 0x9b
 800714e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	2226      	movs	r2, #38	@ 0x26
 8007154:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b090      	sub	sp, #64	@ 0x40
 8007166:	af0a      	add	r7, sp, #40	@ 0x28
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	9302      	str	r3, [sp, #8]
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff ff52 	bl	8007038 <VL53LX_preset_mode_histogram_ranging>
 8007194:	4603      	mov	r3, r0
 8007196:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d178      	bne.n	8007292 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	9308      	str	r3, [sp, #32]
 80071a4:	2305      	movs	r3, #5
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	2304      	movs	r3, #4
 80071aa:	9306      	str	r3, [sp, #24]
 80071ac:	2303      	movs	r3, #3
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	2302      	movs	r3, #2
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	2301      	movs	r3, #1
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	2300      	movs	r3, #0
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	2304      	movs	r3, #4
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	2303      	movs	r3, #3
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	2302      	movs	r3, #2
 80071c6:	2201      	movs	r2, #1
 80071c8:	2100      	movs	r1, #0
 80071ca:	2007      	movs	r0, #7
 80071cc:	f000 fed7 	bl	8007f7e <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	3302      	adds	r3, #2
 80071d4:	9308      	str	r3, [sp, #32]
 80071d6:	2305      	movs	r3, #5
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	2304      	movs	r3, #4
 80071dc:	9306      	str	r3, [sp, #24]
 80071de:	2303      	movs	r3, #3
 80071e0:	9305      	str	r3, [sp, #20]
 80071e2:	2302      	movs	r3, #2
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	2301      	movs	r3, #1
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	2300      	movs	r3, #0
 80071ec:	9302      	str	r3, [sp, #8]
 80071ee:	2304      	movs	r3, #4
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	2303      	movs	r3, #3
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	2302      	movs	r3, #2
 80071f8:	2201      	movs	r2, #1
 80071fa:	2100      	movs	r1, #0
 80071fc:	2007      	movs	r0, #7
 80071fe:	f000 ff4e 	bl	800809e <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f982 	bl	8007516 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	2209      	movs	r2, #9
 8007216:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	220b      	movs	r2, #11
 800721c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	2221      	movs	r2, #33	@ 0x21
 8007228:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	2200      	movs	r2, #0
 800722e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	221b      	movs	r2, #27
 8007234:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	2200      	movs	r2, #0
 800723a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	2229      	movs	r2, #41	@ 0x29
 8007240:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	2200      	movs	r2, #0
 8007246:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	2222      	movs	r2, #34	@ 0x22
 800724c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2209      	movs	r2, #9
 8007252:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	22f5      	movs	r2, #245	@ 0xf5
 8007258:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	2209      	movs	r2, #9
 800725e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	220b      	movs	r2, #11
 8007264:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800726e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007270:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2208      	movs	r2, #8
 800727a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2288      	movs	r2, #136	@ 0x88
 8007282:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	229b      	movs	r2, #155	@ 0x9b
 800728a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	2226      	movs	r2, #38	@ 0x26
 8007290:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b090      	sub	sp, #64	@ 0x40
 80072a2:	af0a      	add	r7, sp, #40	@ 0x28
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff feb4 	bl	8007038 <VL53LX_preset_mode_histogram_ranging>
 80072d0:	4603      	mov	r3, r0
 80072d2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80072d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d178      	bne.n	80073ce <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	9308      	str	r3, [sp, #32]
 80072e0:	2303      	movs	r3, #3
 80072e2:	9307      	str	r3, [sp, #28]
 80072e4:	2302      	movs	r3, #2
 80072e6:	9306      	str	r3, [sp, #24]
 80072e8:	2301      	movs	r3, #1
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	2302      	movs	r3, #2
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	2301      	movs	r3, #1
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	2300      	movs	r3, #0
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	2302      	movs	r3, #2
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2302      	movs	r3, #2
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	2201      	movs	r2, #1
 8007304:	2100      	movs	r1, #0
 8007306:	2007      	movs	r0, #7
 8007308:	f000 fe39 	bl	8007f7e <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	3302      	adds	r3, #2
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	2303      	movs	r3, #3
 8007314:	9307      	str	r3, [sp, #28]
 8007316:	2302      	movs	r3, #2
 8007318:	9306      	str	r3, [sp, #24]
 800731a:	2301      	movs	r3, #1
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	2302      	movs	r3, #2
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	2301      	movs	r3, #1
 8007324:	9303      	str	r3, [sp, #12]
 8007326:	2300      	movs	r3, #0
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	2302      	movs	r3, #2
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	2302      	movs	r3, #2
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2301      	movs	r3, #1
 8007334:	2201      	movs	r2, #1
 8007336:	2100      	movs	r1, #0
 8007338:	2007      	movs	r0, #7
 800733a:	f000 feb0 	bl	800809e <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8e4 	bl	8007516 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	2205      	movs	r2, #5
 8007352:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	2207      	movs	r2, #7
 8007358:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	2236      	movs	r2, #54	@ 0x36
 8007364:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	2200      	movs	r2, #0
 800736a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	2228      	movs	r2, #40	@ 0x28
 8007370:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	2200      	movs	r2, #0
 8007376:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	2244      	movs	r2, #68	@ 0x44
 800737c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	2200      	movs	r2, #0
 8007382:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	2233      	movs	r2, #51	@ 0x33
 8007388:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2205      	movs	r2, #5
 800738e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	22f5      	movs	r2, #245	@ 0xf5
 8007394:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	2205      	movs	r2, #5
 800739a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	2207      	movs	r2, #7
 80073a0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80073a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a4:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2208      	movs	r2, #8
 80073b6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2248      	movs	r2, #72	@ 0x48
 80073be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	229b      	movs	r2, #155	@ 0x9b
 80073c6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	2226      	movs	r2, #38	@ 0x26
 80073cc:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80073ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b090      	sub	sp, #64	@ 0x40
 80073de:	af0a      	add	r7, sp, #40	@ 0x28
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	9304      	str	r3, [sp, #16]
 80073f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	9302      	str	r3, [sp, #8]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff fe16 	bl	8007038 <VL53LX_preset_mode_histogram_ranging>
 800740c:	4603      	mov	r3, r0
 800740e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d178      	bne.n	800750a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	9308      	str	r3, [sp, #32]
 800741c:	2302      	movs	r3, #2
 800741e:	9307      	str	r3, [sp, #28]
 8007420:	2302      	movs	r3, #2
 8007422:	9306      	str	r3, [sp, #24]
 8007424:	2301      	movs	r3, #1
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	2301      	movs	r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	2301      	movs	r3, #1
 800742e:	9303      	str	r3, [sp, #12]
 8007430:	2300      	movs	r3, #0
 8007432:	9302      	str	r3, [sp, #8]
 8007434:	2301      	movs	r3, #1
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	2301      	movs	r3, #1
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2301      	movs	r3, #1
 800743e:	2200      	movs	r2, #0
 8007440:	2107      	movs	r1, #7
 8007442:	2007      	movs	r0, #7
 8007444:	f000 fd9b 	bl	8007f7e <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	3302      	adds	r3, #2
 800744c:	9308      	str	r3, [sp, #32]
 800744e:	2302      	movs	r3, #2
 8007450:	9307      	str	r3, [sp, #28]
 8007452:	2302      	movs	r3, #2
 8007454:	9306      	str	r3, [sp, #24]
 8007456:	2301      	movs	r3, #1
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	2301      	movs	r3, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	2301      	movs	r3, #1
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	2300      	movs	r3, #0
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	2301      	movs	r3, #1
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	2301      	movs	r3, #1
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	2301      	movs	r3, #1
 8007470:	2200      	movs	r2, #0
 8007472:	2107      	movs	r1, #7
 8007474:	2007      	movs	r0, #7
 8007476:	f000 fe12 	bl	800809e <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f846 	bl	8007516 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2203      	movs	r2, #3
 800748e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2205      	movs	r2, #5
 8007494:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	2252      	movs	r2, #82	@ 0x52
 80074a0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	2200      	movs	r2, #0
 80074a6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2237      	movs	r2, #55	@ 0x37
 80074ac:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2200      	movs	r2, #0
 80074b2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	2266      	movs	r2, #102	@ 0x66
 80074b8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	2200      	movs	r2, #0
 80074be:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	2244      	movs	r2, #68	@ 0x44
 80074c4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2203      	movs	r2, #3
 80074ca:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	22f5      	movs	r2, #245	@ 0xf5
 80074d0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	2203      	movs	r2, #3
 80074d6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	2205      	movs	r2, #5
 80074dc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80074de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e0:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2208      	movs	r2, #8
 80074f2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2228      	movs	r2, #40	@ 0x28
 80074fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	22bb      	movs	r2, #187	@ 0xbb
 8007502:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	2226      	movs	r2, #38	@ 0x26
 8007508:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800750a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	7a12      	ldrb	r2, [r2, #8]
 8007560:	4413      	add	r3, r2
 8007562:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	7892      	ldrb	r2, [r2, #2]
 80075a4:	4413      	add	r3, r2
 80075a6:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	7912      	ldrb	r2, [r2, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	7a12      	ldrb	r2, [r2, #8]
 800763c:	4413      	add	r3, r2
 800763e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	7892      	ldrb	r2, [r2, #2]
 8007678:	4413      	add	r3, r2
 800767a:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	7912      	ldrb	r2, [r2, #4]
 800768c:	4413      	add	r3, r2
 800768e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3318      	adds	r3, #24
 80076bc:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3318      	adds	r3, #24
 80076f8:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	332c      	adds	r3, #44	@ 0x2c
 80076fe:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2200      	movs	r2, #0
 800770a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2202      	movs	r2, #2
 8007710:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2200      	movs	r2, #0
 8007716:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2200      	movs	r2, #0
 8007728:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2202      	movs	r2, #2
 800772e:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	735a      	strb	r2, [r3, #13]

}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3318      	adds	r3, #24
 8007758:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	332c      	adds	r3, #44	@ 0x2c
 800775e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d115      	bne.n	800779a <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2203      	movs	r2, #3
 8007772:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2202      	movs	r2, #2
 800778a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	735a      	strb	r2, [r3, #13]
 8007798:	e0be      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	7a1b      	ldrb	r3, [r3, #8]
 800779e:	2bff      	cmp	r3, #255	@ 0xff
 80077a0:	d103      	bne.n	80077aa <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2280      	movs	r2, #128	@ 0x80
 80077a6:	721a      	strb	r2, [r3, #8]
 80077a8:	e005      	b.n	80077b6 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	7a1b      	ldrb	r3, [r3, #8]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	7a19      	ldrb	r1, [r3, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f103 0209 	add.w	r2, r3, #9
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	330a      	adds	r3, #10
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f002 fd7d 	bl	800a2c4 <VL53LX_update_internal_stream_counters>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	7adb      	ldrb	r3, [r3, #11]
 80077d2:	f083 0302 	eor.w	r3, r3, #2
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	79db      	ldrb	r3, [r3, #7]
 80077e0:	3b03      	subs	r3, #3
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	f200 8082 	bhi.w	80078ec <VL53LX_update_ll_driver_rd_state+0x1a4>
 80077e8:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <VL53LX_update_ll_driver_rd_state+0xa8>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007809 	.word	0x08007809
 80077f4:	080078ed 	.word	0x080078ed
 80077f8:	080078ed 	.word	0x080078ed
 80077fc:	0800785b 	.word	0x0800785b
 8007800:	08007891 	.word	0x08007891
 8007804:	080078bb 	.word	0x080078bb

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f893 335e 	ldrb.w	r3, [r3, #862]	@ 0x35e
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd03      	ble.n	800781e <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2206      	movs	r2, #6
 800781a:	71da      	strb	r2, [r3, #7]
 800781c:	e00d      	b.n	800783a <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 8007828:	429a      	cmp	r2, r3
 800782a:	d303      	bcc.n	8007834 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2208      	movs	r2, #8
 8007830:	71da      	strb	r2, [r3, #7]
 8007832:	e002      	b.n	800783a <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2207      	movs	r2, #7
 8007838:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	735a      	strb	r2, [r3, #13]

			break;
 8007858:	e05e      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 800787c:	429a      	cmp	r2, r3
 800787e:	d303      	bcc.n	8007888 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2208      	movs	r2, #8
 8007884:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007886:	e047      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2207      	movs	r2, #7
 800788c:	71da      	strb	r2, [r3, #7]
			break;
 800788e:	e043      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7b5b      	ldrb	r3, [r3, #13]
 8007894:	3301      	adds	r3, #1
 8007896:	b2da      	uxtb	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d303      	bcc.n	80078b2 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2208      	movs	r2, #8
 80078ae:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80078b0:	e032      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2207      	movs	r2, #7
 80078b6:	71da      	strb	r2, [r3, #7]
			break;
 80078b8:	e02e      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7b1b      	ldrb	r3, [r3, #12]
 80078c4:	f083 0301 	eor.w	r3, r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80078d8:	429a      	cmp	r2, r3
 80078da:	d303      	bcc.n	80078e4 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2208      	movs	r2, #8
 80078e0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 80078e2:	e019      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2207      	movs	r2, #7
 80078e8:	71da      	strb	r2, [r3, #7]
			break;
 80078ea:	e015      	b.n	8007918 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2203      	movs	r2, #3
 80078f0:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2202      	movs	r2, #2
 8007908:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	735a      	strb	r2, [r3, #13]
			break;
 8007916:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007918:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007924:	b480      	push	{r7}
 8007926:	b08d      	sub	sp, #52	@ 0x34
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 800792c:	2300      	movs	r3, #0
 800792e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3318      	adds	r3, #24
 8007936:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	332c      	adds	r3, #44	@ 0x2c
 8007944:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800794c:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8007954:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800795c:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798a:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 800798e:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
	histogram_mode =
 800799c:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80079a2:	111b      	asrs	r3, r3, #4
 80079a4:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 80079ae:	7c7b      	ldrb	r3, [r7, #17]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80079ba:	111b      	asrs	r3, r3, #4
 80079bc:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 80079c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c8:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d04e      	beq.n	8007a72 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	79db      	ldrb	r3, [r3, #7]
 80079d8:	2b06      	cmp	r3, #6
 80079da:	d109      	bne.n	80079f0 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 80079dc:	7c7b      	ldrb	r3, [r7, #17]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d14a      	bne.n	8007a78 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 80079e2:	7cfb      	ldrb	r3, [r7, #19]
 80079e4:	2b12      	cmp	r3, #18
 80079e6:	d047      	beq.n	8007a78 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 80079e8:	23ef      	movs	r3, #239	@ 0xef
 80079ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80079ee:	e043      	b.n	8007a78 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	7a1b      	ldrb	r3, [r3, #8]
 80079f4:	7cba      	ldrb	r2, [r7, #18]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d002      	beq.n	8007a00 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 80079fa:	23ee      	movs	r3, #238	@ 0xee
 80079fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	7adb      	ldrb	r3, [r3, #11]
 8007a04:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d002      	beq.n	8007a12 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007a0c:	23ed      	movs	r3, #237	@ 0xed
 8007a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	7b5b      	ldrb	r3, [r3, #13]
 8007a16:	4619      	mov	r1, r3
		expected_stream_count =
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	3302      	adds	r3, #2
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	7b5b      	ldrb	r3, [r3, #13]
 8007a2e:	4619      	mov	r1, r3
		expected_gph_id =
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	460b      	mov	r3, r1
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007a42:	7c3a      	ldrb	r2, [r7, #16]
 8007a44:	7cbb      	ldrb	r3, [r7, #18]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d00a      	beq.n	8007a60 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <VL53LX_check_ll_driver_rd_state+0x136>
 8007a54:	7cbb      	ldrb	r3, [r7, #18]
 8007a56:	2bff      	cmp	r3, #255	@ 0xff
 8007a58:	d002      	beq.n	8007a60 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007a5a:	23ec      	movs	r3, #236	@ 0xec
 8007a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007a60:	7bfa      	ldrb	r2, [r7, #15]
 8007a62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d005      	beq.n	8007a76 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007a6a:	23eb      	movs	r3, #235	@ 0xeb
 8007a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007a70:	e002      	b.n	8007a78 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007a72:	bf00      	nop
 8007a74:	e000      	b.n	8007a78 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007a76:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007a78:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3734      	adds	r7, #52	@ 0x34
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007a90:	2300      	movs	r3, #0
 8007a92:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3318      	adds	r3, #24
 8007a98:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8007aa0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	332c      	adds	r3, #44	@ 0x2c
 8007aa6:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007aae:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f893 3364 	ldrb.w	r3, [r3, #868]	@ 0x364
 8007ab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d11b      	bne.n	8007af6 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2200      	movs	r2, #0
 8007ace:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	773b      	strb	r3, [r7, #28]
 8007af4:	e0b1      	b.n	8007c5a <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	799b      	ldrb	r3, [r3, #6]
 8007b00:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2bff      	cmp	r3, #255	@ 0xff
 8007b0e:	d103      	bne.n	8007b18 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2280      	movs	r2, #128	@ 0x80
 8007b14:	705a      	strb	r2, [r3, #1]
 8007b16:	e005      	b.n	8007b24 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	7859      	ldrb	r1, [r3, #1]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3303      	adds	r3, #3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f002 fbc7 	bl	800a2c4 <VL53LX_update_internal_stream_counters>
 8007b36:	4603      	mov	r3, r0
 8007b38:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	791b      	ldrb	r3, [r3, #4]
 8007b3e:	f083 0302 	eor.w	r3, r3, #2
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b05      	cmp	r3, #5
 8007b4e:	d053      	beq.n	8007bf8 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	dc69      	bgt.n	8007c28 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d002      	beq.n	8007b5e <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d02d      	beq.n	8007bb8 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007b5c:	e064      	b.n	8007c28 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2201      	movs	r2, #1
 8007b62:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d909      	bls.n	8007b86 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2200      	movs	r2, #0
 8007b76:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	795b      	ldrb	r3, [r3, #5]
 8007b7c:	f083 0301 	eor.w	r3, r3, #1
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	70da      	strb	r2, [r3, #3]
 8007ba2:	e005      	b.n	8007bb0 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2201      	movs	r2, #1
 8007bae:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007bb6:	e050      	b.n	8007c5a <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	799b      	ldrb	r3, [r3, #6]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d940      	bls.n	8007c54 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	795b      	ldrb	r3, [r3, #5]
 8007bdc:	f083 0301 	eor.w	r3, r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d031      	beq.n	8007c54 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007bf6:	e02d      	b.n	8007c54 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	799b      	ldrb	r3, [r3, #6]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d922      	bls.n	8007c58 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2200      	movs	r2, #0
 8007c16:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	795b      	ldrb	r3, [r3, #5]
 8007c1c:	f083 0301 	eor.w	r3, r3, #1
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007c26:	e017      	b.n	8007c58 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2200      	movs	r2, #0
 8007c32:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2200      	movs	r2, #0
 8007c38:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2202      	movs	r2, #2
 8007c44:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	719a      	strb	r2, [r3, #6]
			break;
 8007c52:	e002      	b.n	8007c5a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007c54:	bf00      	nop
 8007c56:	e000      	b.n	8007c5a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007c58:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11d      	bne.n	8007ca0 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007c64:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007c66:	7f3b      	ldrb	r3, [r7, #28]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b2d8      	uxtb	r0, r3
 8007c6c:	68f9      	ldr	r1, [r7, #12]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	440b      	add	r3, r1
 8007c78:	3302      	adds	r3, #2
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	7b5b      	ldrb	r3, [r3, #13]
 8007c82:	4619      	mov	r1, r3
 8007c84:	7f7b      	ldrb	r3, [r7, #29]
 8007c86:	f083 0302 	eor.w	r3, r3, #2
 8007c8a:	b2d8      	uxtb	r0, r3
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	4413      	add	r3, r2
 8007c98:	3303      	adds	r3, #3
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e013      	b.n	8007cc8 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007ca0:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	440b      	add	r3, r1
 8007cae:	3302      	adds	r3, #2
 8007cb0:	7f3a      	ldrb	r2, [r7, #28]
 8007cb2:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007cb4:	7fba      	ldrb	r2, [r7, #30]
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	440b      	add	r3, r1
 8007cc2:	3303      	adds	r3, #3
 8007cc4:	7f7a      	ldrb	r2, [r7, #29]
 8007cc6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007cc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7c1a      	ldrb	r2, [r3, #16]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7c52      	ldrb	r2, [r2, #17]
 8007cee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c92      	ldrb	r2, [r2, #18]
 8007cf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	3303      	adds	r3, #3
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	7cd2      	ldrb	r2, [r2, #19]
 8007d02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	3304      	adds	r3, #4
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7d12      	ldrb	r2, [r2, #20]
 8007d0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	3305      	adds	r3, #5
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	7d52      	ldrb	r2, [r2, #21]
 8007d16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	3306      	adds	r3, #6
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7d92      	ldrb	r2, [r2, #22]
 8007d20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3307      	adds	r3, #7
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	7dd2      	ldrb	r2, [r2, #23]
 8007d2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7e12      	ldrb	r2, [r2, #24]
 8007d34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	3309      	adds	r3, #9
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	7e52      	ldrb	r2, [r2, #25]
 8007d3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	330a      	adds	r3, #10
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7e92      	ldrb	r2, [r2, #26]
 8007d48:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	330b      	adds	r3, #11
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	7ed2      	ldrb	r2, [r2, #27]
 8007d52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	7f12      	ldrb	r2, [r2, #28]
 8007d5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	330d      	adds	r3, #13
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	7f52      	ldrb	r2, [r2, #29]
 8007d66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	330e      	adds	r3, #14
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7f92      	ldrb	r2, [r2, #30]
 8007d70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	330f      	adds	r3, #15
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	7fd2      	ldrb	r2, [r2, #31]
 8007d7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	3310      	adds	r3, #16
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3311      	adds	r3, #17
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007d92:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3312      	adds	r3, #18
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8007d9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	3313      	adds	r3, #19
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007daa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	3314      	adds	r3, #20
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007db6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	3315      	adds	r3, #21
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007dc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	3316      	adds	r3, #22
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007dce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	3317      	adds	r3, #23
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007dda:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	3318      	adds	r3, #24
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007de6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	3319      	adds	r3, #25
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007df2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	331a      	adds	r3, #26
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007dfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	331b      	adds	r3, #27
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007e0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	331c      	adds	r3, #28
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007e16:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	331d      	adds	r3, #29
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007e22:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	331e      	adds	r3, #30
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007e2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	331f      	adds	r3, #31
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007e3a:	701a      	strb	r2, [r3, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	22ff      	movs	r2, #255	@ 0xff
 8007e54:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	22ff      	movs	r2, #255	@ 0xff
 8007e5a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	22ff      	movs	r2, #255	@ 0xff
 8007e60:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	22ff      	movs	r2, #255	@ 0xff
 8007e66:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e6e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e76:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e7e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e86:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e8e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e96:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e9e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ea6:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007eae:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007eb6:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ebe:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ec6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ece:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ed6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ede:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ee6:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007eee:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ef6:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007efe:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	22ff      	movs	r2, #255	@ 0xff
 8007f04:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2205      	movs	r2, #5
 8007f28:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	79fa      	ldrb	r2, [r7, #7]
 8007f2e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e017      	b.n	8007f66 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	4413      	add	r3, r2
 8007f44:	3304      	adds	r3, #4
 8007f46:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2203      	movs	r2, #3
 8007f52:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2204      	movs	r2, #4
 8007f58:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	3301      	adds	r3, #1
 8007f64:	73fb      	strb	r3, [r7, #15]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	7bfa      	ldrb	r2, [r7, #15]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d3e2      	bcc.n	8007f36 <V53L1_init_zone_results_structure+0x22>
	}
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8007f7e:	b490      	push	{r4, r7}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	4604      	mov	r4, r0
 8007f86:	4608      	mov	r0, r1
 8007f88:	4611      	mov	r1, r2
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	71fb      	strb	r3, [r7, #7]
 8007f90:	4603      	mov	r3, r0
 8007f92:	71bb      	strb	r3, [r7, #6]
 8007f94:	460b      	mov	r3, r1
 8007f96:	717b      	strb	r3, [r7, #5]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8007f9c:	79bb      	ldrb	r3, [r7, #6]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8007fac:	793b      	ldrb	r3, [r7, #4]
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	797b      	ldrb	r3, [r7, #5]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8007fbc:	7d3b      	ldrb	r3, [r7, #20]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	7c3b      	ldrb	r3, [r7, #16]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8007fcc:	7f3b      	ldrb	r3, [r7, #28]
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	7e3b      	ldrb	r3, [r7, #24]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8007fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fe8:	4413      	add	r3, r2
 8007fea:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007ff0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ffc:	4413      	add	r3, r2
 8007ffe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	f897 2020 	ldrb.w	r2, [r7, #32]
 800802a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800802c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	b2da      	uxtb	r2, r3
 8008034:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008038:	4413      	add	r3, r2
 800803a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008042:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008046:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	2200      	movs	r2, #0
 800804c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008074:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008084:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800808c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]

}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bc90      	pop	{r4, r7}
 800809c:	4770      	bx	lr

0800809e <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800809e:	b490      	push	{r4, r7}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	4623      	mov	r3, r4
 80080ae:	71fb      	strb	r3, [r7, #7]
 80080b0:	4603      	mov	r3, r0
 80080b2:	71bb      	strb	r3, [r7, #6]
 80080b4:	460b      	mov	r3, r1
 80080b6:	717b      	strb	r3, [r7, #5]
 80080b8:	4613      	mov	r3, r2
 80080ba:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80080bc:	79bb      	ldrb	r3, [r7, #6]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4413      	add	r3, r2
 80080c6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80080cc:	793b      	ldrb	r3, [r7, #4]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	797b      	ldrb	r3, [r7, #5]
 80080d4:	4413      	add	r3, r2
 80080d6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80080dc:	7d3b      	ldrb	r3, [r7, #20]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	7c3b      	ldrb	r3, [r7, #16]
 80080e4:	4413      	add	r3, r2
 80080e6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80080f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f6:	789a      	ldrb	r2, [r3, #2]
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	78da      	ldrb	r2, [r3, #3]
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800810c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810e:	789a      	ldrb	r2, [r3, #2]
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	78da      	ldrb	r2, [r3, #3]
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	791a      	ldrb	r2, [r3, #4]
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	f897 2020 	ldrb.w	r2, [r7, #32]
 800812a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800812c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	b2da      	uxtb	r2, r3
 8008134:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008138:	4413      	add	r3, r2
 800813a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008146:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	2200      	movs	r2, #0
 800814c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800814e:	7f3b      	ldrb	r3, [r7, #28]
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	b2da      	uxtb	r2, r3
 8008154:	7e3b      	ldrb	r3, [r7, #24]
 8008156:	4413      	add	r3, r2
 8008158:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800815e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	b2da      	uxtb	r2, r3
 8008166:	f897 3020 	ldrb.w	r3, [r7, #32]
 800816a:	4413      	add	r3, r2
 800816c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008172:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	b2da      	uxtb	r2, r3
 800817a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800817e:	4413      	add	r3, r2
 8008180:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	7bda      	ldrb	r2, [r3, #15]
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	7c1a      	ldrb	r2, [r3, #16]
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	7c5a      	ldrb	r2, [r3, #17]
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081a4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80081a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081ac:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc90      	pop	{r4, r7}
 80081bc:	4770      	bx	lr

080081be <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80081be:	b480      	push	{r7}
 80081c0:	b087      	sub	sp, #28
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	460b      	mov	r3, r1
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	220c      	movs	r2, #12
 80081e6:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80081e8:	897b      	ldrh	r3, [r7, #10]
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800821e:	2300      	movs	r3, #0
 8008220:	82fb      	strh	r3, [r7, #22]
 8008222:	e015      	b.n	8008250 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8008224:	8afa      	ldrh	r2, [r7, #22]
 8008226:	897b      	ldrh	r3, [r7, #10]
 8008228:	429a      	cmp	r2, r3
 800822a:	d207      	bcs.n	800823c <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800822c:	8afb      	ldrh	r3, [r7, #22]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	3302      	adds	r3, #2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	605a      	str	r2, [r3, #4]
 800823a:	e006      	b.n	800824a <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800823c:	8afb      	ldrh	r3, [r7, #22]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	3302      	adds	r3, #2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	2200      	movs	r2, #0
 8008248:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800824a:	8afb      	ldrh	r3, [r7, #22]
 800824c:	3301      	adds	r3, #1
 800824e:	82fb      	strh	r3, [r7, #22]
 8008250:	8afb      	ldrh	r3, [r7, #22]
 8008252:	2b0b      	cmp	r3, #11
 8008254:	d9e6      	bls.n	8008224 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	603a      	str	r2, [r7, #0]
 800826e:	80fb      	strh	r3, [r7, #6]
 8008270:	460b      	mov	r3, r1
 8008272:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800827c:	88fb      	ldrh	r3, [r7, #6]
 800827e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008280:	2300      	movs	r3, #0
 8008282:	81fb      	strh	r3, [r7, #14]
 8008284:	e00e      	b.n	80082a4 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008286:	88ba      	ldrh	r2, [r7, #4]
 8008288:	89fb      	ldrh	r3, [r7, #14]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	4413      	add	r3, r2
 8008292:	89ba      	ldrh	r2, [r7, #12]
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008298:	89bb      	ldrh	r3, [r7, #12]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800829e:	89fb      	ldrh	r3, [r7, #14]
 80082a0:	3301      	adds	r3, #1
 80082a2:	81fb      	strh	r3, [r7, #14]
 80082a4:	89fa      	ldrh	r2, [r7, #14]
 80082a6:	88bb      	ldrh	r3, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3ec      	bcc.n	8008286 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	4603      	mov	r3, r0
 80082c2:	6039      	str	r1, [r7, #0]
 80082c4:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80082c6:	2300      	movs	r3, #0
 80082c8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80082ca:	e00b      	b.n	80082e4 <VL53LX_i2c_decode_uint16_t+0x2a>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80082cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	b21a      	sxth	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	1c59      	adds	r1, r3, #1
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b21b      	sxth	r3, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	1e5a      	subs	r2, r3, #1
 80082e8:	80fa      	strh	r2, [r7, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1ee      	bne.n	80082cc <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80082ee:	89fb      	ldrh	r3, [r7, #14]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	603a      	str	r2, [r7, #0]
 8008306:	80fb      	strh	r3, [r7, #6]
 8008308:	460b      	mov	r3, r1
 800830a:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008318:	2300      	movs	r3, #0
 800831a:	81fb      	strh	r3, [r7, #14]
 800831c:	e00f      	b.n	800833e <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800831e:	88ba      	ldrh	r2, [r7, #4]
 8008320:	89fb      	ldrh	r3, [r7, #14]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4413      	add	r3, r2
 800832a:	89ba      	ldrh	r2, [r7, #12]
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008330:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008334:	121b      	asrs	r3, r3, #8
 8008336:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008338:	89fb      	ldrh	r3, [r7, #14]
 800833a:	3301      	adds	r3, #1
 800833c:	81fb      	strh	r3, [r7, #14]
 800833e:	89fa      	ldrh	r2, [r7, #14]
 8008340:	88bb      	ldrh	r3, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d3eb      	bcc.n	800831e <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	6039      	str	r1, [r7, #0]
 800835e:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008360:	2300      	movs	r3, #0
 8008362:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	b25b      	sxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	da0d      	bge.n	800838a <VL53LX_i2c_decode_int16_t+0x36>
		value = 0xFFFF;
 800836e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008372:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008374:	e009      	b.n	800838a <VL53LX_i2c_decode_int16_t+0x36>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008376:	89fb      	ldrh	r3, [r7, #14]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	b21a      	sxth	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	1c59      	adds	r1, r3, #1
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	b21b      	sxth	r3, r3
 8008386:	4313      	orrs	r3, r2
 8008388:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	1e5a      	subs	r2, r3, #1
 800838e:	80fa      	strh	r2, [r7, #6]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f0      	bne.n	8008376 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	460b      	mov	r3, r1
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 80083be:	2300      	movs	r3, #0
 80083c0:	82fb      	strh	r3, [r7, #22]
 80083c2:	e00e      	b.n	80083e2 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80083c4:	897a      	ldrh	r2, [r7, #10]
 80083c6:	8afb      	ldrh	r3, [r7, #22]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4413      	add	r3, r2
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	0a1b      	lsrs	r3, r3, #8
 80083da:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80083dc:	8afb      	ldrh	r3, [r7, #22]
 80083de:	3301      	adds	r3, #1
 80083e0:	82fb      	strh	r3, [r7, #22]
 80083e2:	8afa      	ldrh	r2, [r7, #22]
 80083e4:	897b      	ldrh	r3, [r7, #10]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d3ec      	bcc.n	80083c4 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	6039      	str	r1, [r7, #0]
 8008402:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008408:	e007      	b.n	800841a <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	021a      	lsls	r2, r3, #8
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	1c59      	adds	r1, r3, #1
 8008412:	6039      	str	r1, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	1e5a      	subs	r2, r3, #1
 800841e:	80fa      	strh	r2, [r7, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1f2      	bne.n	800840a <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8008424:	68fb      	ldr	r3, [r7, #12]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	6039      	str	r1, [r7, #0]
 800843c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	b25b      	sxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	da0b      	bge.n	8008464 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800844c:	f04f 33ff 	mov.w	r3, #4294967295
 8008450:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008452:	e007      	b.n	8008464 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	021a      	lsls	r2, r3, #8
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	1c59      	adds	r1, r3, #1
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	1e5a      	subs	r2, r3, #1
 8008468:	80fa      	strh	r2, [r7, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f2      	bne.n	8008454 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800848c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d107      	bne.n	80084a4 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	461a      	mov	r2, r3
 8008498:	2127      	movs	r1, #39	@ 0x27
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f009 f854 	bl	8011548 <VL53LX_WrByte>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 80084a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3318      	adds	r3, #24
 80084c4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	status = VL53LX_WrByte(
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 80084d4:	461a      	mov	r2, r3
 80084d6:	2185      	movs	r1, #133	@ 0x85
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f009 f835 	bl	8011548 <VL53LX_WrByte>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80084e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80084fa:	2101      	movs	r1, #1
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff ffd7 	bl	80084b0 <VL53LX_set_firmware_enable_register>
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800851e:	2100      	movs	r1, #0
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ffc5 	bl	80084b0 <VL53LX_set_firmware_enable_register>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800852a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3318      	adds	r3, #24
 800854a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	status = VL53LX_WrByte(
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 800855a:	461a      	mov	r2, r3
 800855c:	2183      	movs	r1, #131	@ 0x83
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f008 fff2 	bl	8011548 <VL53LX_WrByte>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008580:	2101      	movs	r1, #1
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff ffd7 	bl	8008536 <VL53LX_set_powerforce_register>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800858c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80085a4:	2100      	movs	r1, #0
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff ffc5 	bl	8008536 <VL53LX_set_powerforce_register>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80085b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3318      	adds	r3, #24
 80085cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363

	status = VL53LX_WrByte(
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 80085dc:	461a      	mov	r2, r3
 80085de:	2186      	movs	r1, #134	@ 0x86
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f008 ffb1 	bl	8011548 <VL53LX_WrByte>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 80085ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4603      	mov	r3, r0
 80085fe:	460a      	mov	r2, r1
 8008600:	80fb      	strh	r3, [r7, #6]
 8008602:	4613      	mov	r3, r2
 8008604:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	4618      	mov	r0, r3
 8008616:	f002 ff87 	bl	800b528 <VL53LX_calc_pll_period_us>
 800861a:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 800861c:	797b      	ldrb	r3, [r7, #5]
 800861e:	4618      	mov	r0, r3
 8008620:	f003 fb72 	bl	800bd08 <VL53LX_decode_vcsel_period>
 8008624:	4603      	mov	r3, r0
 8008626:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	4613      	mov	r3, r2
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	099b      	lsrs	r3, r3, #6
 8008638:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 800863a:	7cfa      	ldrb	r2, [r7, #19]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	fb02 f303 	mul.w	r3, r2, r3
 8008642:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	099b      	lsrs	r3, r3, #6
 8008648:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800864a:	68fb      	ldr	r3, [r7, #12]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008654:	b480      	push	{r7}
 8008656:	b089      	sub	sp, #36	@ 0x24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	4608      	mov	r0, r1
 800865e:	4611      	mov	r1, r2
 8008660:	461a      	mov	r2, r3
 8008662:	4603      	mov	r3, r0
 8008664:	817b      	strh	r3, [r7, #10]
 8008666:	460b      	mov	r3, r1
 8008668:	813b      	strh	r3, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	4a23      	ldr	r2, [pc, #140]	@ (8008714 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008688:	fb82 1203 	smull	r1, r2, r2, r3
 800868c:	1192      	asrs	r2, r2, #6
 800868e:	17db      	asrs	r3, r3, #31
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008694:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008698:	2b00      	cmp	r3, #0
 800869a:	da03      	bge.n	80086a4 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800869c:	897b      	ldrh	r3, [r7, #10]
 800869e:	425b      	negs	r3, r3
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 80086a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da03      	bge.n	80086b4 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80086ac:	893b      	ldrh	r3, [r7, #8]
 80086ae:	425b      	negs	r3, r3
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80086b4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80086b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80086bc:	4413      	add	r3, r2
 80086be:	015b      	lsls	r3, r3, #5
 80086c0:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4a13      	ldr	r2, [pc, #76]	@ (8008714 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80086c6:	fb82 1203 	smull	r1, r2, r2, r3
 80086ca:	1192      	asrs	r2, r2, #6
 80086cc:	17db      	asrs	r3, r3, #31
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4413      	add	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80086da:	79fa      	ldrb	r2, [r7, #7]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	fb02 f303 	mul.w	r3, r2, r3
 80086e2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	3310      	adds	r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da00      	bge.n	80086ee <VL53LX_calc_range_ignore_threshold+0x9a>
 80086ec:	331f      	adds	r3, #31
 80086ee:	115b      	asrs	r3, r3, #5
 80086f0:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086f8:	db03      	blt.n	8008702 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80086fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086fe:	83fb      	strh	r3, [r7, #30]
 8008700:	e001      	b.n	8008706 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008706:	8bfb      	ldrh	r3, [r7, #30]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3724      	adds	r7, #36	@ 0x24
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	10624dd3 	.word	0x10624dd3

08008718 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e008      	b.n	8008744 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	031a      	lsls	r2, r3, #12
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	441a      	add	r2, r3
		timeout_mclks   =
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008742:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008744:	68fb      	ldr	r3, [r7, #12]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff ffd6 	bl	8008718 <VL53LX_calc_timeout_mclks>
 800876c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f887 	bl	8008882 <VL53LX_encode_timeout>
 8008774:	4603      	mov	r3, r0
 8008776:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008778:	897b      	ldrh	r3, [r7, #10]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008782:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800878e:	2100      	movs	r1, #0
 8008790:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f04f 0100 	mov.w	r1, #0
 800879a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	2000      	movs	r0, #0
 80087a2:	4688      	mov	r8, r1
 80087a4:	4681      	mov	r9, r0
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	2000      	movs	r0, #0
 80087aa:	460c      	mov	r4, r1
 80087ac:	4605      	mov	r5, r0
 80087ae:	fb04 f009 	mul.w	r0, r4, r9
 80087b2:	fb08 f105 	mul.w	r1, r8, r5
 80087b6:	4401      	add	r1, r0
 80087b8:	fba8 2304 	umull	r2, r3, r8, r4
 80087bc:	4419      	add	r1, r3
 80087be:	460b      	mov	r3, r1
 80087c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80087c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80087c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087cc:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 80087d0:	f143 0b00 	adc.w	fp, r3, #0
 80087d4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80087d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	0b02      	lsrs	r2, r0, #12
 80087e6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80087ea:	0b0b      	lsrs	r3, r1, #12
 80087ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 80087f4:	697b      	ldr	r3, [r7, #20]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008800:	4770      	bx	lr
	...

08008804 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008818:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800881c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800881e:	4413      	add	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	da02      	bge.n	800882e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e005      	b.n	800883a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008834:	db01      	blt.n	800883a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008836:	4b05      	ldr	r3, [pc, #20]	@ (800884c <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008838:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800883e:	68bb      	ldr	r3, [r7, #8]

}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	0003ffff 	.word	0x0003ffff

08008850 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f835 	bl	80088d6 <VL53LX_decode_timeout>
 800886c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7ff ff86 	bl	8008782 <VL53LX_calc_timeout_us>
 8008876:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008878:	68bb      	ldr	r3, [r7, #8]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008882:	b480      	push	{r7}
 8008884:	b087      	sub	sp, #28
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d015      	beq.n	80088c8 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80088a2:	e005      	b.n	80088b0 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	085b      	lsrs	r3, r3, #1
 80088a8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80088aa:	89fb      	ldrh	r3, [r7, #14]
 80088ac:	3301      	adds	r3, #1
 80088ae:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2bff      	cmp	r3, #255	@ 0xff
 80088b4:	d8f6      	bhi.n	80088a4 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80088b6:	89fb      	ldrh	r3, [r7, #14]
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80088c4:	4413      	add	r3, r2
 80088c6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80088c8:	8afb      	ldrh	r3, [r7, #22]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	4603      	mov	r3, r0
 80088de:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80088e4:	88fb      	ldrh	r3, [r7, #6]
 80088e6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	0a12      	lsrs	r2, r2, #8
 80088ec:	b292      	uxth	r2, r2
 80088ee:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80088f4:	68fb      	ldr	r3, [r7, #12]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b088      	sub	sp, #32
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008910:	2300      	movs	r3, #0
 8008912:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008920:	887b      	ldrh	r3, [r7, #2]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008926:	23f1      	movs	r3, #241	@ 0xf1
 8008928:	77fb      	strb	r3, [r7, #31]
 800892a:	e05d      	b.n	80089e8 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 800892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892e:	799a      	ldrb	r2, [r3, #6]
 8008930:	887b      	ldrh	r3, [r7, #2]
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff fe5e 	bl	80085f6 <VL53LX_calc_macro_period_us>
 800893a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 800893c:	6979      	ldr	r1, [r7, #20]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7ff feea 	bl	8008718 <VL53LX_calc_timeout_mclks>
 8008944:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2bff      	cmp	r3, #255	@ 0xff
 800894a:	d901      	bls.n	8008950 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800894c:	23ff      	movs	r3, #255	@ 0xff
 800894e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008956:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008958:	6979      	ldr	r1, [r7, #20]
 800895a:	68b8      	ldr	r0, [r7, #8]
 800895c:	f7ff fef9 	bl	8008752 <VL53LX_calc_encoded_timeout>
 8008960:	4603      	mov	r3, r0
 8008962:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008964:	8a7b      	ldrh	r3, [r7, #18]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008970:	8a7b      	ldrh	r3, [r7, #18]
 8008972:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008978:	6979      	ldr	r1, [r7, #20]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff fee9 	bl	8008752 <VL53LX_calc_encoded_timeout>
 8008980:	4603      	mov	r3, r0
 8008982:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008984:	8a7b      	ldrh	r3, [r7, #18]
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	b29b      	uxth	r3, r3
 800898a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008990:	8a7b      	ldrh	r3, [r7, #18]
 8008992:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008996:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	7a5a      	ldrb	r2, [r3, #9]
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff fe28 	bl	80085f6 <VL53LX_calc_macro_period_us>
 80089a6:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 80089a8:	6979      	ldr	r1, [r7, #20]
 80089aa:	68b8      	ldr	r0, [r7, #8]
 80089ac:	f7ff fed1 	bl	8008752 <VL53LX_calc_encoded_timeout>
 80089b0:	4603      	mov	r3, r0
 80089b2:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80089b4:	8a7b      	ldrh	r3, [r7, #18]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80089bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089be:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80089c0:	8a7b      	ldrh	r3, [r7, #18]
 80089c2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 80089c8:	6979      	ldr	r1, [r7, #20]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fec1 	bl	8008752 <VL53LX_calc_encoded_timeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80089d4:	8a7b      	ldrh	r3, [r7, #18]
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	b29b      	uxth	r3, r3
 80089da:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80089e0:	8a7b      	ldrh	r3, [r7, #18]
 80089e2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80089e8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 80089f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089f8:	b09c      	sub	sp, #112	@ 0x70
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80089fe:	64b9      	str	r1, [r7, #72]	@ 0x48


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	int64_t  evts              = 0;
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpi              = 0;
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t  tmpo              = 0;
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2c:	885b      	ldrh	r3, [r3, #2]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d103      	bne.n	8008a3a <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008a32:	23f1      	movs	r3, #241	@ 0xf1
 8008a34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8008a38:	e0d3      	b.n	8008be2 <VL53LX_hist_copy_and_scale_ambient_info+0x1ee>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 80cf 	beq.w	8008be2 <VL53LX_hist_copy_and_scale_ambient_info+0x1ee>
			podata->number_of_ambient_bins == 0) {
 8008a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a46:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f040 80ca 	bne.w	8008be2 <VL53LX_hist_copy_and_scale_ambient_info+0x1ee>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a54:	2200      	movs	r2, #0
 8008a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008a5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a5e:	460b      	mov	r3, r1
 8008a60:	3301      	adds	r3, #1
 8008a62:	61bb      	str	r3, [r7, #24]
 8008a64:	4613      	mov	r3, r2
 8008a66:	f143 0300 	adc.w	r3, r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a70:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a76:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a80:	647a      	str	r2, [r7, #68]	@ 0x44
			tmpo   *=
 8008a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008a88:	4602      	mov	r2, r0
 8008a8a:	fb02 f203 	mul.w	r2, r2, r3
 8008a8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a90:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	441a      	add	r2, r3
 8008a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a9e:	fba3 4501 	umull	r4, r5, r3, r1
 8008aa2:	1953      	adds	r3, r2, r5
 8008aa4:	461d      	mov	r5, r3
 8008aa6:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
 8008aaa:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab6:	637a      	str	r2, [r7, #52]	@ 0x34
 8008ab8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008abc:	460b      	mov	r3, r1
 8008abe:	3301      	adds	r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	f143 0300 	adc.w	r3, r3, #0
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008ace:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008adc:	62fa      	str	r2, [r7, #44]	@ 0x2c
			tmpi   *=
 8008ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ae0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	fb02 f203 	mul.w	r2, r2, r3
 8008aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008aec:	4629      	mov	r1, r5
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	4413      	add	r3, r2
 8008af4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008af6:	4621      	mov	r1, r4
 8008af8:	fba2 ab01 	umull	sl, fp, r2, r1
 8008afc:	445b      	add	r3, fp
 8008afe:	469b      	mov	fp, r3
 8008b00:	e9c7 ab16 	strd	sl, fp, [r7, #88]	@ 0x58
 8008b04:	e9c7 ab16 	strd	sl, fp, [r7, #88]	@ 0x58

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	17da      	asrs	r2, r3, #31
 8008b0e:	623b      	str	r3, [r7, #32]
 8008b10:	627a      	str	r2, [r7, #36]	@ 0x24
			evts  = tmpo *
 8008b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b14:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008b18:	4622      	mov	r2, r4
 8008b1a:	fb02 f203 	mul.w	r2, r2, r3
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b20:	4629      	mov	r1, r5
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	4413      	add	r3, r2
 8008b28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	fba2 8901 	umull	r8, r9, r2, r1
 8008b30:	444b      	add	r3, r9
 8008b32:	4699      	mov	r9, r3
 8008b34:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
 8008b38:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
			evts += (tmpi/2);
 8008b3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b40:	f04f 0000 	mov.w	r0, #0
 8008b44:	f04f 0100 	mov.w	r1, #0
 8008b48:	0fd8      	lsrs	r0, r3, #31
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	1884      	adds	r4, r0, r2
 8008b4e:	60bc      	str	r4, [r7, #8]
 8008b50:	eb41 0303 	adc.w	r3, r1, r3
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b62:	4621      	mov	r1, r4
 8008b64:	084a      	lsrs	r2, r1, #1
 8008b66:	4629      	mov	r1, r5
 8008b68:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	104b      	asrs	r3, r1, #1
 8008b70:	4610      	mov	r0, r2
 8008b72:	4619      	mov	r1, r3
 8008b74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008b78:	1814      	adds	r4, r2, r0
 8008b7a:	603c      	str	r4, [r7, #0]
 8008b7c:	414b      	adcs	r3, r1
 8008b7e:	607b      	str	r3, [r7, #4]
 8008b80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008b84:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60


			if (tmpi != 0)
 8008b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	d009      	beq.n	8008ba4 <VL53LX_hist_copy_and_scale_ambient_info+0x1b0>
				evts = do_division_s(evts, tmpi);
 8008b90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8008b98:	f7f8 f826 	bl	8000be8 <__aeabi_ldivmod>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

			podata->ambient_events_sum = (int32_t)evts;
 8008ba4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 8008bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 8008bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bc0:	7852      	ldrb	r2, [r2, #1]
 8008bc2:	0852      	lsrs	r2, r2, #1
 8008bc4:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008bc6:	441a      	add	r2, r3
 8008bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 8008bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bd6:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008bd8:	fb93 f2f2 	sdiv	r2, r3, r2
 8008bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bde:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008be2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3770      	adds	r7, #112	@ 0x70
 8008bea:	46bd      	mov	sp, r7
 8008bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bf0 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	@ 0x2fa
	amb_thresh_low  = 1024 *
 8008c12:	029b      	lsls	r3, r3, #10
 8008c14:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
	amb_thresh_high = 1024 *
 8008c1c:	029b      	lsls	r3, r3, #10
 8008c1e:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 8095 	bne.w	8008d5a <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
		pdata->bin_seq[5] =
 8008c36:	091b      	lsrs	r3, r3, #4
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f893 32ed 	ldrb.w	r3, [r3, #749]	@ 0x2ed
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
		pdata->bin_seq[3] =
 8008c54:	091b      	lsrs	r3, r3, #4
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f893 32ec 	ldrb.w	r3, [r3, #748]	@ 0x2ec
 8008c62:	f003 030f 	and.w	r3, r3, #15
 8008c66:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
		pdata->bin_seq[1] =
 8008c72:	091b      	lsrs	r3, r3, #4
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f893 32eb 	ldrb.w	r3, [r3, #747]	@ 0x2eb
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	da2c      	bge.n	8008cf0 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			pdata->bin_seq[5] =
 8008c9c:	091b      	lsrs	r3, r3, #4
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f893 32f5 	ldrb.w	r3, [r3, #757]	@ 0x2f5
			& 0x0F;
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			pdata->bin_seq[3] =
 8008cba:	091b      	lsrs	r3, r3, #4
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f893 32f4 	ldrb.w	r3, [r3, #756]	@ 0x2f4
			& 0x0F;
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			pdata->bin_seq[1] =
 8008cd8:	091b      	lsrs	r3, r3, #4
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f893 32f3 	ldrb.w	r3, [r3, #755]	@ 0x2f3
			& 0x0F;
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	f340 80c2 	ble.w	8008e82 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			pdata->bin_seq[5] =
 8008d04:	091b      	lsrs	r3, r3, #4
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f893 32e7 	ldrb.w	r3, [r3, #743]	@ 0x2e7
			& 0x0F;
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			pdata->bin_seq[3] =
 8008d22:	091b      	lsrs	r3, r3, #4
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
			& 0x0F;
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			pdata->bin_seq[1] =
 8008d40:	091b      	lsrs	r3, r3, #4
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
			& 0x0F;
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	731a      	strb	r2, [r3, #12]
 8008d58:	e093      	b.n	8008e82 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f893 32f1 	ldrb.w	r3, [r3, #753]	@ 0x2f1
			& 0x0F;
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
			& 0x0F;
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
		pdata->bin_seq[3] =
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f893 32ef 	ldrb.w	r3, [r3, #751]	@ 0x2ef
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
		pdata->bin_seq[1] =
 8008d9e:	091b      	lsrs	r3, r3, #4
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f893 32ee 	ldrb.w	r3, [r3, #750]	@ 0x2ee
			& 0x0F;
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	da2c      	bge.n	8008e1c <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			pdata->bin_seq[5] =
 8008dc8:	091b      	lsrs	r3, r3, #4
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
			& 0x0F;
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			pdata->bin_seq[3] =
 8008de6:	091b      	lsrs	r3, r3, #4
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f893 32f7 	ldrb.w	r3, [r3, #759]	@ 0x2f7
			& 0x0F;
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			pdata->bin_seq[1] =
 8008e04:	091b      	lsrs	r3, r3, #4
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f893 32f6 	ldrb.w	r3, [r3, #758]	@ 0x2f6
			& 0x0F;
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	dd2c      	ble.n	8008e82 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			pdata->bin_seq[5] =
 8008e2e:	091b      	lsrs	r3, r3, #4
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f893 32ea 	ldrb.w	r3, [r3, #746]	@ 0x2ea
			& 0x0F;
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			pdata->bin_seq[3] =
 8008e4c:	091b      	lsrs	r3, r3, #4
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
			& 0x0F;
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			pdata->bin_seq[1] =
 8008e6a:	091b      	lsrs	r3, r3, #4
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
			& 0x0F;
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
 8008e86:	e007      	b.n	8008e98 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2201      	movs	r2, #1
 8008e90:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	3301      	adds	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	d9f4      	bls.n	8008e88 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b093      	sub	sp, #76	@ 0x4c
 8008eb0:	af04      	add	r7, sp, #16
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3318      	adds	r3, #24
 8008ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8008eec:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8008ef6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 8008efe:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8008f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f02:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 8008f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 8008f0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 8008f10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	2b07      	cmp	r3, #7
 8008f1c:	d006      	beq.n	8008f2c <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8008f22:	2b08      	cmp	r3, #8
 8008f24:	d002      	beq.n	8008f2c <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8008f26:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f2a:	e0ec      	b.n	8009106 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8008f2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d102      	bne.n	8008f38 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8008f32:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008f36:	e0e6      	b.n	8009106 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008f3e:	e0d9      	b.n	80090f4 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008f40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	214c      	movs	r1, #76	@ 0x4c
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	335e      	adds	r3, #94	@ 0x5e
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b09      	cmp	r3, #9
 8008f54:	d00b      	beq.n	8008f6e <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8008f56:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	214c      	movs	r1, #76	@ 0x4c
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	4413      	add	r3, r2
 8008f64:	335e      	adds	r3, #94	@ 0x5e
 8008f66:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8008f68:	2b13      	cmp	r3, #19
 8008f6a:	f040 80bd 	bne.w	80090e8 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8008f76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	214c      	movs	r1, #76	@ 0x4c
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	335e      	adds	r3, #94	@ 0x5e
 8008f86:	2217      	movs	r2, #23
 8008f88:	701a      	strb	r2, [r3, #0]
 8008f8a:	e009      	b.n	8008fa0 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8008f8c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	214c      	movs	r1, #76	@ 0x4c
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	4413      	add	r3, r2
 8008f9a:	335e      	adds	r3, #94	@ 0x5e
 8008f9c:	2207      	movs	r2, #7
 8008f9e:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008fa6:	e097      	b.n	80090d8 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008fa8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	214c      	movs	r1, #76	@ 0x4c
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3354      	adds	r3, #84	@ 0x54
 8008fb8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8008fba:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4403      	add	r3, r0
 8008fca:	3310      	adds	r3, #16
 8008fcc:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8008fce:	4299      	cmp	r1, r3
 8008fd0:	d915      	bls.n	8008ffe <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8008fd2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	214c      	movs	r1, #76	@ 0x4c
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	3354      	adds	r3, #84	@ 0x54
 8008fe2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8008fe4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4613      	mov	r3, r2
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4403      	add	r3, r0
 8008ff4:	3310      	adds	r3, #16
 8008ff6:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8008ff8:	1acb      	subs	r3, r1, r3
 8008ffa:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008ffc:	e014      	b.n	8009028 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8008ffe:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	4613      	mov	r3, r2
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	440b      	add	r3, r1
 800900e:	3310      	adds	r3, #16
 8009010:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009012:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	204c      	movs	r0, #76	@ 0x4c
 800901a:	fb00 f303 	mul.w	r3, r0, r3
 800901e:	440b      	add	r3, r1
 8009020:	3354      	adds	r3, #84	@ 0x54
 8009022:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 8009028:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800902a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800902c:	429a      	cmp	r2, r3
 800902e:	d24e      	bcs.n	80090ce <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009030:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009034:	2b00      	cmp	r3, #0
 8009036:	d125      	bne.n	8009084 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8009038:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 800903c:	4613      	mov	r3, r2
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	3308      	adds	r3, #8
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800904a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 800904e:	224c      	movs	r2, #76	@ 0x4c
 8009050:	fb02 f303 	mul.w	r3, r2, r3
 8009054:	3310      	adds	r3, #16
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	4413      	add	r3, r2
 800905a:	3304      	adds	r3, #4
 800905c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800905e:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 8009062:	f107 0217 	add.w	r2, r7, #23
 8009066:	9203      	str	r2, [sp, #12]
 8009068:	f107 021c 	add.w	r2, r7, #28
 800906c:	9202      	str	r2, [sp, #8]
 800906e:	f107 0218 	add.w	r2, r7, #24
 8009072:	9201      	str	r2, [sp, #4]
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	4623      	mov	r3, r4
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	f000 f848 	bl	800910e <VL53LX_hist_events_consistency_check>
 800907e:	4603      	mov	r3, r0
 8009080:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8009084:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009088:	2b00      	cmp	r3, #0
 800908a:	d115      	bne.n	80090b8 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 800908c:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800908e:	2b09      	cmp	r3, #9
 8009090:	d112      	bne.n	80090b8 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009092:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8009096:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 800909a:	224c      	movs	r2, #76	@ 0x4c
 800909c:	fb02 f303 	mul.w	r3, r2, r3
 80090a0:	3310      	adds	r3, #16
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4413      	add	r3, r2
 80090a6:	3304      	adds	r3, #4
 80090a8:	f107 0217 	add.w	r2, r7, #23
 80090ac:	4619      	mov	r1, r3
 80090ae:	f000 fb40 	bl	8009732 <VL53LX_hist_merged_pulse_check>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 80090b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80090bc:	7df8      	ldrb	r0, [r7, #23]
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	214c      	movs	r1, #76	@ 0x4c
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	335e      	adds	r3, #94	@ 0x5e
 80090ca:	4602      	mov	r2, r0
 80090cc:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 80090ce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80090d2:	3301      	adds	r3, #1
 80090d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	795b      	ldrb	r3, [r3, #5]
 80090dc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80090e0:	429a      	cmp	r2, r3
 80090e2:	f4ff af61 	bcc.w	8008fa8 <VL53LX_hist_phase_consistency_check+0xfc>
 80090e6:	e000      	b.n	80090ea <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 80090e8:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80090ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80090ee:	3301      	adds	r3, #1
 80090f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	7c9b      	ldrb	r3, [r3, #18]
 80090f8:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80090fc:	429a      	cmp	r2, r3
 80090fe:	f4ff af1f 	bcc.w	8008f40 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009102:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009106:	4618      	mov	r0, r3
 8009108:	373c      	adds	r7, #60	@ 0x3c
 800910a:	46bd      	mov	sp, r7
 800910c:	bd90      	pop	{r4, r7, pc}

0800910e <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800910e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009112:	b0d2      	sub	sp, #328	@ 0x148
 8009114:	af00      	add	r7, sp, #0
 8009116:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800911a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800911e:	4603      	mov	r3, r0
 8009120:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
 8009124:	460b      	mov	r3, r1
 8009126:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800912a:	2300      	movs	r3, #0
 800912c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	int64_t   tmpp                   = 0;
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   tmpc                   = 0;
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   events_scaler          = 0;
 8009148:	f04f 0200 	mov.w	r2, #0
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	int64_t   events_scaler_sq       = 0;
 8009154:	f04f 0200 	mov.w	r2, #0
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_signal_events        = 0;
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_sig_noise_sq         = 0;
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   c_amb_noise_sq         = 0;
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	int64_t   p_amb_noise_sq         = 0;
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

	int32_t   p_signal_events        = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	uint32_t  noise_sq_sum           = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8



	if (event_sigma == 0) {
 800919c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80091a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80091a8:	2209      	movs	r2, #9
 80091aa:	701a      	strb	r2, [r3, #0]
		return status;
 80091ac:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80091b0:	e2b9      	b.n	8009726 <VL53LX_hist_events_consistency_check+0x618>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 80091b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091be:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091c6:	460b      	mov	r3, r1
 80091c8:	3301      	adds	r3, #1
 80091ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ce:	4613      	mov	r3, r2
 80091d0:	f143 0300 	adc.w	r3, r3, #0
 80091d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091d8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80091dc:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80091e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80091e4:	885b      	ldrh	r3, [r3, #2]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2200      	movs	r2, #0
 80091ea:	469a      	mov	sl, r3
 80091ec:	4693      	mov	fp, r2
 80091ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80091f2:	fb0a f203 	mul.w	r2, sl, r3
 80091f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091fa:	fb0b f303 	mul.w	r3, fp, r3
 80091fe:	441a      	add	r2, r3
 8009200:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009204:	fba3 450a 	umull	r4, r5, r3, sl
 8009208:	1953      	adds	r3, r2, r5
 800920a:	461d      	mov	r5, r3
 800920c:	e9c7 454c 	strd	r4, r5, [r7, #304]	@ 0x130
 8009210:	e9c7 454c 	strd	r4, r5, [r7, #304]	@ 0x130



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009214:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009220:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009224:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009228:	460b      	mov	r3, r1
 800922a:	3301      	adds	r3, #1
 800922c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009230:	4613      	mov	r3, r2
 8009232:	f143 0300 	adc.w	r3, r3, #0
 8009236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800923a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800923e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009242:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8009246:	8adb      	ldrh	r3, [r3, #22]
 8009248:	b29b      	uxth	r3, r3
 800924a:	2200      	movs	r2, #0
 800924c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009250:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8009254:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009258:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800925c:	4622      	mov	r2, r4
 800925e:	fb02 f203 	mul.w	r2, r2, r3
 8009262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009266:	4629      	mov	r1, r5
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	441a      	add	r2, r3
 800926e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009272:	4621      	mov	r1, r4
 8009274:	fba3 8901 	umull	r8, r9, r3, r1
 8009278:	eb02 0309 	add.w	r3, r2, r9
 800927c:	4699      	mov	r9, r3
 800927e:	e9c7 894a 	strd	r8, r9, [r7, #296]	@ 0x128
 8009282:	e9c7 894a 	strd	r8, r9, [r7, #296]	@ 0x128



	events_scaler  = tmpp * 4096;
 8009286:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800928a:	f04f 0000 	mov.w	r0, #0
 800928e:	f04f 0100 	mov.w	r1, #0
 8009292:	0319      	lsls	r1, r3, #12
 8009294:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009298:	0310      	lsls	r0, r2, #12
 800929a:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
	if (tmpc != 0) {
 800929e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80092a2:	4313      	orrs	r3, r2
 80092a4:	d031      	beq.n	800930a <VL53LX_hist_events_consistency_check+0x1fc>
		events_scaler += (tmpc/2);
 80092a6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80092aa:	f04f 0000 	mov.w	r0, #0
 80092ae:	f04f 0100 	mov.w	r1, #0
 80092b2:	0fd8      	lsrs	r0, r3, #31
 80092b4:	2100      	movs	r1, #0
 80092b6:	1884      	adds	r4, r0, r2
 80092b8:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 80092bc:	eb41 0303 	adc.w	r3, r1, r3
 80092c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80092d0:	4621      	mov	r1, r4
 80092d2:	084a      	lsrs	r2, r1, #1
 80092d4:	4629      	mov	r1, r5
 80092d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80092da:	4629      	mov	r1, r5
 80092dc:	104b      	asrs	r3, r1, #1
 80092de:	4610      	mov	r0, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80092e6:	1814      	adds	r4, r2, r0
 80092e8:	67bc      	str	r4, [r7, #120]	@ 0x78
 80092ea:	414b      	adcs	r3, r1
 80092ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092ee:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80092f2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		events_scaler  = do_division_s(events_scaler, tmpc);
 80092f6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80092fa:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80092fe:	f7f7 fc73 	bl	8000be8 <__aeabi_ldivmod>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800930a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800930e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009312:	fb03 f102 	mul.w	r1, r3, r2
 8009316:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800931a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	18ca      	adds	r2, r1, r3
 8009324:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009328:	fba3 1303 	umull	r1, r3, r3, r3
 800932c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009330:	460b      	mov	r3, r1
 8009332:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800933a:	18d3      	adds	r3, r2, r3
 800933c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009340:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8009344:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8009348:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	events_scaler_sq += 2048;
 800934c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009350:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009354:	6739      	str	r1, [r7, #112]	@ 0x70
 8009356:	f143 0300 	adc.w	r3, r3, #0
 800935a:	677b      	str	r3, [r7, #116]	@ 0x74
 800935c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8009360:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	events_scaler_sq /= 4096;
 8009364:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009368:	2b00      	cmp	r3, #0
 800936a:	da08      	bge.n	800937e <VL53LX_hist_events_consistency_check+0x270>
 800936c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8009370:	1851      	adds	r1, r2, r1
 8009372:	66b9      	str	r1, [r7, #104]	@ 0x68
 8009374:	f143 0300 	adc.w	r3, r3, #0
 8009378:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800937a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800937e:	f04f 0000 	mov.w	r0, #0
 8009382:	f04f 0100 	mov.w	r1, #0
 8009386:	0b10      	lsrs	r0, r2, #12
 8009388:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800938c:	1319      	asrs	r1, r3, #12
 800938e:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009392:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8009396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009398:	2200      	movs	r2, #0
 800939a:	663b      	str	r3, [r7, #96]	@ 0x60
 800939c:	667a      	str	r2, [r7, #100]	@ 0x64
 800939e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80093a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 80093a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80093aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80093b6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80093ba:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 80093be:	4621      	mov	r1, r4
 80093c0:	1a51      	subs	r1, r2, r1
 80093c2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80093c4:	4629      	mov	r1, r5
 80093c6:	eb63 0301 	sbc.w	r3, r3, r1
 80093ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093cc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80093d0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_signal_events *= (int64_t)events_scaler;
 80093d4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80093d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80093dc:	fb03 f102 	mul.w	r1, r3, r2
 80093e0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80093e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80093e8:	fb02 f303 	mul.w	r3, r2, r3
 80093ec:	4419      	add	r1, r3
 80093ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80093f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093fe:	4613      	mov	r3, r2
 8009400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009408:	18cb      	adds	r3, r1, r3
 800940a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800940e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8009412:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8009416:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_signal_events += 2048;
 800941a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800941e:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009422:	6539      	str	r1, [r7, #80]	@ 0x50
 8009424:	f143 0300 	adc.w	r3, r3, #0
 8009428:	657b      	str	r3, [r7, #84]	@ 0x54
 800942a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800942e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_signal_events /= 4096;
 8009432:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009436:	2b00      	cmp	r3, #0
 8009438:	da08      	bge.n	800944c <VL53LX_hist_events_consistency_check+0x33e>
 800943a:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800943e:	1851      	adds	r1, r2, r1
 8009440:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009442:	f143 0300 	adc.w	r3, r3, #0
 8009446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800944c:	f04f 0000 	mov.w	r0, #0
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	0b10      	lsrs	r0, r2, #12
 8009456:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800945a:	1319      	asrs	r1, r3, #12
 800945c:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009460:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009464:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009468:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	2200      	movs	r2, #0
 8009470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009474:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8009480:	4622      	mov	r2, r4
 8009482:	fb02 f203 	mul.w	r2, r2, r3
 8009486:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800948a:	4629      	mov	r1, r5
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	441a      	add	r2, r3
 8009492:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009496:	4621      	mov	r1, r4
 8009498:	fba3 1301 	umull	r1, r3, r3, r1
 800949c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80094a0:	460b      	mov	r3, r1
 80094a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094aa:	18d3      	adds	r3, r2, r3
 80094ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80094b0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 80094b4:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 80094b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_sig_noise_sq += 2048;
 80094bc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80094c0:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80094c4:	6439      	str	r1, [r7, #64]	@ 0x40
 80094c6:	f143 0300 	adc.w	r3, r3, #0
 80094ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80094cc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80094d0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_sig_noise_sq /= 4096;
 80094d4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da08      	bge.n	80094ee <VL53LX_hist_events_consistency_check+0x3e0>
 80094dc:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80094e0:	1851      	adds	r1, r2, r1
 80094e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80094e4:	f143 0300 	adc.w	r3, r3, #0
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80094ee:	f04f 0000 	mov.w	r0, #0
 80094f2:	f04f 0100 	mov.w	r1, #0
 80094f6:	0b10      	lsrs	r0, r2, #12
 80094f8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80094fc:	1319      	asrs	r1, r3, #12
 80094fe:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 8009502:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009506:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800950a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009510:	2200      	movs	r2, #0
 8009512:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009516:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800951a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800951e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8009522:	4622      	mov	r2, r4
 8009524:	fb02 f203 	mul.w	r2, r2, r3
 8009528:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800952c:	4629      	mov	r1, r5
 800952e:	fb01 f303 	mul.w	r3, r1, r3
 8009532:	441a      	add	r2, r3
 8009534:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009538:	4621      	mov	r1, r4
 800953a:	fba3 1301 	umull	r1, r3, r3, r1
 800953e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009542:	460b      	mov	r3, r1
 8009544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800954c:	18d3      	adds	r3, r2, r3
 800954e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009552:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8009556:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
 800955a:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	c_amb_noise_sq += 2048;
 800955e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8009562:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8009566:	6339      	str	r1, [r7, #48]	@ 0x30
 8009568:	f143 0300 	adc.w	r3, r3, #0
 800956c:	637b      	str	r3, [r7, #52]	@ 0x34
 800956e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009572:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	c_amb_noise_sq /= 4096;
 8009576:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800957a:	4610      	mov	r0, r2
 800957c:	4619      	mov	r1, r3
 800957e:	2900      	cmp	r1, #0
 8009580:	da08      	bge.n	8009594 <VL53LX_hist_events_consistency_check+0x486>
 8009582:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009586:	18c3      	adds	r3, r0, r3
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800958a:	f141 0300 	adc.w	r3, r1, #0
 800958e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009590:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	f04f 0300 	mov.w	r3, #0
 800959c:	0b02      	lsrs	r2, r0, #12
 800959e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80095a2:	130b      	asrs	r3, r1, #12
 80095a4:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108


	c_amb_noise_sq += 2;
 80095a8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80095ac:	1c91      	adds	r1, r2, #2
 80095ae:	6239      	str	r1, [r7, #32]
 80095b0:	f143 0300 	adc.w	r3, r3, #0
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80095ba:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	c_amb_noise_sq /= 4;
 80095be:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da06      	bge.n	80095d4 <VL53LX_hist_events_consistency_check+0x4c6>
 80095c6:	1cd1      	adds	r1, r2, #3
 80095c8:	61b9      	str	r1, [r7, #24]
 80095ca:	f143 0300 	adc.w	r3, r3, #0
 80095ce:	61fb      	str	r3, [r7, #28]
 80095d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095d4:	f04f 0000 	mov.w	r0, #0
 80095d8:	f04f 0100 	mov.w	r1, #0
 80095dc:	0890      	lsrs	r0, r2, #2
 80095de:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80095e2:	1099      	asrs	r1, r3, #2
 80095e4:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80095e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80095ec:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80095ee:	2200      	movs	r2, #0
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	617a      	str	r2, [r7, #20]
 80095f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80095f8:	e9c7 3440 	strd	r3, r4, [r7, #256]	@ 0x100


	p_amb_noise_sq += 2;
 80095fc:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8009600:	1c91      	adds	r1, r2, #2
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	f143 0300 	adc.w	r3, r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800960e:	e9c7 3440 	strd	r3, r4, [r7, #256]	@ 0x100
	p_amb_noise_sq /= 4;
 8009612:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8009616:	2b00      	cmp	r3, #0
 8009618:	da06      	bge.n	8009628 <VL53LX_hist_events_consistency_check+0x51a>
 800961a:	1cd1      	adds	r1, r2, #3
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	f143 0300 	adc.w	r3, r3, #0
 8009622:	607b      	str	r3, [r7, #4]
 8009624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009628:	f04f 0000 	mov.w	r0, #0
 800962c:	f04f 0100 	mov.w	r1, #0
 8009630:	0890      	lsrs	r0, r2, #2
 8009632:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009636:	1099      	asrs	r1, r3, #2
 8009638:	e9c7 0140 	strd	r0, r1, [r7, #256]	@ 0x100

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800963c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009640:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009642:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009646:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009648:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
		(uint32_t)c_sig_noise_sq +
 800964c:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800964e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
	noise_sq_sum =
 8009652:	4413      	add	r3, r2
 8009654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	4618      	mov	r0, r3
 8009660:	f002 f86b 	bl	800b73a <VL53LX_isqrt>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009668:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800966c:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800966e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 8009678:	fb03 f202 	mul.w	r2, r3, r2
 800967c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009680:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009682:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f103 0220 	add.w	r2, r3, #32
 800968c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009690:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009692:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	da00      	bge.n	800969e <VL53LX_hist_events_consistency_check+0x590>
 800969c:	333f      	adds	r3, #63	@ 0x3f
 800969e:	119b      	asrs	r3, r3, #6
 80096a0:	461a      	mov	r2, r3
 80096a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80096a6:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 80096a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 80096b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

	if ((int32_t)c_signal_events > p_signal_events)
 80096c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80096c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80096cc:	429a      	cmp	r2, r3
 80096ce:	da08      	bge.n	80096e2 <VL53LX_hist_events_consistency_check+0x5d4>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80096d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80096d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096d8:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80096da:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	e007      	b.n	80096f2 <VL53LX_hist_events_consistency_check+0x5e4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80096e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80096e6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80096ea:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80096ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80096f0:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80096f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	dd0b      	ble.n	800971a <VL53LX_hist_events_consistency_check+0x60c>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 8009702:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8009706:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009708:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	@ 0xf4
 800970c:	429a      	cmp	r2, r3
 800970e:	d204      	bcs.n	800971a <VL53LX_hist_events_consistency_check+0x60c>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8009710:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009714:	2214      	movs	r2, #20
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e003      	b.n	8009722 <VL53LX_hist_events_consistency_check+0x614>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800971a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800971e:	2209      	movs	r2, #9
 8009720:	701a      	strb	r2, [r3, #0]





	return status;
 8009722:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8009726:	4618      	mov	r0, r3
 8009728:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800972c:	46bd      	mov	sp, r7
 800972e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009732 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009732:	b480      	push	{r7}
 8009734:	b087      	sub	sp, #28
 8009736:	af00      	add	r7, sp, #0
 8009738:	4603      	mov	r3, r0
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009740:	2300      	movs	r3, #0
 8009742:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009754:	429a      	cmp	r2, r3
 8009756:	dd0b      	ble.n	8009770 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800975e:	b29a      	uxth	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009766:	b29b      	uxth	r3, r3
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	b29b      	uxth	r3, r3
		delta_mm =
 800976c:	82fb      	strh	r3, [r7, #22]
 800976e:	e00a      	b.n	8009786 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8009776:	b29a      	uxth	r2, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800977e:	b29b      	uxth	r3, r3
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	b29b      	uxth	r3, r3
		delta_mm =
 8009784:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009786:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800978a:	2b00      	cmp	r3, #0
 800978c:	dd09      	ble.n	80097a2 <VL53LX_hist_merged_pulse_check+0x70>
 800978e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009792:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009796:	429a      	cmp	r2, r3
 8009798:	dd03      	ble.n	80097a2 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2216      	movs	r2, #22
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	e002      	b.n	80097a8 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2209      	movs	r2, #9
 80097a6:	701a      	strb	r2, [r3, #0]

	return status;
 80097a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	371c      	adds	r7, #28
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08e      	sub	sp, #56	@ 0x38
 80097bc:	af04      	add	r7, sp, #16
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3318      	adds	r3, #24
 80097d0:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 80097e0:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 80097e8:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80097f0:	2b09      	cmp	r3, #9
 80097f2:	d009      	beq.n	8009808 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80097fa:	2b13      	cmp	r3, #19
 80097fc:	d004      	beq.n	8009808 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009804:	2b14      	cmp	r3, #20
 8009806:	d129      	bne.n	800985c <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800980e:	2b09      	cmp	r3, #9
 8009810:	d009      	beq.n	8009826 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009818:	2b13      	cmp	r3, #19
 800981a:	d004      	beq.n	8009826 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009822:	2b14      	cmp	r3, #20
 8009824:	d11a      	bne.n	800985c <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2209      	movs	r2, #9
 800982a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 8009838:	8bb9      	ldrh	r1, [r7, #28]
 800983a:	7ff8      	ldrb	r0, [r7, #31]
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	f107 0318 	add.w	r3, r7, #24
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	f107 0314 	add.w	r3, r7, #20
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	4613      	mov	r3, r2
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	f7ff fc5c 	bl	800910e <VL53LX_hist_events_consistency_check>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 800985c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009860:	4618      	mov	r0, r3
 8009862:	3728      	adds	r7, #40	@ 0x28
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009874:	2300      	movs	r3, #0
 8009876:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009890:	2b00      	cmp	r3, #0
 8009892:	d019      	beq.n	80098c8 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800989a:	4618      	mov	r0, r3
 800989c:	f002 f8b4 	bl	800ba08 <VL53LX_calc_pll_period_mm>
 80098a0:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	fb02 f303 	mul.w	r3, r2, r3
 80098b4:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80098bc:	0bdb      	lsrs	r3, r3, #15
 80098be:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	b21a      	sxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80098c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3720      	adds	r7, #32
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b08d      	sub	sp, #52	@ 0x34
 80098d8:	af04      	add	r7, sp, #16
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	4623      	mov	r3, r4
 80098e4:	80fb      	strh	r3, [r7, #6]
 80098e6:	4603      	mov	r3, r0
 80098e8:	80bb      	strh	r3, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
 80098ee:	4613      	mov	r3, r2
 80098f0:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8009912:	78b9      	ldrb	r1, [r7, #2]
 8009914:	78f8      	ldrb	r0, [r7, #3]
 8009916:	f107 030c 	add.w	r3, r7, #12
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	f107 030e 	add.w	r3, r7, #14
 8009920:	9302      	str	r3, [sp, #8]
 8009922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	23ff      	movs	r3, #255	@ 0xff
 800992e:	22c7      	movs	r2, #199	@ 0xc7
 8009930:	f000 fa01 	bl	8009d36 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8009934:	89fb      	ldrh	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d050      	beq.n	80099dc <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800993a:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800993c:	2b00      	cmp	r3, #0
 800993e:	d04d      	beq.n	80099dc <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009940:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 8009944:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009948:	78b9      	ldrb	r1, [r7, #2]
 800994a:	78f8      	ldrb	r0, [r7, #3]
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	f107 030a 	add.w	r3, r7, #10
 8009956:	9302      	str	r3, [sp, #8]
 8009958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	4623      	mov	r3, r4
 8009964:	f000 f9e7 	bl	8009d36 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996a:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800996c:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800996e:	897b      	ldrh	r3, [r7, #10]
 8009970:	461a      	mov	r2, r3
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	fb02 f303 	mul.w	r3, r2, r3
 8009978:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800997a:	89fb      	ldrh	r3, [r7, #14]
 800997c:	461a      	mov	r2, r3
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	fbb3 f3f2 	udiv	r3, r3, r2
 8009984:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009988:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800998a:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800998c:	893b      	ldrh	r3, [r7, #8]
 800998e:	461a      	mov	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	fb02 f303 	mul.w	r3, r2, r3
 8009996:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8009998:	89bb      	ldrh	r3, [r7, #12]
 800999a:	461a      	mov	r2, r3
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a2:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 80099a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	fb02 f303 	mul.w	r3, r2, r3
 80099ae:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 80099b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	4413      	add	r3, r2
 80099be:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80099c0:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 80099c2:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 80099c4:	4413      	add	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d008      	beq.n	80099e0 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	009a      	lsls	r2, r3, #2
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	e002      	b.n	80099e2 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 80099dc:	bf00      	nop
 80099de:	e000      	b.n	80099e2 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 80099e0:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	b21a      	sxth	r2, r3
 80099e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e8:	801a      	strh	r2, [r3, #0]

}
 80099ea:	bf00      	nop
 80099ec:	3724      	adds	r7, #36	@ 0x24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd90      	pop	{r4, r7, pc}

080099f2 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	4603      	mov	r3, r0
 8009a00:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	08db      	lsrs	r3, r3, #3
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	f003 0307 	and.w	r3, r3, #7
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4093      	lsls	r3, r2
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	701a      	strb	r2, [r3, #0]

}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	603a      	str	r2, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
 8009a40:	460b      	mov	r3, r1
 8009a42:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b07      	cmp	r3, #7
 8009a48:	d90a      	bls.n	8009a60 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009a4a:	79bb      	ldrb	r3, [r7, #6]
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	3b71      	subs	r3, #113	@ 0x71
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009a5e:	e00a      	b.n	8009a76 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009a60:	79bb      	ldrb	r3, [r7, #6]
 8009a62:	f1c3 030f 	rsb	r3, r3, #15
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	00db      	lsls	r3, r3, #3
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	4413      	add	r3, r2
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	701a      	strb	r2, [r3, #0]
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	4603      	mov	r3, r0
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	091b      	lsrs	r3, r3, #4
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	701a      	strb	r2, [r3, #0]

}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	4603      	mov	r3, r0
 8009aba:	603a      	str	r2, [r7, #0]
 8009abc:	71fb      	strb	r3, [r7, #7]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009ac2:	79bb      	ldrb	r3, [r7, #6]
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	4413      	add	r3, r2
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	701a      	strb	r2, [r3, #0]

}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b086      	sub	sp, #24
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60ba      	str	r2, [r7, #8]
 8009ae6:	607b      	str	r3, [r7, #4]
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]
 8009aec:	460b      	mov	r3, r1
 8009aee:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009b00:	f107 0217 	add.w	r2, r7, #23
 8009b04:	f107 0116 	add.w	r1, r7, #22
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f002 f9f6 	bl	800befc <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009b10:	f107 0214 	add.w	r2, r7, #20
 8009b14:	f107 0115 	add.w	r1, r7, #21
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff ffb1 	bl	8009a82 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	4619      	mov	r1, r3
 8009b24:	7d7b      	ldrb	r3, [r7, #21]
 8009b26:	3301      	adds	r3, #1
 8009b28:	0fda      	lsrs	r2, r3, #31
 8009b2a:	4413      	add	r3, r2
 8009b2c:	105b      	asrs	r3, r3, #1
 8009b2e:	425b      	negs	r3, r3
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	440b      	add	r3, r1
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	b21a      	sxth	r2, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da02      	bge.n	8009b4c <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	7d7a      	ldrb	r2, [r7, #21]
 8009b56:	4413      	add	r3, r2
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	b21a      	sxth	r2, r3
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b66:	2b0f      	cmp	r3, #15
 8009b68:	dd02      	ble.n	8009b70 <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	220f      	movs	r2, #15
 8009b6e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009b70:	7dbb      	ldrb	r3, [r7, #22]
 8009b72:	4619      	mov	r1, r3
 8009b74:	7d3b      	ldrb	r3, [r7, #20]
 8009b76:	3301      	adds	r3, #1
 8009b78:	0fda      	lsrs	r2, r3, #31
 8009b7a:	4413      	add	r3, r2
 8009b7c:	105b      	asrs	r3, r3, #1
 8009b7e:	425b      	negs	r3, r3
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	440b      	add	r3, r1
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	b21a      	sxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da02      	bge.n	8009b9c <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	7d3a      	ldrb	r2, [r7, #20]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	b21a      	sxth	r2, r3
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	dd02      	ble.n	8009bc0 <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	220f      	movs	r2, #15
 8009bbe:	801a      	strh	r2, [r3, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	71fb      	strb	r3, [r7, #7]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009be4:	79bb      	ldrb	r3, [r7, #6]
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <VL53LX_is_aperture_location+0x34>
 8009bf2:	7b7b      	ldrb	r3, [r7, #13]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d101      	bne.n	8009bfc <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d104      	bne.n	8009c0c <VL53LX_is_aperture_location+0x44>
 8009c02:	7b7b      	ldrb	r3, [r7, #13]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009c1a:	b590      	push	{r4, r7, lr}
 8009c1c:	b08b      	sub	sp, #44	@ 0x2c
 8009c1e:	af02      	add	r7, sp, #8
 8009c20:	603a      	str	r2, [r7, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	4603      	mov	r3, r0
 8009c26:	71fb      	strb	r3, [r7, #7]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	71bb      	strb	r3, [r7, #6]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009c5c:	f107 0416 	add.w	r4, r7, #22
 8009c60:	f107 0218 	add.w	r2, r7, #24
 8009c64:	79b9      	ldrb	r1, [r7, #6]
 8009c66:	79f8      	ldrb	r0, [r7, #7]
 8009c68:	f107 0312 	add.w	r3, r7, #18
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	f107 0314 	add.w	r3, r7, #20
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	4623      	mov	r3, r4
 8009c76:	f7ff ff32 	bl	8009ade <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009c80:	8afb      	ldrh	r3, [r7, #22]
 8009c82:	83bb      	strh	r3, [r7, #28]
 8009c84:	e04c      	b.n	8009d20 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009c86:	8b3b      	ldrh	r3, [r7, #24]
 8009c88:	83fb      	strh	r3, [r7, #30]
 8009c8a:	e03d      	b.n	8009d08 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009c8c:	8bbb      	ldrh	r3, [r7, #28]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	8bfa      	ldrh	r2, [r7, #30]
 8009c92:	b2d1      	uxtb	r1, r2
 8009c94:	f107 0211 	add.w	r2, r7, #17
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff fecb 	bl	8009a34 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009c9e:	7c78      	ldrb	r0, [r7, #17]
 8009ca0:	f107 030e 	add.w	r3, r7, #14
 8009ca4:	f107 020f 	add.w	r2, r7, #15
 8009ca8:	f107 0110 	add.w	r1, r7, #16
 8009cac:	f7ff fea1 	bl	80099f2 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009cb0:	7c3b      	ldrb	r3, [r7, #16]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	781a      	ldrb	r2, [r3, #0]
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d01b      	beq.n	8009cfc <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009cc4:	8bbb      	ldrh	r3, [r7, #28]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	8bfa      	ldrh	r2, [r7, #30]
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7ff ff7a 	bl	8009bc8 <VL53LX_is_aperture_location>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009cd8:	7efb      	ldrb	r3, [r7, #27]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce0:	881a      	ldrh	r2, [r3, #0]
 8009ce2:	88bb      	ldrh	r3, [r7, #4]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e006      	b.n	8009cfc <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfa:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009cfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	3301      	adds	r3, #1
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	83fb      	strh	r3, [r7, #30]
 8009d08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009d0c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	ddbb      	ble.n	8009c8c <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009d14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	83bb      	strh	r3, [r7, #28]
 8009d20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d24:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	ddac      	ble.n	8009c86 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	3724      	adds	r7, #36	@ 0x24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd90      	pop	{r4, r7, pc}

08009d36 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009d36:	b590      	push	{r4, r7, lr}
 8009d38:	b08d      	sub	sp, #52	@ 0x34
 8009d3a:	af02      	add	r7, sp, #8
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	461a      	mov	r2, r3
 8009d44:	4623      	mov	r3, r4
 8009d46:	71fb      	strb	r3, [r7, #7]
 8009d48:	4603      	mov	r3, r0
 8009d4a:	71bb      	strb	r3, [r7, #6]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	717b      	strb	r3, [r7, #5]
 8009d50:	4613      	mov	r3, r2
 8009d52:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 8009d96:	f107 041c 	add.w	r4, r7, #28
 8009d9a:	f107 021e 	add.w	r2, r7, #30
 8009d9e:	79b9      	ldrb	r1, [r7, #6]
 8009da0:	79f8      	ldrb	r0, [r7, #7]
 8009da2:	f107 0318 	add.w	r3, r7, #24
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	f107 031a 	add.w	r3, r7, #26
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	4623      	mov	r3, r4
 8009db0:	f7ff fe95 	bl	8009ade <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009db4:	f107 0414 	add.w	r4, r7, #20
 8009db8:	f107 0216 	add.w	r2, r7, #22
 8009dbc:	7939      	ldrb	r1, [r7, #4]
 8009dbe:	7978      	ldrb	r0, [r7, #5]
 8009dc0:	f107 0310 	add.w	r3, r7, #16
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	f107 0312 	add.w	r3, r7, #18
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	4623      	mov	r3, r4
 8009dce:	f7ff fe86 	bl	8009ade <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dda:	2200      	movs	r2, #0
 8009ddc:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009dde:	8abb      	ldrh	r3, [r7, #20]
 8009de0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009de2:	e06c      	b.n	8009ebe <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009de4:	8afb      	ldrh	r3, [r7, #22]
 8009de6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009de8:	e05d      	b.n	8009ea6 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009dea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009df0:	b2d1      	uxtb	r1, r2
 8009df2:	f107 020f 	add.w	r2, r7, #15
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff fe1c 	bl	8009a34 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009dfc:	7bf8      	ldrb	r0, [r7, #15]
 8009dfe:	f107 030c 	add.w	r3, r7, #12
 8009e02:	f107 020d 	add.w	r2, r7, #13
 8009e06:	f107 010e 	add.w	r1, r7, #14
 8009e0a:	f7ff fdf2 	bl	80099f2 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
 8009e10:	461a      	mov	r2, r3
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	4413      	add	r3, r2
 8009e16:	781a      	ldrb	r2, [r3, #0]
 8009e18:	7b3b      	ldrb	r3, [r7, #12]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d03b      	beq.n	8009e9a <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009e28:	b2d2      	uxtb	r2, r2
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fecb 	bl	8009bc8 <VL53LX_is_aperture_location>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009e38:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009e40:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009e42:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009e44:	e002      	b.n	8009e4c <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e4a:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009e4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009e50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009e54:	429a      	cmp	r2, r3
 8009e56:	db19      	blt.n	8009e8c <VL53LX_calc_mm_effective_spads+0x156>
 8009e58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009e5c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009e60:	429a      	cmp	r2, r3
 8009e62:	dc13      	bgt.n	8009e8c <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009e64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009e68:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	db0d      	blt.n	8009e8c <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009e70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009e74:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	dc07      	bgt.n	8009e8c <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e7e:	881a      	ldrh	r2, [r3, #0]
 8009e80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009e82:	4413      	add	r3, r2
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e88:	801a      	strh	r2, [r3, #0]
 8009e8a:	e006      	b.n	8009e9a <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e8e:	881a      	ldrh	r2, [r3, #0]
 8009e90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009e92:	4413      	add	r3, r2
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e98:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009e9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009ea6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009eaa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	dd9b      	ble.n	8009dea <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009eb2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	3301      	adds	r3, #1
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009ebe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009ec2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	dd8c      	ble.n	8009de4 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	372c      	adds	r7, #44	@ 0x2c
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd90      	pop	{r4, r7, pc}

08009ed4 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7fd ffae 	bl	8007e48 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	7c9a      	ldrb	r2, [r3, #18]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	3314      	adds	r3, #20
 8009f16:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]
 8009f1c:	e06b      	b.n	8009ff6 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d034      	beq.n	8009f92 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009f28:	e05f      	b.n	8009fea <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009f62:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	8a9a      	ldrh	r2, [r3, #20]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	601a      	str	r2, [r3, #0]

			break;
 8009f90:	e02b      	b.n	8009fea <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8009fc2:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	611a      	str	r2, [r3, #16]
			break;
 8009fe8:	bf00      	nop
		}

		pdata++;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	334c      	adds	r3, #76	@ 0x4c
 8009fee:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	7c9b      	ldrb	r3, [r3, #18]
 8009ffa:	7dfa      	ldrb	r2, [r7, #23]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d38e      	bcc.n	8009f1e <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b089      	sub	sp, #36	@ 0x24
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a012:	2300      	movs	r3, #0
 800a014:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3318      	adds	r3, #24
 800a01a:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a022:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800a02a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a032:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	4413      	add	r3, r2
 800a044:	3302      	adds	r3, #2
 800a046:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a06c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3724      	adds	r7, #36	@ 0x24
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b08b      	sub	sp, #44	@ 0x2c
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a086:	2300      	movs	r3, #0
 800a088:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3318      	adds	r3, #24
 800a08e:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a096:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a09e:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a0a6:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800a0ae:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a0b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0b4:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a0b6:	7bfa      	ldrb	r2, [r7, #15]
 800a0b8:	6939      	ldr	r1, [r7, #16]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	440b      	add	r3, r1
 800a0c4:	3306      	adds	r3, #6
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a0d0:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a0d8:	e01a      	b.n	800a110 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a0da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	214c      	movs	r1, #76	@ 0x4c
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	334a      	adds	r3, #74	@ 0x4a
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d209      	bcs.n	800a106 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	214c      	movs	r1, #76	@ 0x4c
 800a0fa:	fb01 f303 	mul.w	r3, r1, r3
 800a0fe:	4413      	add	r3, r2
 800a100:	334a      	adds	r3, #74	@ 0x4a
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a10a:	3301      	adds	r3, #1
 800a10c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	7c9b      	ldrb	r3, [r3, #18]
 800a114:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3de      	bcc.n	800a0da <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a11c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a126:	623b      	str	r3, [r7, #32]
 800a128:	e00e      	b.n	800a148 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a12a:	89bb      	ldrh	r3, [r7, #12]
 800a12c:	039b      	lsls	r3, r3, #14
 800a12e:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a132:	6a3a      	ldr	r2, [r7, #32]
 800a134:	fbb2 f3f3 	udiv	r3, r2, r3
 800a138:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a140:	d302      	bcc.n	800a148 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a142:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a146:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a148:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a14e:	6939      	ldr	r1, [r7, #16]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	440b      	add	r3, r1
 800a15a:	3306      	adds	r3, #6
 800a15c:	4602      	mov	r2, r0
 800a15e:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a160:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a164:	4618      	mov	r0, r3
 800a166:	372c      	adds	r7, #44	@ 0x2c
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	@ 0x28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a178:	2300      	movs	r3, #0
 800a17a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3318      	adds	r3, #24
 800a182:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	332c      	adds	r3, #44	@ 0x2c
 800a188:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	33c2      	adds	r3, #194	@ 0xc2
 800a18e:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800a196:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	3302      	adds	r3, #2
 800a19c:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	785b      	ldrb	r3, [r3, #1]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d11e      	bne.n	800a1fa <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d05d      	beq.n	800a29c <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	719a      	strb	r2, [r3, #6]
 800a1f8:	e050      	b.n	800a29c <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a200:	461a      	mov	r2, r3
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	4413      	add	r3, r2
 800a206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d11e      	bne.n	800a24c <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d034      	beq.n	800a29c <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	719a      	strb	r2, [r3, #6]
 800a24a:	e027      	b.n	800a29c <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a252:	461a      	mov	r2, r3
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	4413      	add	r3, r2
 800a258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d11d      	bne.n	800a29c <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d109      	bne.n	800a2b8 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	f203 21fe 	addw	r1, r3, #766	@ 0x2fe
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6978      	ldr	r0, [r7, #20]
 800a2b4:	f7fd f99e 	bl	80075f4 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3728      	adds	r7, #40	@ 0x28
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b089      	sub	sp, #36	@ 0x24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	607a      	str	r2, [r7, #4]
 800a2ce:	603b      	str	r3, [r7, #0]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3318      	adds	r3, #24
 800a2dc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a2e4:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	7afa      	ldrb	r2, [r7, #11]
 800a2f0:	701a      	strb	r2, [r3, #0]
 800a2f2:	e01e      	b.n	800a332 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d111      	bne.n	800a326 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2bff      	cmp	r3, #255	@ 0xff
 800a308:	d103      	bne.n	800a312 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2280      	movs	r2, #128	@ 0x80
 800a30e:	701a      	strb	r2, [r3, #0]
 800a310:	e005      	b.n	800a31e <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	e005      	b.n	800a332 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a332:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3724      	adds	r7, #36	@ 0x24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b08a      	sub	sp, #40	@ 0x28
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	461a      	mov	r2, r3
 800a34e:	460b      	mov	r3, r1
 800a350:	72fb      	strb	r3, [r7, #11]
 800a352:	4613      	mov	r3, r2
 800a354:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a356:	2300      	movs	r3, #0
 800a358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3318      	adds	r3, #24
 800a360:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a36a:	7afa      	ldrb	r2, [r7, #11]
 800a36c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a36e:	4611      	mov	r1, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe f940 	bl	80085f6 <VL53LX_calc_macro_period_us>
 800a376:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a37e:	2301      	movs	r3, #1
 800a380:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	031b      	lsls	r3, r3, #12
 800a386:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	085b      	lsrs	r3, r3, #1
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	4413      	add	r3, r2
 800a390:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39a:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	2bff      	cmp	r3, #255	@ 0xff
 800a3a0:	d904      	bls.n	800a3ac <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	22ff      	movs	r2, #255	@ 0xff
 800a3a6:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
 800a3aa:	e004      	b.n	800a3b6 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	7afa      	ldrb	r2, [r7, #11]
 800a3ba:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a3be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10a      	bne.n	800a3dc <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	214b      	movs	r1, #75	@ 0x4b
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f007 f8b9 	bl	8011548 <VL53LX_WrByte>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a3dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	2160      	movs	r1, #96	@ 0x60
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f007 f8aa 	bl	8011548 <VL53LX_WrByte>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a400:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800a408:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a40a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d109      	bne.n	800a426 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a412:	f107 0214 	add.w	r2, r7, #20
 800a416:	2302      	movs	r3, #2
 800a418:	2178      	movs	r1, #120	@ 0x78
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f007 f828 	bl	8011470 <VL53LX_WriteMulti>
 800a420:	4603      	mov	r3, r0
 800a422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	893a      	ldrh	r2, [r7, #8]
 800a42a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a42e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a432:	2b00      	cmp	r3, #0
 800a434:	d108      	bne.n	800a448 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a436:	893b      	ldrh	r3, [r7, #8]
 800a438:	461a      	mov	r2, r3
 800a43a:	211c      	movs	r1, #28
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f007 f8ad 	bl	801159c <VL53LX_WrWord>
 800a442:	4603      	mov	r3, r0
 800a444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a448:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d108      	bne.n	800a462 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a450:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a452:	461a      	mov	r2, r3
 800a454:	2164      	movs	r1, #100	@ 0x64
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f007 f8a0 	bl	801159c <VL53LX_WrWord>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a462:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a466:	2b00      	cmp	r3, #0
 800a468:	d108      	bne.n	800a47c <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a46a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a46c:	461a      	mov	r2, r3
 800a46e:	2166      	movs	r1, #102	@ 0x66
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f007 f893 	bl	801159c <VL53LX_WrWord>
 800a476:	4603      	mov	r3, r0
 800a478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a47c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a480:	4618      	mov	r0, r3
 800a482:	3728      	adds	r7, #40	@ 0x28
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a48c:	b0a2      	sub	sp, #136	@ 0x88
 800a48e:	af00      	add	r7, sp, #0
 800a490:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a492:	2300      	movs	r3, #0
 800a494:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a49a:	3318      	adds	r3, #24
 800a49c:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a49e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800a4a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800a4a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4a8:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a4b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4b2:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800a4b6:	3318      	adds	r3, #24
 800a4b8:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a4ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4bc:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a4be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4c0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a4c4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a4c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a4ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 800a4d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a4d6:	4413      	add	r3, r2
 800a4d8:	2200      	movs	r2, #0
 800a4da:	461c      	mov	r4, r3
 800a4dc:	4615      	mov	r5, r2
 800a4de:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 800a4e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d103      	bne.n	800a4f2 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800a4ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a4ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a4f2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	462b      	mov	r3, r5
 800a4fa:	f04f 0000 	mov.w	r0, #0
 800a4fe:	f04f 0100 	mov.w	r1, #0
 800a502:	0159      	lsls	r1, r3, #5
 800a504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a508:	0150      	lsls	r0, r2, #5
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	ebb2 0804 	subs.w	r8, r2, r4
 800a512:	eb63 0905 	sbc.w	r9, r3, r5
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	f04f 0300 	mov.w	r3, #0
 800a51e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800a522:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800a526:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800a52a:	4690      	mov	r8, r2
 800a52c:	4699      	mov	r9, r3
 800a52e:	eb18 0304 	adds.w	r3, r8, r4
 800a532:	633b      	str	r3, [r7, #48]	@ 0x30
 800a534:	eb49 0305 	adc.w	r3, r9, r5
 800a538:	637b      	str	r3, [r7, #52]	@ 0x34
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a546:	4629      	mov	r1, r5
 800a548:	00cb      	lsls	r3, r1, #3
 800a54a:	4621      	mov	r1, r4
 800a54c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a550:	4621      	mov	r1, r4
 800a552:	00ca      	lsls	r2, r1, #3
 800a554:	4610      	mov	r0, r2
 800a556:	4619      	mov	r1, r3
 800a558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a55c:	2200      	movs	r2, #0
 800a55e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a560:	647a      	str	r2, [r7, #68]	@ 0x44
 800a562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a566:	f7f6 fb8f 	bl	8000c88 <__aeabi_uldivmod>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a572:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a576:	4622      	mov	r2, r4
 800a578:	462b      	mov	r3, r5
 800a57a:	f04f 0000 	mov.w	r0, #0
 800a57e:	f04f 0100 	mov.w	r1, #0
 800a582:	0159      	lsls	r1, r3, #5
 800a584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a588:	0150      	lsls	r0, r2, #5
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	ebb2 0a04 	subs.w	sl, r2, r4
 800a592:	eb63 0b05 	sbc.w	fp, r3, r5
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a5a2:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800a5a6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800a5aa:	4692      	mov	sl, r2
 800a5ac:	469b      	mov	fp, r3
 800a5ae:	eb1a 0304 	adds.w	r3, sl, r4
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5b4:	eb4b 0305 	adc.w	r3, fp, r5
 800a5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5ba:	f04f 0200 	mov.w	r2, #0
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	00cb      	lsls	r3, r1, #3
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	00ca      	lsls	r2, r1, #3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a5dc:	2200      	movs	r2, #0
 800a5de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a5e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a5e6:	f7f6 fb4f 	bl	8000c88 <__aeabi_uldivmod>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a5f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a5f8:	8ad2      	ldrh	r2, [r2, #22]
 800a5fa:	fb02 f303 	mul.w	r3, r2, r3
 800a5fe:	2200      	movs	r2, #0
 800a600:	623b      	str	r3, [r7, #32]
 800a602:	627a      	str	r2, [r7, #36]	@ 0x24
 800a604:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a608:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 800a60c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a610:	4313      	orrs	r3, r2
 800a612:	d105      	bne.n	800a620 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800a614:	f04f 0201 	mov.w	r2, #1
 800a618:	f04f 0300 	mov.w	r3, #0
 800a61c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 800a620:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	f04f 0400 	mov.w	r4, #0
 800a62c:	f04f 0500 	mov.w	r5, #0
 800a630:	015d      	lsls	r5, r3, #5
 800a632:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a636:	0154      	lsls	r4, r2, #5
 800a638:	4622      	mov	r2, r4
 800a63a:	462b      	mov	r3, r5
 800a63c:	1a14      	subs	r4, r2, r0
 800a63e:	61bc      	str	r4, [r7, #24]
 800a640:	eb63 0301 	sbc.w	r3, r3, r1
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	f04f 0200 	mov.w	r2, #0
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a652:	464c      	mov	r4, r9
 800a654:	00a3      	lsls	r3, r4, #2
 800a656:	4644      	mov	r4, r8
 800a658:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a65c:	4644      	mov	r4, r8
 800a65e:	00a2      	lsls	r2, r4, #2
 800a660:	4614      	mov	r4, r2
 800a662:	461d      	mov	r5, r3
 800a664:	4623      	mov	r3, r4
 800a666:	181b      	adds	r3, r3, r0
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	462b      	mov	r3, r5
 800a66c:	eb41 0303 	adc.w	r3, r1, r3
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	f04f 0200 	mov.w	r2, #0
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a67e:	4629      	mov	r1, r5
 800a680:	02cb      	lsls	r3, r1, #11
 800a682:	4621      	mov	r1, r4
 800a684:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a688:	4621      	mov	r1, r4
 800a68a:	02ca      	lsls	r2, r1, #11
 800a68c:	461c      	mov	r4, r3
 800a68e:	4613      	mov	r3, r2
 800a690:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a694:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a698:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a69c:	f7f6 faf4 	bl	8000c88 <__aeabi_uldivmod>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800a6a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	f04f 0400 	mov.w	r4, #0
 800a6b4:	f04f 0500 	mov.w	r5, #0
 800a6b8:	015d      	lsls	r5, r3, #5
 800a6ba:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a6be:	0154      	lsls	r4, r2, #5
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	1a14      	subs	r4, r2, r0
 800a6c6:	60bc      	str	r4, [r7, #8]
 800a6c8:	eb63 0301 	sbc.w	r3, r3, r1
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	f04f 0300 	mov.w	r3, #0
 800a6d6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800a6da:	464c      	mov	r4, r9
 800a6dc:	00a3      	lsls	r3, r4, #2
 800a6de:	4644      	mov	r4, r8
 800a6e0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a6e4:	4644      	mov	r4, r8
 800a6e6:	00a2      	lsls	r2, r4, #2
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	461d      	mov	r5, r3
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	181b      	adds	r3, r3, r0
 800a6f0:	603b      	str	r3, [r7, #0]
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	eb41 0303 	adc.w	r3, r1, r3
 800a6f8:	607b      	str	r3, [r7, #4]
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	f04f 0300 	mov.w	r3, #0
 800a702:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a706:	4629      	mov	r1, r5
 800a708:	02cb      	lsls	r3, r1, #11
 800a70a:	4621      	mov	r1, r4
 800a70c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800a710:	4621      	mov	r1, r4
 800a712:	02ca      	lsls	r2, r1, #11
 800a714:	461c      	mov	r4, r3
 800a716:	4613      	mov	r3, r2
 800a718:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800a71c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a720:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a724:	f7f6 fab0 	bl	8000c88 <__aeabi_uldivmod>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 800a730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a734:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d802      	bhi.n	800a744 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800a73e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a740:	2202      	movs	r2, #2
 800a742:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a744:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3788      	adds	r7, #136	@ 0x88
 800a74c:	46bd      	mov	sp, r7
 800a74e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a754 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b096      	sub	sp, #88	@ 0x58
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a762:	2300      	movs	r3, #0
 800a764:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3318      	adds	r3, #24
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a770:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a774:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a778:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800a77c:	331c      	adds	r3, #28
 800a77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a780:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800a784:	2b01      	cmp	r3, #1
 800a786:	d107      	bne.n	800a798 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	889b      	ldrh	r3, [r3, #4]
 800a78c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	609a      	str	r2, [r3, #8]
 800a796:	e002      	b.n	800a79e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	899b      	ldrh	r3, [r3, #12]
 800a7a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ae:	89db      	ldrh	r3, [r3, #14]
 800a7b0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d126      	bne.n	800a816 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d022      	beq.n	800a816 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a7d0:	f107 0317 	add.w	r3, r7, #23
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fe66 	bl	800b4a8 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e8:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d003      	beq.n	800a7f8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7f6:	e006      	b.n	800a806 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fe:	3202      	adds	r2, #2
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 800a806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a808:	889b      	ldrh	r3, [r3, #4]
 800a80a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a810:	88db      	ldrh	r3, [r3, #6]
 800a812:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a820:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	795b      	ldrb	r3, [r3, #5]
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	b2da      	uxtb	r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10a      	bne.n	800a856 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a840:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	795b      	ldrb	r3, [r3, #5]
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	b2da      	uxtb	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a85c:	2301      	movs	r3, #1
 800a85e:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a866:	2b01      	cmp	r3, #1
 800a868:	d108      	bne.n	800a87c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a86e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a876:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800a87a:	e017      	b.n	800a8ac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x158>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a87c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a880:	019a      	lsls	r2, r3, #6
 800a882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a884:	fbb2 f3f3 	udiv	r3, r2, r3
 800a888:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800a892:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a894:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a898:	019a      	lsls	r2, r3, #6
 800a89a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a8aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d12a      	bne.n	800a90c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b8>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800a8be:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a8c2:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a8c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8c6:	119b      	asrs	r3, r3, #6
 800a8c8:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a8ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8d0:	db02      	blt.n	800a8d8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x184>
			itemp32 = 0xFFFF;
 800a8d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8d6:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a8d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8da:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a8ec:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f0:	119b      	asrs	r3, r3, #6
 800a8f2:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a8f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8fa:	db02      	blt.n	800a902 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ae>
			itemp32 = 0xFFFF;
 800a8fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a900:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a904:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	81da      	strh	r2, [r3, #14]
 800a90a:	e042      	b.n	800a992 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>
	} else if (pconfig->scaler_calc_method == 1) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a912:	2b01      	cmp	r3, #1
 800a914:	d13d      	bne.n	800a992 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23e>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a91a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a922:	2b00      	cmp	r3, #0
 800a924:	da00      	bge.n	800a928 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d4>
 800a926:	330f      	adds	r3, #15
 800a928:	111b      	asrs	r3, r3, #4
 800a92a:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a92c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a932:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a938:	4413      	add	r3, r2
 800a93a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a93c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a93e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a942:	db02      	blt.n	800a94a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
			itemp32 = 0xFFFF;
 800a944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a948:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a94c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a956:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a95c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95e:	4a55      	ldr	r2, [pc, #340]	@ (800aab4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 800a960:	fb82 1203 	smull	r1, r2, r2, r3
 800a964:	1152      	asrs	r2, r2, #5
 800a966:	17db      	asrs	r3, r3, #31
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800a96c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a972:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a978:	4413      	add	r3, r2
 800a97a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800a97c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a97e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a982:	db02      	blt.n	800a98a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x236>
			itemp32 = 0xFFFF;
 800a984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a988:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a98a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	785b      	ldrb	r3, [r3, #1]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d17f      	bne.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
 800a99a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d07b      	beq.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a9ae:	f107 0317 	add.w	r3, r7, #23
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 fd77 	bl	800b4a8 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9bc:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d049      	beq.n	800aa62 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d0:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
		if ((histo_merge_nb > 0) &&
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d144      	bne.n	800aa62 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d041      	beq.n	800aa62 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			(nXtalk != 0)) {
			cXtalk =
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 800a9e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da01      	bge.n	800a9f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29e>
 800a9ee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a9f2:	125b      	asrs	r3, r3, #9
 800a9f4:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d005      	beq.n	800aa08 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b4>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa00:	461a      	mov	r2, r3
			if ((max ==  0)||
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	4293      	cmp	r3, r2
 800aa06:	db03      	blt.n	800aa10 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2bc>
				pout->new_xtalk_applied_flag = 0;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	719a      	strb	r2, [r3, #6]
 800aa0e:	e028      	b.n	800aa62 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
			else {
				incXtalk = nXtalk / max;
 800aa10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa14:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa18:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800aa24:	e014      	b.n	800aa50 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fc>
					cval += incXtalk;
 800aa26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 800aa2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa30:	4a21      	ldr	r2, [pc, #132]	@ (800aab8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 800aa32:	fba2 2303 	umull	r2, r3, r2, r3
 800aa36:	095a      	lsrs	r2, r3, #5
 800aa38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa3a:	441a      	add	r2, r3
 800aa3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3e:	601a      	str	r2, [r3, #0]
					pcpo++;
 800aa40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa42:	3304      	adds	r3, #4
 800aa44:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 800aa46:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800aa50:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	3b01      	subs	r3, #1
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d3e4      	bcc.n	800aa26 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				}
				*pcpo = nXtalk;
 800aa5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa60:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	799b      	ldrb	r3, [r3, #6]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d017      	beq.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800aa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa84:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	789b      	ldrb	r3, [r3, #2]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d105      	bne.n	800aa9a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x346>

			pconfig->smudge_corr_apply_enabled = 0;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800aa9a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d002      	beq.n	800aaa8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x354>
		pout->smudge_corr_valid = 1;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800aaa8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3758      	adds	r7, #88	@ 0x58
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	66666667 	.word	0x66666667
 800aab8:	51eb851f 	.word	0x51eb851f

0800aabc <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800aabc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aac0:	b0a2      	sub	sp, #136	@ 0x88
 800aac2:	af02      	add	r7, sp, #8
 800aac4:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	3318      	adds	r3, #24
 800aad0:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800aad8:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800aada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aadc:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800aae0:	3314      	adds	r3, #20
 800aae2:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800aae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aae6:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 800aaea:	3318      	adds	r3, #24
 800aaec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800aaee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaf0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800aaf4:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800aaf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaf8:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800aafa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aafc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800ab00:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ab4c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ab50:	4619      	mov	r1, r3
 800ab52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab54:	f000 fca8 	bl	800b4a8 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800ab58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800ab60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab62:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
	if ((histo_merge_nb == 0) ||
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d002      	beq.n	800ab70 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800ab70:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ab72:	f000 fb1b 	bl	800b1ac <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ab76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800ab7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab86:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ab8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab8c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d901      	bls.n	800ab98 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ab9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aba0:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d106      	bne.n	800abb6 <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800aba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abaa:	f893 2184 	ldrb.w	r2, [r3, #388]	@ 0x184
 800abae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d101      	bne.n	800abba <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 800abba:	2300      	movs	r3, #0
	merging_complete =
 800abbc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800abc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abc2:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d10e      	bne.n	800abe6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 800abc8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00a      	beq.n	800abe6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 800abd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abd2:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 800abd6:	2b09      	cmp	r3, #9
 800abd8:	d105      	bne.n	800abe6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800abda:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e000      	b.n	800abe8 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 800abe6:	2300      	movs	r3, #0
	run_smudge_detection =
 800abe8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800abec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abee:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 800abf2:	2b09      	cmp	r3, #9
 800abf4:	f000 80a6 	beq.w	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800abf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abfa:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	f040 80a1 	bne.w	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 800ac02:	2302      	movs	r3, #2
 800ac04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ac0e:	e02d      	b.n	800ac6c <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 800ac10:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800ac14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac16:	234c      	movs	r3, #76	@ 0x4c
 800ac18:	fb01 f303 	mul.w	r3, r1, r3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	335e      	adds	r3, #94	@ 0x5e
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b09      	cmp	r3, #9
 800ac24:	d11d      	bne.n	800ac62 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac26:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800ac2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac2c:	234c      	movs	r3, #76	@ 0x4c
 800ac2e:	fb01 f303 	mul.w	r3, r1, r3
 800ac32:	4413      	add	r3, r2
 800ac34:	335a      	adds	r3, #90	@ 0x5a
 800ac36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac3a:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ac3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac3e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac40:	429a      	cmp	r2, r3
 800ac42:	dc03      	bgt.n	800ac4c <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ac4a:	e00a      	b.n	800ac62 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 800ac4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d106      	bne.n	800ac62 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 800ac54:	2301      	movs	r3, #1
 800ac56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 800ac5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ac5e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800ac62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ac66:	3301      	adds	r3, #1
 800ac68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ac6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac6e:	7c9a      	ldrb	r2, [r3, #18]
 800ac70:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d3cb      	bcc.n	800ac10 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ac78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d102      	bne.n	800ac86 <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800ac86:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 800ac8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac8c:	234c      	movs	r3, #76	@ 0x4c
 800ac8e:	fb01 f303 	mul.w	r3, r1, r3
 800ac92:	4413      	add	r3, r2
 800ac94:	3348      	adds	r3, #72	@ 0x48
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 800ac9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d150      	bne.n	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 800aca2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aca4:	2200      	movs	r2, #0
 800aca6:	469a      	mov	sl, r3
 800aca8:	4693      	mov	fp, r2
 800acaa:	4652      	mov	r2, sl
 800acac:	465b      	mov	r3, fp
 800acae:	f04f 0000 	mov.w	r0, #0
 800acb2:	f04f 0100 	mov.w	r1, #0
 800acb6:	0159      	lsls	r1, r3, #5
 800acb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800acbc:	0150      	lsls	r0, r2, #5
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	ebb2 040a 	subs.w	r4, r2, sl
 800acc6:	eb63 050b 	sbc.w	r5, r3, fp
 800acca:	f04f 0200 	mov.w	r2, #0
 800acce:	f04f 0300 	mov.w	r3, #0
 800acd2:	00ab      	lsls	r3, r5, #2
 800acd4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800acd8:	00a2      	lsls	r2, r4, #2
 800acda:	4614      	mov	r4, r2
 800acdc:	461d      	mov	r5, r3
 800acde:	eb14 080a 	adds.w	r8, r4, sl
 800ace2:	eb45 090b 	adc.w	r9, r5, fp
 800ace6:	f04f 0200 	mov.w	r2, #0
 800acea:	f04f 0300 	mov.w	r3, #0
 800acee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800acf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800acf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800acfa:	4690      	mov	r8, r2
 800acfc:	4699      	mov	r9, r3
 800acfe:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 800ad02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	024b      	lsls	r3, r1, #9
 800ad10:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800ad14:	0242      	lsls	r2, r0, #9
 800ad16:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800ad1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1e:	2200      	movs	r2, #0
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	61fa      	str	r2, [r7, #28]
 800ad24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ad28:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	428a      	cmp	r2, r1
 800ad30:	4629      	mov	r1, r5
 800ad32:	418b      	sbcs	r3, r1
 800ad34:	d203      	bcs.n	800ad3e <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ad3c:	e002      	b.n	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 800ad44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 810b 	beq.w	800af64 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 800ad4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad50:	2200      	movs	r2, #0
 800ad52:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ad54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad56:	f7ff fb97 	bl	800a488 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ad5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad5c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ad62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ad6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad70:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800ad76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	1ad2      	subs	r2, r2, r3
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7e:	4413      	add	r3, r2
 800ad80:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ad82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da02      	bge.n	800ad8e <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 800ad88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad8a:	425b      	negs	r3, r3
 800ad8c:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ad8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad96:	4293      	cmp	r3, r2
 800ad98:	dd0c      	ble.n	800adb4 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ad9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ad9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ad9e:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ada0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada2:	429a      	cmp	r2, r3
 800ada4:	da03      	bge.n	800adae <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 800ada6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ada8:	2201      	movs	r2, #1
 800adaa:	709a      	strb	r2, [r3, #2]
 800adac:	e002      	b.n	800adb4 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800adae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adb0:	2202      	movs	r2, #2
 800adb2:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800adb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adbc:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800adbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d906      	bls.n	800add8 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 800adca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adcc:	2201      	movs	r2, #1
 800adce:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800add0:	2302      	movs	r3, #2
 800add2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800add6:	e014      	b.n	800ae02 <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 800add8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800adde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ade0:	2000      	movs	r0, #0
 800ade2:	6139      	str	r1, [r7, #16]
 800ade4:	6178      	str	r0, [r7, #20]
 800ade6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800adea:	4621      	mov	r1, r4
 800adec:	1851      	adds	r1, r2, r1
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	4629      	mov	r1, r5
 800adf2:	eb43 0101 	adc.w	r1, r3, r1
 800adf6:	60f9      	str	r1, [r7, #12]
 800adf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800adfe:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ae02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d202      	bcs.n	800ae14 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ae14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae16:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae28:	f7f5 ff2e 	bl	8000c88 <__aeabi_uldivmod>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ae30:	4613      	mov	r3, r2
 800ae32:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ae34:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	1ad2      	subs	r2, r2, r3
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3c:	4413      	add	r3, r2
 800ae3e:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ae40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da02      	bge.n	800ae4c <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 800ae46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae48:	425b      	negs	r3, r3
 800ae4a:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 800ae4c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d112      	bne.n	800ae7a <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ae54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ae5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	db0c      	blt.n	800ae7a <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ae60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 800ae62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 800ae64:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ae66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	da03      	bge.n	800ae74 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 800ae6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae6e:	2201      	movs	r2, #1
 800ae70:	70da      	strb	r2, [r3, #3]
 800ae72:	e002      	b.n	800ae7a <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ae74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae76:	2202      	movs	r2, #2
 800ae78:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ae7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d108      	bne.n	800ae94 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ae82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ae88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	da02      	bge.n	800ae94 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 800ae8e:	2302      	movs	r3, #2
 800ae90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 800ae94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae96:	2200      	movs	r2, #0
 800ae98:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ae9a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d112      	bne.n	800aec8 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800aea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aea4:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00e      	beq.n	800aec8 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800aeaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800aeb6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d905      	bls.n	800aec8 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 800aebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aebe:	2201      	movs	r2, #1
 800aec0:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800aec2:	2302      	movs	r3, #2
 800aec4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800aec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aeca:	7c1b      	ldrb	r3, [r3, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d007      	beq.n	800aee0 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800aed0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aed2:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800aed4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d902      	bls.n	800aee0 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 800aeda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800aee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aee2:	7c1b      	ldrb	r3, [r3, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d107      	bne.n	800aef8 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800aee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aeea:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800aeec:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d202      	bcs.n	800aef8 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 800aef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800aef8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aefa:	089b      	lsrs	r3, r3, #2
 800aefc:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800aefe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af04:	d301      	bcc.n	800af0a <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 800af06:	4b45      	ldr	r3, [pc, #276]	@ (800b01c <VL53LX_dynamic_xtalk_correction_corrector+0x560>)
 800af08:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 800af0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10d      	bne.n	800af2e <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af12:	2300      	movs	r3, #0
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	2301      	movs	r3, #1
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af1e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af22:	f7ff fc17 	bl	800a754 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800af26:	2302      	movs	r3, #2
 800af28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800af2c:	e009      	b.n	800af42 <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af2e:	2301      	movs	r3, #1
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	2301      	movs	r3, #1
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af3a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af3e:	f7ff fc09 	bl	800a754 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800af42:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800af46:	2b02      	cmp	r3, #2
 800af48:	d10c      	bne.n	800af64 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 800af4a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800af4c:	f04f 0200 	mov.w	r2, #0
 800af50:	f04f 0300 	mov.w	r3, #0
 800af54:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800af58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800af5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af60:	2200      	movs	r2, #0
 800af62:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800af64:	2300      	movs	r3, #0
 800af66:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 800af6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d14d      	bne.n	800b00e <VL53LX_dynamic_xtalk_correction_corrector+0x552>

		pint->nodetect_counter += 1;
 800af72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	1c5a      	adds	r2, r3, #1
 800af78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af7a:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800af7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af7e:	691a      	ldr	r2, [r3, #16]
 800af80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af84:	429a      	cmp	r2, r3
 800af86:	d202      	bcs.n	800af8e <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800af8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af92:	673b      	str	r3, [r7, #112]	@ 0x70

		if (pdev->tuning_parms.tp_hist_merge == 1)
 800af94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af96:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d107      	bne.n	800afae <VL53LX_dynamic_xtalk_correction_corrector+0x4f2>
			xtalk_offset_out = xtalk_offset_out *
			(uint32_t)(pdev->tuning_parms.tp_hist_merge_max_size);
 800af9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afa0:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800afa4:	461a      	mov	r2, r3
			xtalk_offset_out = xtalk_offset_out *
 800afa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afa8:	fb02 f303 	mul.w	r3, r2, r3
 800afac:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 800afae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d110      	bne.n	800afd8 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800afb6:	2300      	movs	r3, #0
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	2300      	movs	r3, #0
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afc2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800afc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afc6:	f7ff fbc5 	bl	800a754 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800afca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afcc:	2202      	movs	r2, #2
 800afce:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800afd0:	2302      	movs	r3, #2
 800afd2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800afd6:	e009      	b.n	800afec <VL53LX_dynamic_xtalk_correction_corrector+0x530>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800afd8:	2301      	movs	r3, #1
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	2300      	movs	r3, #0
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afe2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afe4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800afe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afe8:	f7ff fbb4 	bl	800a754 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800afec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d10c      	bne.n	800b00e <VL53LX_dynamic_xtalk_correction_corrector+0x552>
			pint->accumulator = 0;
 800aff4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b00a:	2200      	movs	r2, #0
 800b00c:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b00e:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 800b012:	4618      	mov	r0, r3
 800b014:	3780      	adds	r7, #128	@ 0x80
 800b016:	46bd      	mov	sp, r7
 800b018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b01c:	0003ffff 	.word	0x0003ffff

0800b020 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b028:	2300      	movs	r3, #0
 800b02a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3318      	adds	r3, #24
 800b030:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800b038:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2394 	strb.w	r2, [r3, #916]	@ 0x394
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2395 	strb.w	r2, [r3, #917]	@ 0x395
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b064:	2200      	movs	r2, #0
 800b066:	f8a3 2398 	strh.w	r2, [r3, #920]	@ 0x398
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b070:	461a      	mov	r2, r3
 800b072:	2364      	movs	r3, #100	@ 0x64
 800b074:	f8c2 339c 	str.w	r3, [r2, #924]	@ 0x39c
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b07e:	461a      	mov	r2, r3
 800b080:	2300      	movs	r3, #0
 800b082:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b098:	461a      	mov	r2, r3
 800b09a:	23c8      	movs	r3, #200	@ 0xc8
 800b09c:	f8c2 33a8 	str.w	r3, [r2, #936]	@ 0x3a8
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b0ac:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800b0bc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b0cc:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	2380      	movs	r3, #128	@ 0x80
 800b0da:	f8c2 33b8 	str.w	r3, [r2, #952]	@ 0x3b8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b0f4:	f8a3 23be 	strh.w	r2, [r3, #958]	@ 0x3be
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b102:	f8a3 23c0 	strh.w	r2, [r3, #960]	@ 0x3c0
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 23c2 	strb.w	r2, [r3, #962]	@ 0x3c2
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b118:	461a      	mov	r2, r3
 800b11a:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 800b11e:	f8c2 33c4 	str.w	r3, [r2, #964]	@ 0x3c4
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b128:	461a      	mov	r2, r3
 800b12a:	2328      	movs	r3, #40	@ 0x28
 800b12c:	f8c2 33c8 	str.w	r3, [r2, #968]	@ 0x3c8
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b136:	461a      	mov	r2, r3
 800b138:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800b13c:	f8c2 33cc 	str.w	r3, [r2, #972]	@ 0x3cc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b146:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b14a:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b154:	461a      	mov	r2, r3
 800b156:	2312      	movs	r3, #18
 800b158:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b162:	461a      	mov	r2, r3
 800b164:	2300      	movs	r3, #0
 800b166:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
	pdev->smudge_corrector_internals.required_samples = 0;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b170:	461a      	mov	r2, r3
 800b172:	2300      	movs	r3, #0
 800b174:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
	pdev->smudge_corrector_internals.accumulator = 0;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f503 539f 	add.w	r3, r3, #5088	@ 0x13e0
 800b17e:	4619      	mov	r1, r3
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b192:	461a      	mov	r2, r3
 800b194:	2300      	movs	r3, #0
 800b196:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 f806 	bl	800b1ac <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b1a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b1be:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3318      	adds	r3, #24
 800b21c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b224:	461a      	mov	r2, r3
 800b226:	2300      	movs	r3, #0
 800b228:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b232:	2200      	movs	r2, #0
 800b234:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b23e:	2200      	movs	r2, #0
 800b240:	f8a3 2242 	strh.w	r2, [r3, #578]	@ 0x242
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800b24a:	3304      	adds	r3, #4
 800b24c:	2218      	movs	r2, #24
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f00a fb51 	bl	80158f8 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b262:	b480      	push	{r7}
 800b264:	b085      	sub	sp, #20
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	3318      	adds	r3, #24
 800b272:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b27a:	2203      	movs	r2, #3
 800b27c:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b286:	2200      	movs	r2, #0
 800b288:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b292:	2200      	movs	r2, #0
 800b294:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc

	LOG_FUNCTION_END(status);

	return status;
 800b2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3318      	adds	r3, #24
 800b2fe:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 22e3 	ldrb.w	r2, [r3, #739]	@ 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b310:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f893 22e0 	ldrb.w	r2, [r3, #736]	@ 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b320:	f883 23f5 	strb.w	r2, [r3, #1013]	@ 0x3f5


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f893 32e3 	ldrb.w	r3, [r3, #739]	@ 0x2e3
 800b32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800b33c:	f003 0303 	and.w	r3, r3, #3
 800b340:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b348:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b350:	4413      	add	r3, r2
 800b352:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2201      	movs	r2, #1
 800b35e:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b368:	f893 235e 	ldrb.w	r2, [r3, #862]	@ 0x35e
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b372:	f883 23f6 	strb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b37c:	f893 23f6 	ldrb.w	r2, [r3, #1014]	@ 0x3f6
	pdev->gen_cfg.cal_config__vcsel_start =
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b386:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b396:	b480      	push	{r7}
 800b398:	b087      	sub	sp, #28
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3318      	adds	r3, #24
 800b3a2:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f203 3366 	addw	r3, r3, #870	@ 0x366
 800b3aa:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	8a1b      	ldrh	r3, [r3, #16]
 800b3b4:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	891b      	ldrh	r3, [r3, #8]
 800b3ba:	4413      	add	r3, r2
	utemp32a =
 800b3bc:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3c4:	d302      	bcc.n	800b3cc <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b3c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3ca:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	041b      	lsls	r3, r3, #16
 800b3d0:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b3dc:	23f1      	movs	r3, #241	@ 0xf1
 800b3de:	75fb      	strb	r3, [r7, #23]
 800b3e0:	e040      	b.n	800b464 <VL53LX_low_power_auto_update_DSS+0xce>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8b3 336a 	ldrh.w	r3, [r3, #874]	@ 0x36a
 800b3e8:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f8c2 33f8 	str.w	r3, [r2, #1016]	@ 0x3f8
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 800b406:	041b      	lsls	r3, r3, #16
 800b408:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b410:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 800b414:	2b00      	cmp	r3, #0
 800b416:	d102      	bne.n	800b41e <VL53LX_low_power_auto_update_DSS+0x88>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b418:	23f1      	movs	r3, #241	@ 0xf1
 800b41a:	75fb      	strb	r3, [r7, #23]
 800b41c:	e022      	b.n	800b464 <VL53LX_low_power_auto_update_DSS+0xce>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b424:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
			utemp32a = utemp32a /
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42e:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b436:	d302      	bcc.n	800b43e <VL53LX_low_power_auto_update_DSS+0xa8>
				utemp32a = 0xFFFF;
 800b438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b43c:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b448:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b452:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b468:	f113 0f0f 	cmn.w	r3, #15
 800b46c:	d114      	bne.n	800b498 <VL53LX_low_power_auto_update_DSS+0x102>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b474:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b478:	f8a3 23fc 	strh.w	r2, [r3, #1020]	@ 0x3fc


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b482:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	@ 0x3fc
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2202      	movs	r2, #2
 800b490:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b494:	2300      	movs	r3, #0
 800b496:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b498:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	371c      	adds	r7, #28
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3318      	adds	r3, #24
 800b4b6:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f893 33d0 	ldrb.w	r3, [r3, #976]	@ 0x3d0
 800b4c6:	2b07      	cmp	r3, #7
 800b4c8:	bf0c      	ite	eq
 800b4ca:	2301      	moveq	r3, #1
 800b4cc:	2300      	movne	r3, #0
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]
 800b4d6:	e019      	b.n	800b50c <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b4d8:	7df9      	ldrb	r1, [r7, #23]
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	6938      	ldr	r0, [r7, #16]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	0052      	lsls	r2, r2, #1
 800b4e2:	441a      	add	r2, r3
 800b4e4:	0153      	lsls	r3, r2, #5
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	440b      	add	r3, r1
 800b4ee:	019b      	lsls	r3, r3, #6
 800b4f0:	4413      	add	r3, r2
 800b4f2:	4403      	add	r3, r0
 800b4f4:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800b4f8:	330c      	adds	r3, #12
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dd02      	ble.n	800b506 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b500:	7dbb      	ldrb	r3, [r7, #22]
 800b502:	3301      	adds	r3, #1
 800b504:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	3301      	adds	r3, #1
 800b50a:	75fb      	strb	r3, [r7, #23]
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	2b05      	cmp	r3, #5
 800b510:	d9e2      	bls.n	800b4d8 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	7dba      	ldrb	r2, [r7, #22]
 800b516:	701a      	strb	r2, [r3, #0]

	return status;
 800b518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	371c      	adds	r7, #28
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b536:	88fb      	ldrh	r3, [r7, #6]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b53c:	88fb      	ldrh	r3, [r7, #6]
 800b53e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b542:	fb92 f3f3 	sdiv	r3, r2, r3
 800b546:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b548:	68fb      	ldr	r3, [r7, #12]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b556:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b55a:	b089      	sub	sp, #36	@ 0x24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b566:	f04f 0200 	mov.w	r2, #0
 800b56a:	f04f 0300 	mov.w	r3, #0
 800b56e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
 800b57e:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	0b1b      	lsrs	r3, r3, #12
 800b584:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2200      	movs	r2, #0
 800b58a:	469a      	mov	sl, r3
 800b58c:	4693      	mov	fp, r2
 800b58e:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	fb02 f303 	mul.w	r3, r2, r3
 800b59a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	091b      	lsrs	r3, r3, #4
 800b5a0:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4698      	mov	r8, r3
 800b5a8:	4691      	mov	r9, r2
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	fb08 f203 	mul.w	r2, r8, r3
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	fb09 f303 	mul.w	r3, r9, r3
 800b5b6:	4413      	add	r3, r2
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	fba2 4508 	umull	r4, r5, r2, r8
 800b5be:	442b      	add	r3, r5
 800b5c0:	461d      	mov	r5, r3
 800b5c2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800b5c6:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b5ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	0b02      	lsrs	r2, r0, #12
 800b5d8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b5dc:	0b0b      	lsrs	r3, r1, #12
 800b5de:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b5e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d305      	bcc.n	800b5f6 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800b5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ee:	f04f 0300 	mov.w	r3, #0
 800b5f2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b5fa:	697b      	ldr	r3, [r7, #20]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3724      	adds	r7, #36	@ 0x24
 800b600:	46bd      	mov	sp, r7
 800b602:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b606:	4770      	bx	lr

0800b608 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b60c:	b096      	sub	sp, #88	@ 0x58
 800b60e:	af00      	add	r7, sp, #0
 800b610:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b612:	460b      	mov	r3, r1
 800b614:	627a      	str	r2, [r7, #36]	@ 0x24
 800b616:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	f04f 0300 	mov.w	r3, #0
 800b62c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b636:	17da      	asrs	r2, r3, #31
 800b638:	469a      	mov	sl, r3
 800b63a:	4693      	mov	fp, r2
 800b63c:	4652      	mov	r2, sl
 800b63e:	465b      	mov	r3, fp
 800b640:	f04f 0000 	mov.w	r0, #0
 800b644:	f04f 0100 	mov.w	r1, #0
 800b648:	0159      	lsls	r1, r3, #5
 800b64a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b64e:	0150      	lsls	r0, r2, #5
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	ebb2 040a 	subs.w	r4, r2, sl
 800b658:	eb63 050b 	sbc.w	r5, r3, fp
 800b65c:	f04f 0200 	mov.w	r2, #0
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	00ab      	lsls	r3, r5, #2
 800b666:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b66a:	00a2      	lsls	r2, r4, #2
 800b66c:	4614      	mov	r4, r2
 800b66e:	461d      	mov	r5, r3
 800b670:	eb14 080a 	adds.w	r8, r4, sl
 800b674:	eb45 090b 	adc.w	r9, r5, fp
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	f04f 0300 	mov.w	r3, #0
 800b680:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800b684:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800b688:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800b68c:	4690      	mov	r8, r2
 800b68e:	4699      	mov	r9, r3
 800b690:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800b694:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00d      	beq.n	800b6b6 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800b69a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b69c:	2200      	movs	r2, #0
 800b69e:	61bb      	str	r3, [r7, #24]
 800b6a0:	61fa      	str	r2, [r7, #28]
 800b6a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b6aa:	f7f5 faed 	bl	8000c88 <__aeabi_uldivmod>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d02a      	beq.n	800b712 <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b6bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b6c0:	f04f 0200 	mov.w	r2, #0
 800b6c4:	f04f 0300 	mov.w	r3, #0
 800b6c8:	02cb      	lsls	r3, r1, #11
 800b6ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b6ce:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b6d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6d2:	0849      	lsrs	r1, r1, #1
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	6139      	str	r1, [r7, #16]
 800b6d8:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b6da:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b6de:	4621      	mov	r1, r4
 800b6e0:	1851      	adds	r1, r2, r1
 800b6e2:	6039      	str	r1, [r7, #0]
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	eb43 0101 	adc.w	r1, r3, r1
 800b6ea:	6079      	str	r1, [r7, #4]
 800b6ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b6f0:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	60bb      	str	r3, [r7, #8]
 800b6fa:	60fa      	str	r2, [r7, #12]
 800b6fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b700:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b704:	f7f5 fac0 	bl	8000c88 <__aeabi_uldivmod>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800b710:	e00b      	b.n	800b72a <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b712:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b716:	f04f 0200 	mov.w	r2, #0
 800b71a:	f04f 0300 	mov.w	r3, #0
 800b71e:	02cb      	lsls	r3, r1, #11
 800b720:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b724:	02c2      	lsls	r2, r0, #11
 800b726:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b72a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b72c:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800b72e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b730:	4618      	mov	r0, r3
 800b732:	3758      	adds	r7, #88	@ 0x58
 800b734:	46bd      	mov	sp, r7
 800b736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b73a <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b746:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b74a:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b74c:	e002      	b.n	800b754 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	089b      	lsrs	r3, r3, #2
 800b752:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d8f8      	bhi.n	800b74e <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b75c:	e017      	b.n	800b78e <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4413      	add	r3, r2
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d30b      	bcc.n	800b782 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4413      	add	r3, r2
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	085b      	lsrs	r3, r3, #1
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	4413      	add	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e002      	b.n	800b788 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	085b      	lsrs	r3, r3, #1
 800b786:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	089b      	lsrs	r3, r3, #2
 800b78c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e4      	bne.n	800b75e <VL53LX_isqrt+0x24>
	}

	return res;
 800b794:	68fb      	ldr	r3, [r7, #12]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 faa5 	bl	800bd08 <VL53LX_decode_vcsel_period>
 800b7be:	4603      	mov	r3, r0
	period = 2048 *
 800b7c0:	02db      	lsls	r3, r3, #11
 800b7c2:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b7dc:	02db      	lsls	r3, r3, #11
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b7ea:	02db      	lsls	r3, r3, #11
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800b800:	68b9      	ldr	r1, [r7, #8]
 800b802:	fb01 f202 	mul.w	r2, r1, r2
 800b806:	1a9b      	subs	r3, r3, r2
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	e001      	b.n	800b810 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800b81a:	bf00      	nop
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b834:	6838      	ldr	r0, [r7, #0]
 800b836:	f000 fb90 	bl	800bf5a <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff ff7a 	bl	800b73a <VL53LX_isqrt>
 800b846:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b848:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	fb02 f303 	mul.w	r3, r2, r3
 800b852:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	3307      	adds	r3, #7
 800b858:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	111b      	asrs	r3, r3, #4
 800b85e:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
 800b880:	e01e      	b.n	800b8c0 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b882:	7bfa      	ldrb	r2, [r7, #15]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	3206      	adds	r2, #6
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	dd13      	ble.n	800b8ba <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b898:	7bf9      	ldrb	r1, [r7, #15]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	3106      	adds	r1, #6
 800b89e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8a2:	441a      	add	r2, r3
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	7a9b      	ldrb	r3, [r3, #10]
 800b8c4:	7bfa      	ldrb	r2, [r7, #15]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d3db      	bcc.n	800b882 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d01c      	beq.n	800b90e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800b8ec:	0852      	lsrs	r2, r2, #1
 800b8ee:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b8f0:	441a      	add	r2, r3
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800b904:	fb93 f2f2 	sdiv	r2, r3, r2
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b90e:	bf00      	nop
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	7b1b      	ldrb	r3, [r3, #12]
 800b92e:	f003 0307 	and.w	r3, r3, #7
 800b932:	2b07      	cmp	r3, #7
 800b934:	d13a      	bne.n	800b9ac <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b93a:	2300      	movs	r3, #0
 800b93c:	73bb      	strb	r3, [r7, #14]
 800b93e:	e01f      	b.n	800b980 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4413      	add	r3, r2
 800b946:	7b1b      	ldrb	r3, [r3, #12]
 800b948:	f003 0307 	and.w	r3, r3, #7
 800b94c:	2b07      	cmp	r3, #7
 800b94e:	d014      	beq.n	800b97a <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b950:	7bba      	ldrb	r2, [r7, #14]
 800b952:	7b7b      	ldrb	r3, [r7, #13]
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	440a      	add	r2, r1
 800b958:	7b11      	ldrb	r1, [r2, #12]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	460a      	mov	r2, r1
 800b960:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b962:	7bba      	ldrb	r2, [r7, #14]
 800b964:	7b7b      	ldrb	r3, [r7, #13]
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	440a      	add	r2, r1
 800b96a:	7c91      	ldrb	r1, [r2, #18]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	4413      	add	r3, r2
 800b970:	460a      	mov	r2, r1
 800b972:	749a      	strb	r2, [r3, #18]
				i++;
 800b974:	7b7b      	ldrb	r3, [r7, #13]
 800b976:	3301      	adds	r3, #1
 800b978:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	3301      	adds	r3, #1
 800b97e:	73bb      	strb	r3, [r7, #14]
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	2b05      	cmp	r3, #5
 800b984:	d9dc      	bls.n	800b940 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b986:	7b7b      	ldrb	r3, [r7, #13]
 800b988:	73bb      	strb	r3, [r7, #14]
 800b98a:	e00c      	b.n	800b9a6 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	4413      	add	r3, r2
 800b992:	2210      	movs	r2, #16
 800b994:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	4413      	add	r3, r2
 800b99c:	2200      	movs	r2, #0
 800b99e:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	73bb      	strb	r3, [r7, #14]
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	2b05      	cmp	r3, #5
 800b9aa:	d9ef      	bls.n	800b98c <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	7adb      	ldrb	r3, [r3, #11]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d023      	beq.n	800b9fc <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7adb      	ldrb	r3, [r3, #11]
 800b9b8:	73fb      	strb	r3, [r7, #15]
 800b9ba:	e00f      	b.n	800b9dc <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b9bc:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	7ad2      	ldrb	r2, [r2, #11]
 800b9c4:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3106      	adds	r1, #6
 800b9ca:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	3206      	adds	r2, #6
 800b9d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	73fb      	strb	r3, [r7, #15]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7a5b      	ldrb	r3, [r3, #9]
 800b9e0:	7bfa      	ldrb	r2, [r7, #15]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d3ea      	bcc.n	800b9bc <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	72da      	strb	r2, [r3, #11]
	}
}
 800b9fc:	bf00      	nop
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800ba1a:	88fb      	ldrh	r3, [r7, #6]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff fd83 	bl	800b528 <VL53LX_calc_pll_period_us>
 800ba22:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ba28:	f249 2257 	movw	r2, #37463	@ 0x9257
 800ba2c:	fb02 f303 	mul.w	r3, r2, r3
 800ba30:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800ba38:	0c1b      	lsrs	r3, r3, #16
 800ba3a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b087      	sub	sp, #28
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800ba54:	2307      	movs	r3, #7
 800ba56:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba62:	db03      	blt.n	800ba6c <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800ba64:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	e004      	b.n	800ba76 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	dd01      	ble.n	800ba76 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba7c:	dd02      	ble.n	800ba84 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	613b      	str	r3, [r7, #16]
 800ba82:	e001      	b.n	800ba88 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800ba84:	2307      	movs	r3, #7
 800ba86:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	409a      	lsls	r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	085b      	lsrs	r3, r3, #1
 800ba98:	441a      	add	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa0:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baa8:	dd02      	ble.n	800bab0 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bab6:	d302      	bcc.n	800babe <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800bab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800babc:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800bac2:	89fb      	ldrh	r3, [r7, #14]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	603b      	str	r3, [r7, #0]
 800badc:	4613      	mov	r3, r2
 800bade:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800bae8:	88fb      	ldrh	r3, [r7, #6]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d010      	beq.n	800bb10 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	021a      	lsls	r2, r3, #8
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	fa02 f303 	lsl.w	r3, r2, r3
 800baf8:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800bafa:	88fb      	ldrh	r3, [r7, #6]
 800bafc:	085b      	lsrs	r3, r3, #1
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800bb06:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800bb08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	e004      	b.n	800bb1a <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	fa02 f303 	lsl.w	r3, r2, r3
 800bb18:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d901      	bls.n	800bb26 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800bb2a:	8a7b      	ldrh	r3, [r7, #18]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	371c      	adds	r7, #28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	b093      	sub	sp, #76	@ 0x4c
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	461e      	mov	r6, r3
 800bb42:	4603      	mov	r3, r0
 800bb44:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bb46:	460b      	mov	r3, r1
 800bb48:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bb4e:	4633      	mov	r3, r6
 800bb50:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	f04f 0300 	mov.w	r3, #0
 800bb60:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bb6c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff fcda 	bl	800b528 <VL53LX_calc_pll_period_us>
 800bb74:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bb76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bb78:	2200      	movs	r2, #0
 800bb7a:	623b      	str	r3, [r7, #32]
 800bb7c:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bb80:	2200      	movs	r2, #0
 800bb82:	61bb      	str	r3, [r7, #24]
 800bb84:	61fa      	str	r2, [r7, #28]
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	1a9b      	subs	r3, r3, r2
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	460a      	mov	r2, r1
 800bb96:	eb63 0302 	sbc.w	r3, r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bba0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bba6:	2200      	movs	r2, #0
 800bba8:	469a      	mov	sl, r3
 800bbaa:	4693      	mov	fp, r2
 800bbac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbae:	fb0a f203 	mul.w	r2, sl, r3
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb4:	fb0b f303 	mul.w	r3, fp, r3
 800bbb8:	4413      	add	r3, r2
 800bbba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbbc:	fba2 890a 	umull	r8, r9, r2, sl
 800bbc0:	444b      	add	r3, r9
 800bbc2:	4699      	mov	r9, r3
 800bbc4:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800bbc8:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bbcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	da08      	bge.n	800bbe6 <VL53LX_range_maths+0xae>
 800bbd4:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800bbd8:	1851      	adds	r1, r2, r1
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	f143 0300 	adc.w	r3, r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbe6:	f04f 0000 	mov.w	r0, #0
 800bbea:	f04f 0100 	mov.w	r1, #0
 800bbee:	0a50      	lsrs	r0, r2, #9
 800bbf0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bbf4:	1259      	asrs	r1, r3, #9
 800bbf6:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bbfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbfc:	f249 2257 	movw	r2, #37463	@ 0x9257
 800bc00:	fb03 f202 	mul.w	r2, r3, r2
 800bc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc06:	2100      	movs	r1, #0
 800bc08:	fb01 f303 	mul.w	r3, r1, r3
 800bc0c:	4413      	add	r3, r2
 800bc0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc10:	f249 2157 	movw	r1, #37463	@ 0x9257
 800bc14:	fba2 4501 	umull	r4, r5, r2, r1
 800bc18:	442b      	add	r3, r5
 800bc1a:	461d      	mov	r5, r3
 800bc1c:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800bc20:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bc24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	da07      	bge.n	800bc3c <VL53LX_range_maths+0x104>
 800bc2c:	4934      	ldr	r1, [pc, #208]	@ (800bd00 <VL53LX_range_maths+0x1c8>)
 800bc2e:	1851      	adds	r1, r2, r1
 800bc30:	6039      	str	r1, [r7, #0]
 800bc32:	f143 0300 	adc.w	r3, r3, #0
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc3c:	f04f 0000 	mov.w	r0, #0
 800bc40:	f04f 0100 	mov.w	r1, #0
 800bc44:	0d90      	lsrs	r0, r2, #22
 800bc46:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bc4a:	1599      	asrs	r1, r3, #22
 800bc4c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bc54:	4413      	add	r3, r2
 800bc56:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800bc58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc5a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bc5c:	fb02 f303 	mul.w	r3, r2, r3
 800bc60:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800bc62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bc68:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800bc6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	da01      	bge.n	800bc74 <VL53LX_range_maths+0x13c>
 800bc70:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800bc74:	12db      	asrs	r3, r3, #11
 800bc76:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800bc78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d130      	bne.n	800bce2 <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800bc80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc82:	4613      	mov	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	da00      	bge.n	800bc94 <VL53LX_range_maths+0x15c>
 800bc92:	3303      	adds	r3, #3
 800bc94:	109b      	asrs	r3, r3, #2
 800bc96:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800bc98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bc9a:	4b1a      	ldr	r3, [pc, #104]	@ (800bd04 <VL53LX_range_maths+0x1cc>)
 800bc9c:	fb83 2301 	smull	r2, r3, r3, r1
 800bca0:	109a      	asrs	r2, r3, #2
 800bca2:	17cb      	asrs	r3, r1, #31
 800bca4:	1ad2      	subs	r2, r2, r3
 800bca6:	4613      	mov	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4413      	add	r3, r2
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	1aca      	subs	r2, r1, r3
 800bcb0:	2a04      	cmp	r2, #4
 800bcb2:	dc09      	bgt.n	800bcc8 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb6:	4a13      	ldr	r2, [pc, #76]	@ (800bd04 <VL53LX_range_maths+0x1cc>)
 800bcb8:	fb82 1203 	smull	r1, r2, r2, r3
 800bcbc:	1092      	asrs	r2, r2, #2
 800bcbe:	17db      	asrs	r3, r3, #31
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	b21b      	sxth	r3, r3
 800bcc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcc6:	e015      	b.n	800bcf4 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcca:	4a0e      	ldr	r2, [pc, #56]	@ (800bd04 <VL53LX_range_maths+0x1cc>)
 800bccc:	fb82 1203 	smull	r1, r2, r2, r3
 800bcd0:	1092      	asrs	r2, r2, #2
 800bcd2:	17db      	asrs	r3, r3, #31
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	3301      	adds	r3, #1
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	b21b      	sxth	r3, r3
 800bcde:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce0:	e008      	b.n	800bcf4 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800bce2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d104      	bne.n	800bcf4 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800bcea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcec:	0fda      	lsrs	r2, r3, #31
 800bcee:	4413      	add	r3, r2
 800bcf0:	105b      	asrs	r3, r3, #1
 800bcf2:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800bcf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	374c      	adds	r7, #76	@ 0x4c
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd00:	003fffff 	.word	0x003fffff
 800bd04:	66666667 	.word	0x66666667

0800bd08 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bd16:	79fb      	ldrb	r3, [r7, #7]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	7a5a      	ldrb	r2, [r3, #9]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	605a      	str	r2, [r3, #4]
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b087      	sub	sp, #28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2203      	movs	r2, #3
 800bdc0:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2203      	movs	r2, #3
 800bdc6:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2218      	movs	r2, #24
 800bdde:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bde0:	897b      	ldrh	r3, [r7, #10]
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be7e:	2300      	movs	r3, #0
 800be80:	82fb      	strh	r3, [r7, #22]
 800be82:	e009      	b.n	800be98 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800be84:	8afb      	ldrh	r3, [r7, #22]
 800be86:	8afa      	ldrh	r2, [r7, #22]
 800be88:	b2d1      	uxtb	r1, r2
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	4413      	add	r3, r2
 800be8e:	460a      	mov	r2, r1
 800be90:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be92:	8afb      	ldrh	r3, [r7, #22]
 800be94:	3301      	adds	r3, #1
 800be96:	82fb      	strh	r3, [r7, #22]
 800be98:	8afb      	ldrh	r3, [r7, #22]
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	d9f2      	bls.n	800be84 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be9e:	2300      	movs	r3, #0
 800bea0:	82fb      	strh	r3, [r7, #22]
 800bea2:	e007      	b.n	800beb4 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800bea4:	8afb      	ldrh	r3, [r7, #22]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	4413      	add	r3, r2
 800beaa:	2201      	movs	r2, #1
 800beac:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800beae:	8afb      	ldrh	r3, [r7, #22]
 800beb0:	3301      	adds	r3, #1
 800beb2:	82fb      	strh	r3, [r7, #22]
 800beb4:	8afb      	ldrh	r3, [r7, #22]
 800beb6:	2b05      	cmp	r3, #5
 800beb8:	d9f4      	bls.n	800bea4 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800beba:	2300      	movs	r3, #0
 800bebc:	82fb      	strh	r3, [r7, #22]
 800bebe:	e013      	b.n	800bee8 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bec0:	8afa      	ldrh	r2, [r7, #22]
 800bec2:	897b      	ldrh	r3, [r7, #10]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d206      	bcs.n	800bed6 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bec8:	8afa      	ldrh	r2, [r7, #22]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3206      	adds	r2, #6
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bed4:	e005      	b.n	800bee2 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bed6:	8afa      	ldrh	r2, [r7, #22]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3206      	adds	r2, #6
 800bedc:	2100      	movs	r1, #0
 800bede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bee2:	8afb      	ldrh	r3, [r7, #22]
 800bee4:	3301      	adds	r3, #1
 800bee6:	82fb      	strh	r3, [r7, #22]
 800bee8:	8afb      	ldrh	r3, [r7, #22]
 800beea:	2b17      	cmp	r3, #23
 800beec:	d9e8      	bls.n	800bec0 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800beee:	bf00      	nop
 800bef0:	bf00      	nop
 800bef2:	371c      	adds	r7, #28
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	da10      	bge.n	800bf34 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
 800bf14:	43db      	mvns	r3, r3
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	f003 0307 	and.w	r3, r3, #7
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	3308      	adds	r3, #8
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	3b80      	subs	r3, #128	@ 0x80
 800bf2a:	10db      	asrs	r3, r3, #3
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bf32:	e00c      	b.n	800bf4e <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
 800bf36:	f003 0307 	and.w	r3, r3, #7
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800bf46:	10db      	asrs	r3, r3, #3
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	701a      	strb	r2, [r3, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b085      	sub	sp, #20
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bf66:	2300      	movs	r3, #0
 800bf68:	73fb      	strb	r3, [r7, #15]
 800bf6a:	e02c      	b.n	800bfc6 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d009      	beq.n	800bf86 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800bf78:	7bf9      	ldrb	r1, [r7, #15]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3106      	adds	r1, #6
 800bf7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	db07      	blt.n	800bf96 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bf86:	7bfa      	ldrb	r2, [r7, #15]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3206      	adds	r2, #6
 800bf8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800bfa2:	7bf9      	ldrb	r1, [r7, #15]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3106      	adds	r1, #6
 800bfa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	dc07      	bgt.n	800bfc0 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bfb0:	7bfa      	ldrb	r2, [r7, #15]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	3206      	adds	r2, #6
 800bfb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	73fb      	strb	r3, [r7, #15]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7a9b      	ldrb	r3, [r3, #10]
 800bfca:	7bfa      	ldrb	r2, [r7, #15]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d3cd      	bcc.n	800bf6c <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7adb      	ldrb	r3, [r3, #11]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d03a      	beq.n	800c068 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
 800c008:	e00e      	b.n	800c028 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c010:	7bf9      	ldrb	r1, [r7, #15]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3106      	adds	r1, #6
 800c016:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c01a:	441a      	add	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	3301      	adds	r3, #1
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	7adb      	ldrb	r3, [r3, #11]
 800c02c:	7bfa      	ldrb	r2, [r7, #15]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d3eb      	bcc.n	800c00a <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	7ad2      	ldrb	r2, [r2, #11]
 800c048:	0852      	lsrs	r2, r2, #1
 800c04a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c04c:	441a      	add	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c05e:	fb93 f2f2 	sdiv	r2, r3, r2
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c068:	bf00      	nop
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c078:	b0ca      	sub	sp, #296	@ 0x128
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800c080:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800c084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c088:	4603      	mov	r3, r0
 800c08a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c08e:	2300      	movs	r3, #0
 800c090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800c0a6:	f04f 0200 	mov.w	r2, #0
 800c0aa:	f04f 0300 	mov.w	r3, #0
 800c0ae:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c0b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0bc:	2300      	movs	r3, #0
 800c0be:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c0c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c0c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c0d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c0d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c0e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c0e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800c0f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800c0f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c100:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c104:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 80e1 	beq.w	800c2d0 <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800c10e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c116:	2b00      	cmp	r3, #0
 800c118:	f000 80da 	beq.w	800c2d0 <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c11c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c120:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff f9ff 	bl	800b528 <VL53LX_calc_pll_period_us>
 800c12a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c12e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c136:	3301      	adds	r3, #1
 800c138:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c140:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c144:	2110      	movs	r1, #16
 800c146:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800c14a:	f7ff fa04 	bl	800b556 <VL53LX_duration_maths>
 800c14e:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c150:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c154:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c15a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c15e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4619      	mov	r1, r3
 800c166:	4610      	mov	r0, r2
 800c168:	f7ff fc6d 	bl	800ba46 <VL53LX_rate_maths>
 800c16c:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c16e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c172:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c178:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800c17c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c180:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800c184:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	f7ff fa3c 	bl	800b608 <VL53LX_events_per_spad_maths>
 800c190:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c192:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c196:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c19c:	8adb      	ldrh	r3, [r3, #22]
 800c19e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c1a2:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c1a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1a8:	8adb      	ldrh	r3, [r3, #22]
 800c1aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c1ae:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c1b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f000 808a 	beq.w	800c2d0 <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c1bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1c0:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	4615      	mov	r5, r2
 800c1ca:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800c1ce:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	462b      	mov	r3, r5
 800c1d6:	f04f 0000 	mov.w	r0, #0
 800c1da:	f04f 0100 	mov.w	r1, #0
 800c1de:	0159      	lsls	r1, r3, #5
 800c1e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c1e4:	0150      	lsls	r0, r2, #5
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	ebb2 0804 	subs.w	r8, r2, r4
 800c1ee:	eb63 0905 	sbc.w	r9, r3, r5
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	f04f 0300 	mov.w	r3, #0
 800c1fa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c1fe:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c202:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c206:	4690      	mov	r8, r2
 800c208:	4699      	mov	r9, r3
 800c20a:	eb18 0a04 	adds.w	sl, r8, r4
 800c20e:	eb49 0b05 	adc.w	fp, r9, r5
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	f04f 0300 	mov.w	r3, #0
 800c21a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c21e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c226:	4692      	mov	sl, r2
 800c228:	469b      	mov	fp, r3
 800c22a:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800c22e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f04f 0100 	mov.w	r1, #0
 800c23a:	0319      	lsls	r1, r3, #12
 800c23c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c240:	0310      	lsls	r0, r2, #12
 800c242:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800c246:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	085b      	lsrs	r3, r3, #1
 800c24e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800c252:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c256:	2200      	movs	r2, #0
 800c258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c25c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c260:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c264:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800c268:	4621      	mov	r1, r4
 800c26a:	1851      	adds	r1, r2, r1
 800c26c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c26e:	4629      	mov	r1, r5
 800c270:	eb43 0101 	adc.w	r1, r3, r1
 800c274:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800c276:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c27a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800c27e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	2200      	movs	r2, #0
 800c286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c28a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c28e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800c292:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c296:	f7f4 fcf7 	bl	8000c88 <__aeabi_uldivmod>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c2a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2a6:	8adb      	ldrh	r3, [r3, #22]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2b0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c2b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c2b8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800c2bc:	4621      	mov	r1, r4
 800c2be:	428a      	cmp	r2, r1
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	418b      	sbcs	r3, r1
 800c2c4:	d204      	bcs.n	800c2d0 <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c2c6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800c2ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800c2ce:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c2d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 82e9 	beq.w	800c8ae <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800c2dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c2e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 82e2 	beq.w	800c8ae <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800c2ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c2ee:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 82dc 	beq.w	800c8ae <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800c2f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f000 82d5 	beq.w	800c8ae <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c304:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c308:	885b      	ldrh	r3, [r3, #2]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	2200      	movs	r2, #0
 800c30e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c310:	657a      	str	r2, [r7, #84]	@ 0x54
 800c312:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800c316:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800c31a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800c31e:	4622      	mov	r2, r4
 800c320:	462b      	mov	r3, r5
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f04f 0100 	mov.w	r1, #0
 800c32a:	0159      	lsls	r1, r3, #5
 800c32c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c330:	0150      	lsls	r0, r2, #5
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	1b11      	subs	r1, r2, r4
 800c338:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c33a:	eb63 0305 	sbc.w	r3, r3, r5
 800c33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c340:	f04f 0200 	mov.w	r2, #0
 800c344:	f04f 0300 	mov.w	r3, #0
 800c348:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800c34c:	4649      	mov	r1, r9
 800c34e:	008b      	lsls	r3, r1, #2
 800c350:	4641      	mov	r1, r8
 800c352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c356:	4641      	mov	r1, r8
 800c358:	008a      	lsls	r2, r1, #2
 800c35a:	4611      	mov	r1, r2
 800c35c:	461a      	mov	r2, r3
 800c35e:	460b      	mov	r3, r1
 800c360:	191b      	adds	r3, r3, r4
 800c362:	643b      	str	r3, [r7, #64]	@ 0x40
 800c364:	4613      	mov	r3, r2
 800c366:	eb45 0303 	adc.w	r3, r5, r3
 800c36a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c36c:	f04f 0200 	mov.w	r2, #0
 800c370:	f04f 0300 	mov.w	r3, #0
 800c374:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c378:	4629      	mov	r1, r5
 800c37a:	02cb      	lsls	r3, r1, #11
 800c37c:	4621      	mov	r1, r4
 800c37e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c382:	4621      	mov	r1, r4
 800c384:	02ca      	lsls	r2, r1, #11
 800c386:	461c      	mov	r4, r3
 800c388:	4613      	mov	r3, r2
 800c38a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c38e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	b29b      	uxth	r3, r3
 800c398:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800c39c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3a6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c3aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c3ae:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	1851      	adds	r1, r2, r1
 800c3b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	eb43 0101 	adc.w	r1, r3, r1
 800c3be:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c3c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c3c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c3c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c3d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c3da:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c3de:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c3e2:	f7f4 fc51 	bl	8000c88 <__aeabi_uldivmod>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c3ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c3f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c3f6:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c3f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	011a      	lsls	r2, r3, #4
 800c400:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c404:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c406:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2200      	movs	r2, #0
 800c40e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c410:	637a      	str	r2, [r7, #52]	@ 0x34
 800c412:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c416:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c41a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	2200      	movs	r2, #0
 800c422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c426:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c42a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c42e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c432:	4622      	mov	r2, r4
 800c434:	fb02 f203 	mul.w	r2, r2, r3
 800c438:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c43c:	4629      	mov	r1, r5
 800c43e:	fb01 f303 	mul.w	r3, r1, r3
 800c442:	441a      	add	r2, r3
 800c444:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c448:	4621      	mov	r1, r4
 800c44a:	fba3 1301 	umull	r1, r3, r3, r1
 800c44e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c452:	460b      	mov	r3, r1
 800c454:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c458:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c45c:	18d3      	adds	r3, r2, r3
 800c45e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c462:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800c466:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c46a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c46e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c472:	8b5b      	ldrh	r3, [r3, #26]
 800c474:	b29b      	uxth	r3, r3
 800c476:	2200      	movs	r2, #0
 800c478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c47c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c480:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c484:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c488:	4622      	mov	r2, r4
 800c48a:	fb02 f203 	mul.w	r2, r2, r3
 800c48e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c492:	4629      	mov	r1, r5
 800c494:	fb01 f303 	mul.w	r3, r1, r3
 800c498:	441a      	add	r2, r3
 800c49a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c49e:	4621      	mov	r1, r4
 800c4a0:	fba3 1301 	umull	r1, r3, r3, r1
 800c4a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4b2:	18d3      	adds	r3, r2, r3
 800c4b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c4b8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800c4bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c4c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c4c4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c4c8:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c4cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c4ce:	f143 0300 	adc.w	r3, r3, #0
 800c4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4d4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c4d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c4dc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c4e0:	f04f 0000 	mov.w	r0, #0
 800c4e4:	f04f 0100 	mov.w	r1, #0
 800c4e8:	0cd0      	lsrs	r0, r2, #19
 800c4ea:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c4ee:	0cd9      	lsrs	r1, r3, #19
 800c4f0:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800c4f4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c4f8:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c4fc:	6239      	str	r1, [r7, #32]
 800c4fe:	f143 0300 	adc.w	r3, r3, #0
 800c502:	627b      	str	r3, [r7, #36]	@ 0x24
 800c504:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c508:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800c50c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c510:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c514:	f04f 0300 	mov.w	r3, #0
 800c518:	f7f4 fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c524:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c528:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c52c:	f173 0300 	sbcs.w	r3, r3, #0
 800c530:	d305      	bcc.n	800c53e <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800c532:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c536:	f04f 0300 	mov.w	r3, #0
 800c53a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c53e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c542:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c546:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c548:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2200      	movs	r2, #0
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	61fa      	str	r2, [r7, #28]
 800c554:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c558:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c55c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	2200      	movs	r2, #0
 800c564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c56c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c570:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800c574:	4622      	mov	r2, r4
 800c576:	fb02 f203 	mul.w	r2, r2, r3
 800c57a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c57e:	4629      	mov	r1, r5
 800c580:	fb01 f303 	mul.w	r3, r1, r3
 800c584:	441a      	add	r2, r3
 800c586:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c58a:	4621      	mov	r1, r4
 800c58c:	fba3 1301 	umull	r1, r3, r3, r1
 800c590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c594:	460b      	mov	r3, r1
 800c596:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c59e:	18d3      	adds	r3, r2, r3
 800c5a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c5a4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800c5a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c5ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c5b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c5b4:	8b5b      	ldrh	r3, [r3, #26]
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5be:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c5c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c5c6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	fb02 f203 	mul.w	r2, r2, r3
 800c5d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	fb01 f303 	mul.w	r3, r1, r3
 800c5da:	441a      	add	r2, r3
 800c5dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	fba3 1301 	umull	r1, r3, r3, r1
 800c5e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5f4:	18d3      	adds	r3, r2, r3
 800c5f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c5fa:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800c5fe:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c602:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800c606:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c60a:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800c60e:	6139      	str	r1, [r7, #16]
 800c610:	f143 0300 	adc.w	r3, r3, #0
 800c614:	617b      	str	r3, [r7, #20]
 800c616:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c61a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800c61e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f04f 0100 	mov.w	r1, #0
 800c62a:	0cd0      	lsrs	r0, r2, #19
 800c62c:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800c630:	0cd9      	lsrs	r1, r3, #19
 800c632:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800c636:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800c63a:	2200      	movs	r2, #0
 800c63c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c63e:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800c640:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c644:	891b      	ldrh	r3, [r3, #8]
 800c646:	b29b      	uxth	r3, r3
 800c648:	2200      	movs	r2, #0
 800c64a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c64c:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800c64e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c652:	462b      	mov	r3, r5
 800c654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c658:	4642      	mov	r2, r8
 800c65a:	fb02 f203 	mul.w	r2, r2, r3
 800c65e:	464b      	mov	r3, r9
 800c660:	4621      	mov	r1, r4
 800c662:	fb01 f303 	mul.w	r3, r1, r3
 800c666:	4413      	add	r3, r2
 800c668:	4622      	mov	r2, r4
 800c66a:	4641      	mov	r1, r8
 800c66c:	fba2 1201 	umull	r1, r2, r2, r1
 800c670:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c674:	460a      	mov	r2, r1
 800c676:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800c67a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800c67e:	4413      	add	r3, r2
 800c680:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c688:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800c68c:	4622      	mov	r2, r4
 800c68e:	fb02 f203 	mul.w	r2, r2, r3
 800c692:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c696:	4629      	mov	r1, r5
 800c698:	fb01 f303 	mul.w	r3, r1, r3
 800c69c:	4413      	add	r3, r2
 800c69e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	fba2 1201 	umull	r1, r2, r2, r1
 800c6a8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c6ac:	460a      	mov	r2, r1
 800c6ae:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800c6b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c6bc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800c6c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800c6c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c6c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c6cc:	88db      	ldrh	r3, [r3, #6]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c6d6:	f04f 0200 	mov.w	r2, #0
 800c6da:	f04f 0300 	mov.w	r3, #0
 800c6de:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	01cb      	lsls	r3, r1, #7
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	01ca      	lsls	r2, r1, #7
 800c6f0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c6f4:	1884      	adds	r4, r0, r2
 800c6f6:	60bc      	str	r4, [r7, #8]
 800c6f8:	eb41 0303 	adc.w	r3, r1, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c702:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800c706:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c70a:	88db      	ldrh	r3, [r3, #6]
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2200      	movs	r2, #0
 800c710:	663b      	str	r3, [r7, #96]	@ 0x60
 800c712:	667a      	str	r2, [r7, #100]	@ 0x64
 800c714:	f04f 0200 	mov.w	r2, #0
 800c718:	f04f 0300 	mov.w	r3, #0
 800c71c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c720:	4629      	mov	r1, r5
 800c722:	020b      	lsls	r3, r1, #8
 800c724:	4621      	mov	r1, r4
 800c726:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800c72a:	4621      	mov	r1, r4
 800c72c:	020a      	lsls	r2, r1, #8
 800c72e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c732:	f7f4 faa9 	bl	8000c88 <__aeabi_uldivmod>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c73e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c742:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800c746:	6039      	str	r1, [r7, #0]
 800c748:	f143 0300 	adc.w	r3, r3, #0
 800c74c:	607b      	str	r3, [r7, #4]
 800c74e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c752:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800c756:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c75a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c75e:	f04f 0300 	mov.w	r3, #0
 800c762:	f7f4 fa91 	bl	8000c88 <__aeabi_uldivmod>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800c76e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c772:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c776:	f173 0300 	sbcs.w	r3, r3, #0
 800c77a:	d305      	bcc.n	800c788 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800c77c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c788:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c78c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c790:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c792:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c796:	69db      	ldr	r3, [r3, #28]
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe ffcd 	bl	800b73a <VL53LX_isqrt>
 800c7a0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7a8:	785b      	ldrb	r3, [r3, #1]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c7b0:	fb02 f303 	mul.w	r3, r2, r3
 800c7b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800c7b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7bc:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c7be:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800c7c2:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d218      	bcs.n	800c7fa <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c7c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c7d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7d4:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800c7dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c7e0:	021b      	lsls	r3, r3, #8
 800c7e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800c7e6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800c7ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d203      	bcs.n	800c7fa <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800c7f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c7f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c7fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c7fe:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c800:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c804:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c806:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c80c:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c80e:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800c812:	f000 f854 	bl	800c8be <VL53LX_f_002>
 800c816:	4603      	mov	r3, r0
 800c818:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c81a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c81e:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c820:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c82a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c82e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800c832:	461a      	mov	r2, r3
 800c834:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c838:	fb02 f303 	mul.w	r3, r2, r3
 800c83c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800c840:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c844:	3308      	adds	r3, #8
 800c846:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800c84a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c84e:	091b      	lsrs	r3, r3, #4
 800c850:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c858:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c85a:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c85c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c860:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c862:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c868:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c86a:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800c86e:	f000 f826 	bl	800c8be <VL53LX_f_002>
 800c872:	4603      	mov	r3, r0
 800c874:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c876:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c87a:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c87c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c880:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c884:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c888:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c88c:	429a      	cmp	r2, r3
 800c88e:	da07      	bge.n	800c8a0 <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c890:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c894:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c898:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c89c:	801a      	strh	r2, [r3, #0]
 800c89e:	e006      	b.n	800c8ae <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c8a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c8a4:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800c8a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c8ac:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c8ae:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c8be <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b086      	sub	sp, #24
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
 800c8ca:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	fb03 f303 	mul.w	r3, r3, r3
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c8e6:	6938      	ldr	r0, [r7, #16]
 800c8e8:	f7fe ff27 	bl	800b73a <VL53LX_isqrt>
 800c8ec:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	011b      	lsls	r3, r3, #4
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe ff1d 	bl	800b73a <VL53LX_isqrt>
 800c900:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	fb02 f303 	mul.w	r3, r2, r3
 800c90a:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	4413      	add	r3, r2
 800c918:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	fbb2 f3f3 	udiv	r3, r2, r3
 800c924:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c926:	697b      	ldr	r3, [r7, #20]

}
 800c928:	4618      	mov	r0, r3
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2218      	movs	r2, #24
 800c940:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	73fb      	strb	r3, [r7, #15]
 800c966:	e01f      	b.n	800c9a8 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	4413      	add	r3, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	4413      	add	r3, r2
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c97e:	7bfb      	ldrb	r3, [r7, #15]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	4413      	add	r3, r2
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c98a:	7bfa      	ldrb	r2, [r7, #15]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	322e      	adds	r2, #46	@ 0x2e
 800c990:	2100      	movs	r1, #0
 800c992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c996:	7bfa      	ldrb	r2, [r7, #15]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3246      	adds	r2, #70	@ 0x46
 800c99c:	2100      	movs	r1, #0
 800c99e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	73fb      	strb	r3, [r7, #15]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	785b      	ldrb	r3, [r3, #1]
 800c9ac:	7bfa      	ldrb	r2, [r7, #15]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d3da      	bcc.n	800c968 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2208      	movs	r2, #8
 800c9be:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	2118      	movs	r1, #24
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	f7ff f9e8 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	2118      	movs	r1, #24
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f7ff f9e0 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	2118      	movs	r1, #24
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f7ff f9d8 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800ca00:	461a      	mov	r2, r3
 800ca02:	2118      	movs	r1, #24
 800ca04:	2000      	movs	r0, #0
 800ca06:	f7ff f9d0 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800ca10:	461a      	mov	r2, r3
 800ca12:	2118      	movs	r1, #24
 800ca14:	2000      	movs	r0, #0
 800ca16:	f7ff f9c8 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800ca1a:	bf00      	nop
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ca22:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca26:	b090      	sub	sp, #64	@ 0x40
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	61b9      	str	r1, [r7, #24]
 800ca2c:	617a      	str	r2, [r7, #20]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	4603      	mov	r3, r0
 800ca32:	83fb      	strh	r3, [r7, #30]
 800ca34:	4613      	mov	r3, r2
 800ca36:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800ca4a:	f04f 0200 	mov.w	r2, #0
 800ca4e:	f04f 0300 	mov.w	r3, #0
 800ca52:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800ca62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca64:	7a5a      	ldrb	r2, [r3, #9]
 800ca66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca68:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800ca6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca6c:	7a1a      	ldrb	r2, [r3, #8]
 800ca6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca70:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800ca72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca74:	7a9a      	ldrb	r2, [r3, #10]
 800ca76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca78:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800ca7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ca80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca82:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800ca84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff f93c 	bl	800bd08 <VL53LX_decode_vcsel_period>
 800ca90:	4603      	mov	r3, r0
 800ca92:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800ca94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca96:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800ca98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ca9e:	17da      	asrs	r2, r3, #31
 800caa0:	60bb      	str	r3, [r7, #8]
 800caa2:	60fa      	str	r2, [r7, #12]
 800caa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800caa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800caac:	8bfb      	ldrh	r3, [r7, #30]
 800caae:	2200      	movs	r2, #0
 800cab0:	4698      	mov	r8, r3
 800cab2:	4691      	mov	r9, r2
 800cab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab6:	fb08 f203 	mul.w	r2, r8, r3
 800caba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cabc:	fb09 f303 	mul.w	r3, r9, r3
 800cac0:	4413      	add	r3, r2
 800cac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cac4:	fba2 4508 	umull	r4, r5, r2, r8
 800cac8:	442b      	add	r3, r5
 800caca:	461d      	mov	r5, r3
 800cacc:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800cad0:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800cad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cad8:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800cadc:	f143 0b00 	adc.w	fp, r3, #0
 800cae0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800cae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cae8:	2b00      	cmp	r3, #0
 800caea:	da08      	bge.n	800cafe <VL53LX_f_006+0xdc>
 800caec:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800caf0:	1851      	adds	r1, r2, r1
 800caf2:	6039      	str	r1, [r7, #0]
 800caf4:	f143 0300 	adc.w	r3, r3, #0
 800caf8:	607b      	str	r3, [r7, #4]
 800cafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cafe:	f04f 0000 	mov.w	r0, #0
 800cb02:	f04f 0100 	mov.w	r1, #0
 800cb06:	0b10      	lsrs	r0, r2, #12
 800cb08:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800cb0c:	1319      	asrs	r1, r3, #12
 800cb0e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800cb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb14:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cb16:	2300      	movs	r3, #0
 800cb18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb1c:	e062      	b.n	800cbe4 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800cb1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb22:	089b      	lsrs	r3, r3, #2
 800cb24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800cb28:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cb2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb2e:	4413      	add	r3, r2
 800cb30:	7c9b      	ldrb	r3, [r3, #18]
 800cb32:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	dd4f      	ble.n	800cbda <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800cb3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb3c:	7a9b      	ldrb	r3, [r3, #10]
 800cb3e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d20f      	bcs.n	800cb66 <VL53LX_f_006+0x144>
 800cb46:	7f7b      	ldrb	r3, [r7, #29]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00c      	beq.n	800cb66 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800cb4c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb52:	3206      	adds	r2, #6
 800cb54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	441a      	add	r2, r3
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	fb02 f303 	mul.w	r3, r2, r3
 800cb62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb64:	e004      	b.n	800cb70 <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb6a:	fb02 f303 	mul.w	r3, r2, r3
 800cb6e:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800cb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fde1 	bl	800b73a <VL53LX_isqrt>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	0fda      	lsrs	r2, r3, #31
 800cb80:	4413      	add	r3, r2
 800cb82:	105b      	asrs	r3, r3, #1
 800cb84:	461a      	mov	r2, r3
 800cb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb88:	4413      	add	r3, r2
 800cb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800cb8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb8e:	6a3b      	ldr	r3, [r7, #32]
 800cb90:	fb92 f3f3 	sdiv	r3, r2, r3
 800cb94:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800cb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
 800cb9e:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	3308      	adds	r3, #8
 800cba4:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800cba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	da00      	bge.n	800cbae <VL53LX_f_006+0x18c>
 800cbac:	330f      	adds	r3, #15
 800cbae:	111b      	asrs	r3, r3, #4
 800cbb0:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800cbb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	4413      	add	r3, r2
 800cbb8:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800cbba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	da01      	bge.n	800cbc6 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800cbc6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cbca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbcc:	3216      	adds	r2, #22
 800cbce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800cbd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbd8:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cbda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cbde:	3301      	adds	r3, #1
 800cbe0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cbe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbe6:	7a9b      	ldrb	r3, [r3, #10]
 800cbe8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d396      	bcc.n	800cb1e <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800cbf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cbf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbf8:	7a1b      	ldrb	r3, [r3, #8]
 800cbfa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cbfe:	e033      	b.n	800cc68 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800cc00:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cc04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc06:	3206      	adds	r2, #6
 800cc08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc0c:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800cc10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc12:	3116      	adds	r1, #22
 800cc14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	dd13      	ble.n	800cc44 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800cc1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc22:	4413      	add	r3, r2
 800cc24:	2201      	movs	r2, #1
 800cc26:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cc28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc2e:	4413      	add	r3, r2
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800cc36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc38:	791b      	ldrb	r3, [r3, #4]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc40:	711a      	strb	r2, [r3, #4]
 800cc42:	e00c      	b.n	800cc5e <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cc44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc4a:	4413      	add	r3, r2
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cc50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc56:	4413      	add	r3, r2
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cc5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc62:	3301      	adds	r3, #1
 800cc64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cc68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc6a:	7a9b      	ldrb	r3, [r3, #10]
 800cc6c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d3c5      	bcc.n	800cc00 <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc74:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3740      	adds	r7, #64	@ 0x40
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cc82 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cca2:	2300      	movs	r3, #0
 800cca4:	73fb      	strb	r3, [r7, #15]
 800cca6:	e02d      	b.n	800cd04 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	78d2      	ldrb	r2, [r2, #3]
 800ccb0:	fb93 f1f2 	sdiv	r1, r3, r2
 800ccb4:	fb01 f202 	mul.w	r2, r1, r2
 800ccb8:	1a9b      	subs	r3, r3, r2
 800ccba:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	789b      	ldrb	r3, [r3, #2]
 800ccc0:	7bfa      	ldrb	r2, [r7, #15]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d21b      	bcs.n	800ccfe <VL53LX_f_007+0x7c>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	789b      	ldrb	r3, [r3, #2]
 800ccca:	7b3a      	ldrb	r2, [r7, #12]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d216      	bcs.n	800ccfe <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10f      	bne.n	800ccfe <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800ccde:	7b3b      	ldrb	r3, [r7, #12]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	4413      	add	r3, r2
 800cce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d108      	bne.n	800ccfe <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d105      	bne.n	800ccfe <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	7bfa      	ldrb	r2, [r7, #15]
 800ccf6:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	3301      	adds	r3, #1
 800cd02:	73fb      	strb	r3, [r7, #15]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	78db      	ldrb	r3, [r3, #3]
 800cd08:	7bfa      	ldrb	r2, [r7, #15]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d3cc      	bcc.n	800cca8 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b085      	sub	sp, #20
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cd3c:	73fb      	strb	r3, [r7, #15]
 800cd3e:	e05a      	b.n	800cdf6 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	78da      	ldrb	r2, [r3, #3]
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd4a:	fb01 f202 	mul.w	r2, r1, r2
 800cd4e:	1a9b      	subs	r3, r3, r2
 800cd50:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	3301      	adds	r3, #1
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	78d2      	ldrb	r2, [r2, #3]
 800cd5a:	fb93 f1f2 	sdiv	r1, r3, r2
 800cd5e:	fb01 f202 	mul.w	r2, r1, r2
 800cd62:	1a9b      	subs	r3, r3, r2
 800cd64:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	789b      	ldrb	r3, [r3, #2]
 800cd6a:	7b7a      	ldrb	r2, [r7, #13]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d23f      	bcs.n	800cdf0 <VL53LX_f_008+0xd2>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	789b      	ldrb	r3, [r3, #2]
 800cd74:	7b3a      	ldrb	r2, [r7, #12]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d23a      	bcs.n	800cdf0 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800cd7a:	7b7b      	ldrb	r3, [r7, #13]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10e      	bne.n	800cda6 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800cd88:	7b3b      	ldrb	r3, [r7, #12]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d107      	bne.n	800cda6 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d905      	bls.n	800cdc2 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cdc2:	7b7b      	ldrb	r3, [r7, #13]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cdd0:	7b7b      	ldrb	r3, [r7, #13]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	4413      	add	r3, r2
 800cddc:	460a      	mov	r2, r1
 800cdde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cde2:	e005      	b.n	800cdf0 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cde4:	7b7b      	ldrb	r3, [r7, #13]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4413      	add	r3, r2
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cdf6:	7bfa      	ldrb	r2, [r7, #15]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cdfe:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800ce04:	440b      	add	r3, r1
 800ce06:	429a      	cmp	r2, r3
 800ce08:	db9a      	blt.n	800cd40 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ce0a:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	78db      	ldrb	r3, [r3, #3]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800ce42:	7cbb      	ldrb	r3, [r7, #18]
 800ce44:	085b      	lsrs	r3, r3, #1
 800ce46:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800ce4e:	75fb      	strb	r3, [r7, #23]
 800ce50:	e0a2      	b.n	800cf98 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	78da      	ldrb	r2, [r3, #3]
 800ce56:	7dfb      	ldrb	r3, [r7, #23]
 800ce58:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce5c:	fb01 f202 	mul.w	r2, r1, r2
 800ce60:	1a9b      	subs	r3, r3, r2
 800ce62:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	3301      	adds	r3, #1
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	78d2      	ldrb	r2, [r2, #3]
 800ce6c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ce70:	fb01 f202 	mul.w	r2, r1, r2
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	789b      	ldrb	r3, [r3, #2]
 800ce7c:	7d7a      	ldrb	r2, [r7, #21]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	f080 8087 	bcs.w	800cf92 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800ce88:	7d3a      	ldrb	r2, [r7, #20]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	f080 8081 	bcs.w	800cf92 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800ce90:	7d7b      	ldrb	r3, [r7, #21]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	4413      	add	r3, r2
 800ce96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d12f      	bne.n	800cefe <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800ce9e:	7d3b      	ldrb	r3, [r7, #20]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	4413      	add	r3, r2
 800cea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d028      	beq.n	800cefe <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800ceac:	7d3b      	ldrb	r3, [r7, #20]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cec0:	7cfa      	ldrb	r2, [r7, #19]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d21b      	bcs.n	800cefe <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cec6:	7cfa      	ldrb	r2, [r7, #19]
 800cec8:	4613      	mov	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	4413      	add	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	4413      	add	r3, r2
 800ced8:	3304      	adds	r3, #4
 800ceda:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	7dfa      	ldrb	r2, [r7, #23]
 800cee0:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	3301      	adds	r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	22ff      	movs	r2, #255	@ 0xff
 800cef0:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2200      	movs	r2, #0
 800cefc:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800cefe:	7d7b      	ldrb	r3, [r7, #21]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	4413      	add	r3, r2
 800cf04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d042      	beq.n	800cf92 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800cf0c:	7d3b      	ldrb	r3, [r7, #20]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d13b      	bne.n	800cf92 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800cf1a:	7d7b      	ldrb	r3, [r7, #21]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	4413      	add	r3, r2
 800cf20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf24:	3b01      	subs	r3, #1
 800cf26:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800cf2e:	7cfa      	ldrb	r2, [r7, #19]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d22e      	bcs.n	800cf92 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cf34:	7cfa      	ldrb	r2, [r7, #19]
 800cf36:	4613      	mov	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	4413      	add	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	4413      	add	r3, r2
 800cf46:	3304      	adds	r3, #4
 800cf48:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	7dfa      	ldrb	r2, [r7, #23]
 800cf4e:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	3301      	adds	r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	3301      	adds	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	799b      	ldrb	r3, [r3, #6]
 800cf86:	7cba      	ldrb	r2, [r7, #18]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d202      	bcs.n	800cf92 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	7cba      	ldrb	r2, [r7, #18]
 800cf90:	719a      	strb	r2, [r3, #6]
		blb++) {
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	3301      	adds	r3, #1
 800cf96:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800cf98:	7dfa      	ldrb	r2, [r7, #23]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800cfa0:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cfa6:	440b      	add	r3, r1
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	f6ff af52 	blt.w	800ce52 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfae:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b090      	sub	sp, #64	@ 0x40
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	6039      	str	r1, [r7, #0]
 800cfc8:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cfd0:	f107 030c 	add.w	r3, r7, #12
 800cfd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d965      	bls.n	800d0b8 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cfec:	e05f      	b.n	800d0ae <VL53LX_f_016+0xf0>

		swapped = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cff4:	2301      	movs	r3, #1
 800cff6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cffa:	e051      	b.n	800d0a0 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cffc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d000:	1e5a      	subs	r2, r3, #1
 800d002:	4613      	mov	r3, r2
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	4413      	add	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	4413      	add	r3, r2
 800d012:	3304      	adds	r3, #4
 800d014:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800d016:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d01a:	4613      	mov	r3, r2
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	4413      	add	r3, r2
 800d02a:	3304      	adds	r3, #4
 800d02c:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	2b02      	cmp	r3, #2
 800d032:	d118      	bne.n	800d066 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800d034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d036:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800d03c:	429a      	cmp	r2, r3
 800d03e:	da2a      	bge.n	800d096 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d040:	2224      	movs	r2, #36	@ 0x24
 800d042:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d044:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d046:	f008 fcea 	bl	8015a1e <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d04a:	2224      	movs	r2, #36	@ 0x24
 800d04c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d04e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d050:	f008 fce5 	bl	8015a1e <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d054:	2224      	movs	r2, #36	@ 0x24
 800d056:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d058:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d05a:	f008 fce0 	bl	8015a1e <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d05e:	2301      	movs	r3, #1
 800d060:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800d064:	e017      	b.n	800d096 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800d066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d068:	699a      	ldr	r2, [r3, #24]
 800d06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d911      	bls.n	800d096 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d072:	2224      	movs	r2, #36	@ 0x24
 800d074:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d076:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d078:	f008 fcd1 	bl	8015a1e <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d07c:	2224      	movs	r2, #36	@ 0x24
 800d07e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d082:	f008 fccc 	bl	8015a1e <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d086:	2224      	movs	r2, #36	@ 0x24
 800d088:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d08a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d08c:	f008 fcc7 	bl	8015a1e <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d096:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d09a:	3301      	adds	r3, #1
 800d09c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800d0a6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d3a6      	bcc.n	800cffc <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d0ae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d19b      	bne.n	800cfee <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d0b6:	e000      	b.n	800d0ba <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d0b8:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d0ba:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3740      	adds	r7, #64	@ 0x40
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b087      	sub	sp, #28
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	60b9      	str	r1, [r7, #8]
 800d0d0:	607a      	str	r2, [r7, #4]
 800d0d2:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d0e0:	7bfa      	ldrb	r2, [r7, #15]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	4413      	add	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2200      	movs	r2, #0
 800d100:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	75fb      	strb	r3, [r7, #23]
 800d108:	e01c      	b.n	800d144 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	78da      	ldrb	r2, [r3, #3]
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	fbb3 f1f2 	udiv	r1, r3, r2
 800d114:	fb01 f202 	mul.w	r2, r1, r2
 800d118:	1a9b      	subs	r3, r3, r2
 800d11a:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	68da      	ldr	r2, [r3, #12]
 800d120:	7d79      	ldrb	r1, [r7, #21]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	3106      	adds	r1, #6
 800d126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d12a:	441a      	add	r2, r3
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	689a      	ldr	r2, [r3, #8]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	441a      	add	r2, r3
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d13e:	7dfb      	ldrb	r3, [r7, #23]
 800d140:	3301      	adds	r3, #1
 800d142:	75fb      	strb	r3, [r7, #23]
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	791b      	ldrb	r3, [r3, #4]
 800d148:	7dfa      	ldrb	r2, [r7, #23]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d9dd      	bls.n	800d10a <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	68da      	ldr	r2, [r3, #12]
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d15c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d160:	4618      	mov	r0, r3
 800d162:	371c      	adds	r7, #28
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d16c:	b590      	push	{r4, r7, lr}
 800d16e:	b08d      	sub	sp, #52	@ 0x34
 800d170:	af02      	add	r7, sp, #8
 800d172:	60ba      	str	r2, [r7, #8]
 800d174:	607b      	str	r3, [r7, #4]
 800d176:	4603      	mov	r3, r0
 800d178:	73fb      	strb	r3, [r7, #15]
 800d17a:	460b      	mov	r3, r1
 800d17c:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d17e:	2300      	movs	r3, #0
 800d180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	4613      	mov	r3, r2
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	789b      	ldrb	r3, [r3, #2]
 800d1b4:	2bff      	cmp	r3, #255	@ 0xff
 800d1b6:	d102      	bne.n	800d1be <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	789b      	ldrb	r3, [r3, #2]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	78d2      	ldrb	r2, [r2, #3]
 800d1c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1ca:	fb01 f202 	mul.w	r2, r1, r2
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800d1d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d1d8:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	461a      	mov	r2, r3
 800d1e0:	8c3b      	ldrh	r3, [r7, #32]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d1e8:	8c3b      	ldrh	r3, [r7, #32]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	7892      	ldrb	r2, [r2, #2]
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d1f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d1f8:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	791b      	ldrb	r3, [r3, #4]
 800d1fe:	461a      	mov	r2, r3
 800d200:	8bfb      	ldrh	r3, [r7, #30]
 800d202:	4413      	add	r3, r2
 800d204:	b29b      	uxth	r3, r3
 800d206:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d208:	8bfb      	ldrh	r3, [r7, #30]
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	7892      	ldrb	r2, [r2, #2]
 800d20e:	1a9b      	subs	r3, r3, r2
 800d210:	b29b      	uxth	r3, r3
 800d212:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d214:	8bfa      	ldrh	r2, [r7, #30]
 800d216:	8c3b      	ldrh	r3, [r7, #32]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800d21e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d222:	2b03      	cmp	r3, #3
 800d224:	dd01      	ble.n	800d22a <VL53LX_f_015+0xbe>
		window_width = 3;
 800d226:	2303      	movs	r3, #3
 800d228:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d22a:	8c3a      	ldrh	r2, [r7, #32]
 800d22c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d22e:	4413      	add	r3, r2
 800d230:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d232:	b219      	sxth	r1, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	78da      	ldrb	r2, [r3, #3]
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	3314      	adds	r3, #20
 800d23c:	7bbc      	ldrb	r4, [r7, #14]
 800d23e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d242:	9301      	str	r3, [sp, #4]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4623      	mov	r3, r4
 800d24a:	f000 f846 	bl	800d2da <VL53LX_f_020>
 800d24e:	4603      	mov	r3, r0
 800d250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d254:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d114      	bne.n	800d286 <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d25c:	8bfa      	ldrh	r2, [r7, #30]
 800d25e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d264:	b218      	sxth	r0, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	78da      	ldrb	r2, [r3, #3]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	331c      	adds	r3, #28
 800d26e:	7bbc      	ldrb	r4, [r7, #14]
 800d270:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	4623      	mov	r3, r4
 800d27c:	f000 f82d 	bl	800d2da <VL53LX_f_020>
 800d280:	4603      	mov	r3, r0
 800d282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	695a      	ldr	r2, [r3, #20]
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	69db      	ldr	r3, [r3, #28]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d909      	bls.n	800d2a6 <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	69ba      	ldr	r2, [r7, #24]
 800d2a4:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	699a      	ldr	r2, [r3, #24]
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d203      	bcs.n	800d2ba <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	699a      	ldr	r2, [r3, #24]
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d903      	bls.n	800d2ce <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	699a      	ldr	r2, [r3, #24]
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d2ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	372c      	adds	r7, #44	@ 0x2c
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd90      	pop	{r4, r7, pc}

0800d2da <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d2da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2de:	b09b      	sub	sp, #108	@ 0x6c
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	461c      	mov	r4, r3
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800d2f2:	4623      	mov	r3, r4
 800d2f4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	int16_t  i            = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	int16_t  lb            = 0;
 800d304:	2300      	movs	r3, #0
 800d306:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	int64_t VL53LX_p_018        = 0;
 800d30a:	f04f 0200 	mov.w	r2, #0
 800d30e:	f04f 0300 	mov.w	r3, #0
 800d312:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t event_sum     = 0;
 800d316:	f04f 0200 	mov.w	r2, #0
 800d31a:	f04f 0300 	mov.w	r3, #0
 800d31e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	int64_t weighted_sum  = 0;
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	f04f 0300 	mov.w	r3, #0
 800d32a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d32e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d336:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800d338:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 809b 	beq.w	800d478 <VL53LX_f_020+0x19e>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d342:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d344:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d348:	e08f      	b.n	800d46a <VL53LX_f_020+0x190>

		if (lb < 0)
 800d34a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800d34e:	2b00      	cmp	r3, #0
 800d350:	da09      	bge.n	800d366 <VL53LX_f_020+0x8c>
			i = lb + (int16_t)VL53LX_p_030;
 800d352:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d356:	b29a      	uxth	r2, r3
 800d358:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d35c:	4413      	add	r3, r2
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d364:	e00a      	b.n	800d37c <VL53LX_f_020+0xa2>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d366:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	@ 0x64
 800d36a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800d36e:	fb91 f3f2 	sdiv	r3, r1, r2
 800d372:	fb02 f303 	mul.w	r3, r2, r3
 800d376:	1acb      	subs	r3, r1, r3
 800d378:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d37c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800d380:	2b00      	cmp	r3, #0
 800d382:	db6b      	blt.n	800d45c <VL53LX_f_020+0x182>
 800d384:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800d388:	2b17      	cmp	r3, #23
 800d38a:	dc67      	bgt.n	800d45c <VL53LX_f_020+0x182>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d38c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800d390:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d394:	3306      	adds	r3, #6
 800d396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d39a:	17da      	asrs	r2, r3, #31
 800d39c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d39e:	62fa      	str	r2, [r7, #44]	@ 0x2c
				(int64_t)pbins->VL53LX_p_028;
 800d3a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d3a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d3a8:	17da      	asrs	r2, r3, #31
 800d3aa:	623b      	str	r3, [r7, #32]
 800d3ac:	627a      	str	r2, [r7, #36]	@ 0x24
			VL53LX_p_018 =
 800d3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	61bb      	str	r3, [r7, #24]
 800d3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3bc:	460a      	mov	r2, r1
 800d3be:	eb63 0302 	sbc.w	r3, r3, r2
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d3c8:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d3cc:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d009      	beq.n	800d3e8 <VL53LX_f_020+0x10e>
 800d3d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	da05      	bge.n	800d3e8 <VL53LX_f_020+0x10e>
				VL53LX_p_018 = 0;
 800d3dc:	f04f 0200 	mov.w	r2, #0
 800d3e0:	f04f 0300 	mov.w	r3, #0
 800d3e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			event_sum += VL53LX_p_018;
 800d3e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d3ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d3f0:	1884      	adds	r4, r0, r2
 800d3f2:	613c      	str	r4, [r7, #16]
 800d3f4:	eb41 0303 	adc.w	r3, r1, r3
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d3fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d402:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800d406:	17da      	asrs	r2, r3, #31
 800d408:	633b      	str	r3, [r7, #48]	@ 0x30
 800d40a:	637a      	str	r2, [r7, #52]	@ 0x34
 800d40c:	f04f 0200 	mov.w	r2, #0
 800d410:	f04f 0300 	mov.w	r3, #0
 800d414:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d416:	02cb      	lsls	r3, r1, #11
 800d418:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d41a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d41e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d420:	02ca      	lsls	r2, r1, #11
 800d422:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800d426:	f143 0600 	adc.w	r6, r3, #0
 800d42a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d42c:	fb06 f203 	mul.w	r2, r6, r3
 800d430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d432:	fb05 f303 	mul.w	r3, r5, r3
 800d436:	441a      	add	r2, r3
 800d438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d43a:	fba3 ab05 	umull	sl, fp, r3, r5
 800d43e:	eb02 030b 	add.w	r3, r2, fp
 800d442:	469b      	mov	fp, r3
			weighted_sum +=
 800d444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d448:	eb12 010a 	adds.w	r1, r2, sl
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	eb43 030b 	adc.w	r3, r3, fp
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d458:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d45c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800d460:	b29b      	uxth	r3, r3
 800d462:	3301      	adds	r3, #1
 800d464:	b29b      	uxth	r3, r3
 800d466:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d46a:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800d46e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800d472:	429a      	cmp	r2, r3
 800d474:	f77f af69 	ble.w	800d34a <VL53LX_f_020+0x70>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d47c:	2a01      	cmp	r2, #1
 800d47e:	f173 0300 	sbcs.w	r3, r3, #0
 800d482:	db39      	blt.n	800d4f8 <VL53LX_f_020+0x21e>
		weighted_sum += do_division_s(event_sum, 2);
 800d484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d488:	f04f 0000 	mov.w	r0, #0
 800d48c:	f04f 0100 	mov.w	r1, #0
 800d490:	0fd8      	lsrs	r0, r3, #31
 800d492:	2100      	movs	r1, #0
 800d494:	eb10 0802 	adds.w	r8, r0, r2
 800d498:	eb41 0903 	adc.w	r9, r1, r3
 800d49c:	f04f 0200 	mov.w	r2, #0
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d4a8:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800d4ac:	ea4f 0369 	mov.w	r3, r9, asr #1
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d4b8:	1814      	adds	r4, r2, r0
 800d4ba:	603c      	str	r4, [r7, #0]
 800d4bc:	414b      	adcs	r3, r1
 800d4be:	607b      	str	r3, [r7, #4]
 800d4c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d4c4:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d4c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d4cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800d4d0:	f7f3 fb8a 	bl	8000be8 <__aeabi_ldivmod>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		if (weighted_sum < 0)
 800d4dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	da05      	bge.n	800d4f0 <VL53LX_f_020+0x216>
			weighted_sum = 0;
 800d4e4:	f04f 0200 	mov.w	r2, #0
 800d4e8:	f04f 0300 	mov.w	r3, #0
 800d4ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		*pphase = (uint32_t)weighted_sum;
 800d4f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d4f6:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d4f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	376c      	adds	r7, #108	@ 0x6c
 800d500:	46bd      	mov	sp, r7
 800d502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d506 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b086      	sub	sp, #24
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
 800d512:	4603      	mov	r3, r0
 800d514:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d516:	2300      	movs	r3, #0
 800d518:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d522:	7bfa      	ldrb	r2, [r7, #15]
 800d524:	4613      	mov	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	4413      	add	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	4413      	add	r3, r2
 800d534:	3304      	adds	r3, #4
 800d536:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d538:	22ac      	movs	r2, #172	@ 0xac
 800d53a:	68b9      	ldr	r1, [r7, #8]
 800d53c:	6a38      	ldr	r0, [r7, #32]
 800d53e:	f008 fa6e 	bl	8015a1e <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d548:	75fb      	strb	r3, [r7, #23]
 800d54a:	e020      	b.n	800d58e <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	7dfa      	ldrb	r2, [r7, #23]
 800d552:	429a      	cmp	r2, r3
 800d554:	d304      	bcc.n	800d560 <VL53LX_f_011+0x5a>
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	791b      	ldrb	r3, [r3, #4]
 800d55a:	7dfa      	ldrb	r2, [r7, #23]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d913      	bls.n	800d588 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	78da      	ldrb	r2, [r3, #3]
 800d564:	7dfb      	ldrb	r3, [r7, #23]
 800d566:	fbb3 f1f2 	udiv	r1, r3, r2
 800d56a:	fb01 f202 	mul.w	r2, r1, r2
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d572:	6a3b      	ldr	r3, [r7, #32]
 800d574:	7a9b      	ldrb	r3, [r3, #10]
 800d576:	7d7a      	ldrb	r2, [r7, #21]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d205      	bcs.n	800d588 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d57c:	7d7a      	ldrb	r2, [r7, #21]
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	3206      	adds	r2, #6
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d588:	7dfb      	ldrb	r3, [r7, #23]
 800d58a:	3301      	adds	r3, #1
 800d58c:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d58e:	7dfa      	ldrb	r2, [r7, #23]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800d596:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d59c:	440b      	add	r3, r1
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	dbd4      	blt.n	800d54c <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	b096      	sub	sp, #88	@ 0x58
 800d5b4:	af08      	add	r7, sp, #32
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	4608      	mov	r0, r1
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	461a      	mov	r2, r3
 800d5be:	4623      	mov	r3, r4
 800d5c0:	73fb      	strb	r3, [r7, #15]
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	73bb      	strb	r3, [r7, #14]
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	737b      	strb	r3, [r7, #13]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d600:	7b7b      	ldrb	r3, [r7, #13]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d60c:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d60e:	f06f 030e 	mvn.w	r3, #14
 800d612:	e06f      	b.n	800d6f4 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	7b7a      	ldrb	r2, [r7, #13]
 800d618:	fbb3 f1f2 	udiv	r1, r3, r2
 800d61c:	fb01 f202 	mul.w	r2, r1, r2
 800d620:	1a9b      	subs	r3, r3, r2
 800d622:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800d626:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d62a:	7b39      	ldrb	r1, [r7, #12]
 800d62c:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d630:	f107 0320 	add.w	r3, r7, #32
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	4613      	mov	r3, r2
 800d63e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d640:	f000 fdd7 	bl	800e1f2 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d644:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d648:	7b39      	ldrb	r1, [r7, #12]
 800d64a:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d64e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d652:	9301      	str	r3, [sp, #4]
 800d654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	4613      	mov	r3, r2
 800d65c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d65e:	f000 fdc8 	bl	800e1f2 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d662:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00e      	beq.n	800d688 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d66a:	f107 021c 	add.w	r2, r7, #28
 800d66e:	7b39      	ldrb	r1, [r7, #12]
 800d670:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800d674:	f107 0314 	add.w	r3, r7, #20
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	f107 0318 	add.w	r3, r7, #24
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	4613      	mov	r3, r2
 800d682:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d684:	f000 fdb5 	bl	800e1f2 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68a:	469c      	mov	ip, r3
 800d68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68e:	469e      	mov	lr, r3
 800d690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d692:	4698      	mov	r8, r3
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	4619      	mov	r1, r3
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	461c      	mov	r4, r3
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	461d      	mov	r5, r3
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	461e      	mov	r6, r3
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d6a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800d6ae:	607b      	str	r3, [r7, #4]
 800d6b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6b2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800d6b6:	7bb8      	ldrb	r0, [r7, #14]
 800d6b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d6ba:	9207      	str	r2, [sp, #28]
 800d6bc:	9306      	str	r3, [sp, #24]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	9205      	str	r2, [sp, #20]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	9304      	str	r3, [sp, #16]
 800d6c6:	9603      	str	r6, [sp, #12]
 800d6c8:	9502      	str	r5, [sp, #8]
 800d6ca:	9401      	str	r4, [sp, #4]
 800d6cc:	9100      	str	r1, [sp, #0]
 800d6ce:	4643      	mov	r3, r8
 800d6d0:	4672      	mov	r2, lr
 800d6d2:	4661      	mov	r1, ip
 800d6d4:	f002 ff28 	bl	8010528 <VL53LX_f_023>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d6de:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800d6e2:	f113 0f0f 	cmn.w	r3, #15
 800d6e6:	d103      	bne.n	800d6f0 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d6e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6ee:	801a      	strh	r2, [r3, #0]


	return status;
 800d6f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3738      	adds	r7, #56	@ 0x38
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d6fe <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d6fe:	b490      	push	{r4, r7}
 800d700:	b084      	sub	sp, #16
 800d702:	af00      	add	r7, sp, #0
 800d704:	4604      	mov	r4, r0
 800d706:	4608      	mov	r0, r1
 800d708:	4611      	mov	r1, r2
 800d70a:	461a      	mov	r2, r3
 800d70c:	4623      	mov	r3, r4
 800d70e:	71fb      	strb	r3, [r7, #7]
 800d710:	4603      	mov	r3, r0
 800d712:	71bb      	strb	r3, [r7, #6]
 800d714:	460b      	mov	r3, r1
 800d716:	717b      	strb	r3, [r7, #5]
 800d718:	4613      	mov	r3, r2
 800d71a:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	79fa      	ldrb	r2, [r7, #7]
 800d728:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	2200      	movs	r2, #0
 800d72e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	785a      	ldrb	r2, [r3, #1]
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	789a      	ldrb	r2, [r3, #2]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	78da      	ldrb	r2, [r3, #3]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	791a      	ldrb	r2, [r3, #4]
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	795a      	ldrb	r2, [r3, #5]
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	791a      	ldrb	r2, [r3, #4]
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	1ad3      	subs	r3, r2, r3
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	3301      	adds	r3, #1
 800d76e:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	8c1a      	ldrh	r2, [r3, #32]
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	695b      	ldr	r3, [r3, #20]
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	b29a      	uxth	r2, r3
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	69db      	ldr	r3, [r3, #28]
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6a3b      	ldr	r3, [r7, #32]
 800d7b0:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	691a      	ldr	r2, [r3, #16]
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6a3b      	ldr	r3, [r7, #32]
 800d7c2:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d7ce:	6a3b      	ldr	r3, [r7, #32]
 800d7d0:	2213      	movs	r2, #19
 800d7d2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800d7d6:	887b      	ldrh	r3, [r7, #2]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00a      	beq.n	800d7f2 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	8c1b      	ldrh	r3, [r3, #32]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	887b      	ldrh	r3, [r7, #2]
 800d7e4:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d903      	bls.n	800d7f2 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	2206      	movs	r2, #6
 800d7ee:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d7f2:	79bb      	ldrb	r3, [r7, #6]
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	021b      	lsls	r3, r3, #8
 800d7f8:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	8a9b      	ldrh	r3, [r3, #20]
 800d7fe:	89fa      	ldrh	r2, [r7, #14]
 800d800:	429a      	cmp	r2, r3
 800d802:	d205      	bcs.n	800d810 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d804:	6a3b      	ldr	r3, [r7, #32]
 800d806:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d808:	89fb      	ldrh	r3, [r7, #14]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	81fb      	strh	r3, [r7, #14]
 800d80e:	e001      	b.n	800d814 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d814:	797b      	ldrb	r3, [r7, #5]
 800d816:	b29b      	uxth	r3, r3
 800d818:	021b      	lsls	r3, r3, #8
 800d81a:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800d822:	89bb      	ldrh	r3, [r7, #12]
 800d824:	4413      	add	r3, r2
 800d826:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d82e:	89fa      	ldrh	r2, [r7, #14]
 800d830:	429a      	cmp	r2, r3
 800d832:	d805      	bhi.n	800d840 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d83a:	89ba      	ldrh	r2, [r7, #12]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d203      	bcs.n	800d848 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	2205      	movs	r2, #5
 800d844:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bc90      	pop	{r4, r7}
 800d850:	4770      	bx	lr

0800d852 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d852:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d854:	b08f      	sub	sp, #60	@ 0x3c
 800d856:	af06      	add	r7, sp, #24
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	607a      	str	r2, [r7, #4]
 800d85e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d860:	2300      	movs	r3, #0
 800d862:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d86a:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d86e:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d870:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d872:	f7ff f85d 	bl	800c930 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d878:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800d87c:	22ac      	movs	r2, #172	@ 0xac
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	4618      	mov	r0, r3
 800d882:	f008 f8cc 	bl	8015a1e <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	781a      	ldrb	r2, [r3, #0]
 800d88a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d88c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	785a      	ldrb	r2, [r3, #1]
 800d892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d894:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	789a      	ldrb	r2, [r3, #2]
 800d89a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d89c:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800d8a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8a6:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d8a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d8ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d8b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	77bb      	strb	r3, [r7, #30]
 800d8be:	e008      	b.n	800d8d2 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d8c0:	7fbb      	ldrb	r3, [r7, #30]
 800d8c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	4413      	add	r3, r2
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d8cc:	7fbb      	ldrb	r3, [r7, #30]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	77bb      	strb	r3, [r7, #30]
 800d8d2:	7fbb      	ldrb	r3, [r7, #30]
 800d8d4:	2b04      	cmp	r3, #4
 800d8d6:	d9f3      	bls.n	800d8c0 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8da:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fd ff5f 	bl	800b7a2 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ec:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4610      	mov	r0, r2
 800d8f4:	f7fd ff95 	bl	800b822 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fa:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe fb6d 	bl	800bfde <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d906:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe f803 	bl	800b916 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d916:	2b00      	cmp	r3, #0
 800d918:	d009      	beq.n	800d92e <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d91a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d91c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800d920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d922:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800d926:	461a      	mov	r2, r3
 800d928:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d92a:	f000 fdaa 	bl	800e482 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d936:	2300      	movs	r3, #0
 800d938:	77bb      	strb	r3, [r7, #30]
 800d93a:	e01e      	b.n	800d97a <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d93c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d117      	bne.n	800d974 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d944:	7fbb      	ldrb	r3, [r7, #30]
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	3304      	adds	r3, #4
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	4413      	add	r3, r2
 800d94e:	8898      	ldrh	r0, [r3, #4]
 800d950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d952:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d956:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d95c:	4413      	add	r3, r2
 800d95e:	3304      	adds	r3, #4
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	460b      	mov	r3, r1
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	f7fe fb82 	bl	800c074 <VL53LX_f_001>
 800d970:	4603      	mov	r3, r0
 800d972:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d974:	7fbb      	ldrb	r3, [r7, #30]
 800d976:	3301      	adds	r3, #1
 800d978:	77bb      	strb	r3, [r7, #30]
 800d97a:	7fbb      	ldrb	r3, [r7, #30]
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d9dd      	bls.n	800d93c <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d980:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d11a      	bne.n	800d9be <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d990:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800d99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d9a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9a4:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800d9a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9aa:	9102      	str	r1, [sp, #8]
 800d9ac:	9201      	str	r2, [sp, #4]
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462b      	mov	r3, r5
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	f7ff f834 	bl	800ca22 <VL53LX_f_006>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d9be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d104      	bne.n	800d9d0 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d9c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d9c8:	f7ff f95b 	bl	800cc82 <VL53LX_f_007>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d9d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d104      	bne.n	800d9e2 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d9d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d9da:	f7ff f9a0 	bl	800cd1e <VL53LX_f_008>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d9e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d104      	bne.n	800d9f4 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d9ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d9ec:	f7ff fa15 	bl	800ce1a <VL53LX_f_009>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	77bb      	strb	r3, [r7, #30]
 800d9f8:	e0a6      	b.n	800db48 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d9fa:	7fba      	ldrb	r2, [r7, #30]
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	4413      	add	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800da08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da0a:	4413      	add	r3, r2
 800da0c:	3304      	adds	r3, #4
 800da0e:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800da10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800da18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da1a:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800da1e:	7fbb      	ldrb	r3, [r7, #30]
 800da20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da22:	4618      	mov	r0, r3
 800da24:	f7ff fb4f 	bl	800d0c6 <VL53LX_f_010>
 800da28:	4603      	mov	r3, r0
 800da2a:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800da2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d110      	bne.n	800da56 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800da34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da36:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800da40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da42:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800da46:	7fb8      	ldrb	r0, [r7, #30]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	4613      	mov	r3, r2
 800da4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da4e:	f7ff fd5a 	bl	800d506 <VL53LX_f_011>
 800da52:	4603      	mov	r3, r0
 800da54:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800da56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10d      	bne.n	800da7a <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800da5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da60:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800da64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da66:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800da6a:	7fb8      	ldrb	r0, [r7, #30]
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	2300      	movs	r3, #0
 800da70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da72:	f7ff fd48 	bl	800d506 <VL53LX_f_011>
 800da76:	4603      	mov	r3, r0
 800da78:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800da7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10d      	bne.n	800da9e <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800da82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da84:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800da88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da8a:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800da8e:	7fb8      	ldrb	r0, [r7, #30]
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	2300      	movs	r3, #0
 800da94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da96:	f7ff fd36 	bl	800d506 <VL53LX_f_011>
 800da9a:	4603      	mov	r3, r0
 800da9c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800da9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d109      	bne.n	800daba <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800daa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa8:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800daac:	7fb8      	ldrb	r0, [r7, #30]
 800daae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dab2:	f000 f8dd 	bl	800dc70 <VL53LX_f_026>
 800dab6:	4603      	mov	r3, r0
 800dab8:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800daba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d108      	bne.n	800dad4 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	8a19      	ldrh	r1, [r3, #16]
 800dac6:	7fb8      	ldrb	r0, [r7, #30]
 800dac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dacc:	f000 f95c 	bl	800dd88 <VL53LX_f_027>
 800dad0:	4603      	mov	r3, r0
 800dad2:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800dad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d124      	bne.n	800db26 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	789d      	ldrb	r5, [r3, #2]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7e1e      	ldrb	r6, [r3, #24]
 800dae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae6:	f893 c003 	ldrb.w	ip, [r3, #3]
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f893 e006 	ldrb.w	lr, [r3, #6]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800daf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800daf8:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800dafc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dafe:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800db02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db04:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800db08:	697c      	ldr	r4, [r7, #20]
 800db0a:	3420      	adds	r4, #32
 800db0c:	9404      	str	r4, [sp, #16]
 800db0e:	9003      	str	r0, [sp, #12]
 800db10:	9102      	str	r1, [sp, #8]
 800db12:	9201      	str	r2, [sp, #4]
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	4673      	mov	r3, lr
 800db18:	4662      	mov	r2, ip
 800db1a:	4631      	mov	r1, r6
 800db1c:	4628      	mov	r0, r5
 800db1e:	f7ff fd46 	bl	800d5ae <VL53LX_f_014>
 800db22:	4603      	mov	r3, r0
 800db24:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800db26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d109      	bne.n	800db42 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800db2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db30:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800db34:	7fb8      	ldrb	r0, [r7, #30]
 800db36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db38:	2101      	movs	r1, #1
 800db3a:	f7ff fb17 	bl	800d16c <VL53LX_f_015>
 800db3e:	4603      	mov	r3, r0
 800db40:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800db42:	7fbb      	ldrb	r3, [r7, #30]
 800db44:	3301      	adds	r3, #1
 800db46:	77bb      	strb	r3, [r7, #30]
 800db48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db4a:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800db4e:	7fba      	ldrb	r2, [r7, #30]
 800db50:	429a      	cmp	r2, r3
 800db52:	f4ff af52 	bcc.w	800d9fa <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800db56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d107      	bne.n	800db6e <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	785b      	ldrb	r3, [r3, #1]
 800db62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fa2a 	bl	800cfbe <VL53LX_f_016>
 800db6a:	4603      	mov	r3, r0
 800db6c:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800db6e:	2300      	movs	r3, #0
 800db70:	77bb      	strb	r3, [r7, #30]
 800db72:	e071      	b.n	800dc58 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800db74:	7fba      	ldrb	r2, [r7, #30]
 800db76:	4613      	mov	r3, r2
 800db78:	00db      	lsls	r3, r3, #3
 800db7a:	4413      	add	r3, r2
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800db82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800db84:	4413      	add	r3, r2
 800db86:	3304      	adds	r3, #4
 800db88:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800db8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db8c:	7c9a      	ldrb	r2, [r3, #18]
 800db8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db90:	7c5b      	ldrb	r3, [r3, #17]
 800db92:	429a      	cmp	r2, r3
 800db94:	d25c      	bcs.n	800dc50 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800db9e:	429a      	cmp	r2, r3
 800dba0:	dd57      	ble.n	800dc52 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800dba6:	2bff      	cmp	r3, #255	@ 0xff
 800dba8:	d053      	beq.n	800dc52 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800dbaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbac:	7c9b      	ldrb	r3, [r3, #18]
 800dbae:	461a      	mov	r2, r3
			prange_data =
 800dbb0:	234c      	movs	r3, #76	@ 0x4c
 800dbb2:	fb02 f303 	mul.w	r3, r2, r3
 800dbb6:	3310      	adds	r3, #16
 800dbb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbba:	4413      	add	r3, r2
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800dbc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d115      	bne.n	800dbf4 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800dbc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbca:	7c98      	ldrb	r0, [r3, #18]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 1020 	ldrb.w	r1, [r3, #32]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	8b5d      	ldrh	r5, [r3, #26]
 800dbdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbde:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	9202      	str	r2, [sp, #8]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	9201      	str	r2, [sp, #4]
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	462b      	mov	r3, r5
 800dbee:	4622      	mov	r2, r4
 800dbf0:	f7ff fd85 	bl	800d6fe <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800dbf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d115      	bne.n	800dc28 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800dc14:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	4623      	mov	r3, r4
 800dc20:	f000 fb40 	bl	800e2a4 <VL53LX_f_018>
 800dc24:	4603      	mov	r3, r0
 800dc26:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800dc28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d108      	bne.n	800dc42 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8bd8      	ldrh	r0, [r3, #30]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f000 fbd6 	bl	800e3ee <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dc42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc44:	7c9b      	ldrb	r3, [r3, #18]
 800dc46:	3301      	adds	r3, #1
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc4c:	749a      	strb	r2, [r3, #18]
 800dc4e:	e000      	b.n	800dc52 <VL53LX_f_025+0x400>
			continue;
 800dc50:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dc52:	7fbb      	ldrb	r3, [r7, #30]
 800dc54:	3301      	adds	r3, #1
 800dc56:	77bb      	strb	r3, [r7, #30]
 800dc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc5a:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800dc5e:	7fba      	ldrb	r2, [r7, #30]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d387      	bcc.n	800db74 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dc64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3724      	adds	r7, #36	@ 0x24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc70 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08c      	sub	sp, #48	@ 0x30
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	60b9      	str	r1, [r7, #8]
 800dc78:	607a      	str	r2, [r7, #4]
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dc80:	2300      	movs	r3, #0
 800dc82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dc86:	7bfa      	ldrb	r2, [r7, #15]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	4413      	add	r3, r2
 800dc98:	3304      	adds	r3, #4
 800dc9a:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	785a      	ldrb	r2, [r3, #1]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	781a      	ldrb	r2, [r3, #0]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	789a      	ldrb	r2, [r3, #2]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dcd2:	e04d      	b.n	800dd70 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	78da      	ldrb	r2, [r3, #3]
 800dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800dce0:	fb01 f202 	mul.w	r2, r1, r2
 800dce4:	1a9b      	subs	r3, r3, r2
 800dce6:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	7999      	ldrb	r1, [r3, #6]
 800dcec:	f107 0218 	add.w	r2, r7, #24
 800dcf0:	7ff8      	ldrb	r0, [r7, #31]
 800dcf2:	f107 0310 	add.w	r3, r7, #16
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	f107 0314 	add.w	r3, r7, #20
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	f000 fa76 	bl	800e1f2 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800dd06:	7ffb      	ldrb	r3, [r7, #31]
 800dd08:	69ba      	ldr	r2, [r7, #24]
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	440b      	add	r3, r1
 800dd10:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800dd12:	7ffb      	ldrb	r3, [r7, #31]
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	3318      	adds	r3, #24
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	440b      	add	r3, r1
 800dd1e:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800dd20:	7ffb      	ldrb	r3, [r7, #31]
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	3330      	adds	r3, #48	@ 0x30
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	440b      	add	r3, r1
 800dd2c:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800dd2e:	69ba      	ldr	r2, [r7, #24]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689a      	ldr	r2, [r3, #8]
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800dd3c:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800dd3e:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	3348      	adds	r3, #72	@ 0x48
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	440b      	add	r3, r1
 800dd48:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	689a      	ldr	r2, [r3, #8]
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800dd58:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800dd5a:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	3360      	adds	r3, #96	@ 0x60
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	440b      	add	r3, r1
 800dd64:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dd66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd70:	6a3b      	ldr	r3, [r7, #32]
 800dd72:	791b      	ldrb	r3, [r3, #4]
 800dd74:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d9ab      	bls.n	800dcd4 <VL53LX_f_026+0x64>
	}

	return status;
 800dd7c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3728      	adds	r7, #40	@ 0x28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800dd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd8a:	b08f      	sub	sp, #60	@ 0x3c
 800dd8c:	af06      	add	r7, sp, #24
 800dd8e:	60ba      	str	r2, [r7, #8]
 800dd90:	607b      	str	r3, [r7, #4]
 800dd92:	4603      	mov	r3, r0
 800dd94:	73fb      	strb	r3, [r7, #15]
 800dd96:	460b      	mov	r3, r1
 800dd98:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dda2:	7bfa      	ldrb	r2, [r7, #15]
 800dda4:	4613      	mov	r3, r2
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	4413      	add	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	77fb      	strb	r3, [r7, #31]
 800ddca:	e0b9      	b.n	800df40 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	78da      	ldrb	r2, [r3, #3]
 800ddd0:	7ffb      	ldrb	r3, [r7, #31]
 800ddd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddd6:	fb01 f202 	mul.w	r2, r1, r2
 800ddda:	1a9b      	subs	r3, r3, r2
 800dddc:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800ddde:	7ffb      	ldrb	r3, [r7, #31]
 800dde0:	3301      	adds	r3, #1
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	78d2      	ldrb	r2, [r2, #3]
 800dde6:	fb93 f1f2 	sdiv	r1, r3, r2
 800ddea:	fb01 f202 	mul.w	r2, r1, r2
 800ddee:	1a9b      	subs	r3, r3, r2
 800ddf0:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	789b      	ldrb	r3, [r3, #2]
 800ddf6:	7dfa      	ldrb	r2, [r7, #23]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f080 809e 	bcs.w	800df3a <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800de02:	7dba      	ldrb	r2, [r7, #22]
 800de04:	429a      	cmp	r2, r3
 800de06:	f080 8098 	bcs.w	800df3a <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	3348      	adds	r3, #72	@ 0x48
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10e      	bne.n	800de38 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	3360      	adds	r3, #96	@ 0x60
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	4413      	add	r3, r2
 800de30:	2200      	movs	r2, #0
 800de32:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800de36:	e043      	b.n	800dec0 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800de38:	7dfb      	ldrb	r3, [r7, #23]
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	3348      	adds	r3, #72	@ 0x48
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	db0e      	blt.n	800de66 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	3360      	adds	r3, #96	@ 0x60
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800de54:	2b00      	cmp	r3, #0
 800de56:	db06      	blt.n	800de66 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4413      	add	r3, r2
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800de64:	e02c      	b.n	800dec0 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800de66:	7dfb      	ldrb	r3, [r7, #23]
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	3348      	adds	r3, #72	@ 0x48
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4413      	add	r3, r2
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	da1e      	bge.n	800deb4 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	3360      	adds	r3, #96	@ 0x60
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800de82:	2b00      	cmp	r3, #0
 800de84:	db16      	blt.n	800deb4 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800de86:	7dbb      	ldrb	r3, [r7, #22]
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	3348      	adds	r3, #72	@ 0x48
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800de92:	2b00      	cmp	r3, #0
 800de94:	db0e      	blt.n	800deb4 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800de96:	7dbb      	ldrb	r3, [r7, #22]
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	3360      	adds	r3, #96	@ 0x60
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	da06      	bge.n	800deb4 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	4413      	add	r3, r2
 800deac:	2201      	movs	r2, #1
 800deae:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800deb2:	e005      	b.n	800dec0 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	4413      	add	r3, r2
 800deba:	2200      	movs	r2, #0
 800debc:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	4413      	add	r3, r2
 800dec6:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800deca:	2b00      	cmp	r3, #0
 800decc:	d035      	beq.n	800df3a <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	7ffa      	ldrb	r2, [r7, #31]
 800ded2:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800ded4:	7dfb      	ldrb	r3, [r7, #23]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	685c      	ldr	r4, [r3, #4]
 800dede:	7dfb      	ldrb	r3, [r7, #23]
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	3318      	adds	r3, #24
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4413      	add	r3, r2
 800dee8:	685d      	ldr	r5, [r3, #4]
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	3330      	adds	r3, #48	@ 0x30
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	685e      	ldr	r6, [r3, #4]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	78d2      	ldrb	r2, [r2, #3]
 800defe:	69b9      	ldr	r1, [r7, #24]
 800df00:	3118      	adds	r1, #24
 800df02:	7ff8      	ldrb	r0, [r7, #31]
 800df04:	9105      	str	r1, [sp, #20]
 800df06:	9204      	str	r2, [sp, #16]
 800df08:	9303      	str	r3, [sp, #12]
 800df0a:	2300      	movs	r3, #0
 800df0c:	9302      	str	r3, [sp, #8]
 800df0e:	2300      	movs	r3, #0
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	2300      	movs	r3, #0
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	4633      	mov	r3, r6
 800df18:	462a      	mov	r2, r5
 800df1a:	4621      	mov	r1, r4
 800df1c:	f000 f81c 	bl	800df58 <VL53LX_f_028>
 800df20:	4603      	mov	r3, r0
 800df22:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800df24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800df28:	f113 0f0f 	cmn.w	r3, #15
 800df2c:	d105      	bne.n	800df3a <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	4413      	add	r3, r2
 800df34:	2200      	movs	r2, #0
 800df36:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800df3a:	7ffb      	ldrb	r3, [r7, #31]
 800df3c:	3301      	adds	r3, #1
 800df3e:	77fb      	strb	r3, [r7, #31]
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	791b      	ldrb	r3, [r3, #4]
 800df44:	7ffa      	ldrb	r2, [r7, #31]
 800df46:	429a      	cmp	r2, r3
 800df48:	f4ff af40 	bcc.w	800ddcc <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800df4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3724      	adds	r7, #36	@ 0x24
 800df54:	46bd      	mov	sp, r7
 800df56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df58 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800df58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df5c:	b0b0      	sub	sp, #192	@ 0xc0
 800df5e:	af00      	add	r7, sp, #0
 800df60:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800df64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800df68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df6c:	4603      	mov	r3, r0
 800df6e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800df72:	23f1      	movs	r3, #241	@ 0xf1
 800df74:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800df78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df7c:	f04f 0300 	mov.w	r3, #0
 800df80:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800df84:	f04f 0200 	mov.w	r2, #0
 800df88:	f04f 0300 	mov.w	r3, #0
 800df8c:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	int64_t  half_b_minus_amb = 0;
 800df90:	f04f 0200 	mov.w	r2, #0
 800df94:	f04f 0300 	mov.w	r3, #0
 800df98:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dfa0:	17da      	asrs	r2, r3, #31
 800dfa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfa6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dfaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dfae:	17da      	asrs	r2, r3, #31
 800dfb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dfb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dfb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfb8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	ebb3 0802 	subs.w	r8, r3, r2
 800dfc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfc6:	460a      	mov	r2, r1
 800dfc8:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dfcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dfd0:	17da      	asrs	r2, r3, #31
 800dfd2:	673b      	str	r3, [r7, #112]	@ 0x70
 800dfd4:	677a      	str	r2, [r7, #116]	@ 0x74
 800dfd6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800dfda:	460b      	mov	r3, r1
 800dfdc:	ebb8 0a03 	subs.w	sl, r8, r3
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	eb69 0b03 	sbc.w	fp, r9, r3
 800dfe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfea:	17da      	asrs	r2, r3, #31
 800dfec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dff0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dff4:	460b      	mov	r3, r1
 800dff6:	ebba 0403 	subs.w	r4, sl, r3
 800dffa:	4613      	mov	r3, r2
 800dffc:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e000:	f04f 0200 	mov.w	r2, #0
 800e004:	f04f 0300 	mov.w	r3, #0
 800e008:	032b      	lsls	r3, r5, #12
 800e00a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e00e:	0322      	lsls	r2, r4, #12
 800e010:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e018:	17da      	asrs	r2, r3, #31
 800e01a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e01c:	667a      	str	r2, [r7, #100]	@ 0x64
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e022:	17da      	asrs	r2, r3, #31
 800e024:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e026:	65fa      	str	r2, [r7, #92]	@ 0x5c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e028:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e02c:	4623      	mov	r3, r4
 800e02e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800e032:	4602      	mov	r2, r0
 800e034:	1a9b      	subs	r3, r3, r2
 800e036:	653b      	str	r3, [r7, #80]	@ 0x50
 800e038:	462b      	mov	r3, r5
 800e03a:	460a      	mov	r2, r1
 800e03c:	eb63 0302 	sbc.w	r3, r3, r2
 800e040:	657b      	str	r3, [r7, #84]	@ 0x54
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e046:	17da      	asrs	r2, r3, #31
 800e048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e04a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e04c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800e050:	4623      	mov	r3, r4
 800e052:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800e056:	4602      	mov	r2, r0
 800e058:	1a9b      	subs	r3, r3, r2
 800e05a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e05c:	462b      	mov	r3, r5
 800e05e:	460a      	mov	r2, r1
 800e060:	eb63 0302 	sbc.w	r3, r3, r2
 800e064:	647b      	str	r3, [r7, #68]	@ 0x44
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e066:	f04f 0200 	mov.w	r2, #0
 800e06a:	f04f 0300 	mov.w	r3, #0
 800e06e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e072:	4629      	mov	r1, r5
 800e074:	030b      	lsls	r3, r1, #12
 800e076:	4621      	mov	r1, r4
 800e078:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e07c:	4621      	mov	r1, r4
 800e07e:	030a      	lsls	r2, r1, #12
 800e080:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

	if (half_b_minus_amb != 0) {
 800e084:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e088:	4313      	orrs	r3, r2
 800e08a:	f000 80a6 	beq.w	800e1da <VL53LX_f_028+0x282>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800e08e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e092:	f04f 0000 	mov.w	r0, #0
 800e096:	f04f 0100 	mov.w	r1, #0
 800e09a:	0319      	lsls	r1, r3, #12
 800e09c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e0a0:	0310      	lsls	r0, r2, #12
 800e0a2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e0a6:	1814      	adds	r4, r2, r0
 800e0a8:	62bc      	str	r4, [r7, #40]	@ 0x28
 800e0aa:	414b      	adcs	r3, r1
 800e0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0ae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800e0b2:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e0b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e0ba:	1891      	adds	r1, r2, r2
 800e0bc:	6239      	str	r1, [r7, #32]
 800e0be:	415b      	adcs	r3, r3
 800e0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e0c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e0ca:	f7f2 fd8d 	bl	8000be8 <__aeabi_ldivmod>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

		mean_phase  +=  2048;
 800e0d6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e0da:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800e0de:	61b9      	str	r1, [r7, #24]
 800e0e0:	f143 0300 	adc.w	r3, r3, #0
 800e0e4:	61fb      	str	r3, [r7, #28]
 800e0e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e0ea:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0
		mean_phase  += (4096 * (int64_t)bin);
 800e0ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e0f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e0f8:	f04f 0200 	mov.w	r2, #0
 800e0fc:	f04f 0300 	mov.w	r3, #0
 800e100:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800e104:	4629      	mov	r1, r5
 800e106:	030b      	lsls	r3, r1, #12
 800e108:	4621      	mov	r1, r4
 800e10a:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e10e:	4621      	mov	r1, r4
 800e110:	030a      	lsls	r2, r1, #12
 800e112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e116:	1884      	adds	r4, r0, r2
 800e118:	613c      	str	r4, [r7, #16]
 800e11a:	eb41 0303 	adc.w	r3, r1, r3
 800e11e:	617b      	str	r3, [r7, #20]
 800e120:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e124:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e128:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e12c:	1c51      	adds	r1, r2, #1
 800e12e:	6339      	str	r1, [r7, #48]	@ 0x30
 800e130:	f143 0300 	adc.w	r3, r3, #0
 800e134:	637b      	str	r3, [r7, #52]	@ 0x34
 800e136:	f04f 0200 	mov.w	r2, #0
 800e13a:	f04f 0300 	mov.w	r3, #0
 800e13e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e142:	4629      	mov	r1, r5
 800e144:	0fca      	lsrs	r2, r1, #31
 800e146:	2300      	movs	r3, #0
 800e148:	4621      	mov	r1, r4
 800e14a:	1851      	adds	r1, r2, r1
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	4629      	mov	r1, r5
 800e150:	eb43 0101 	adc.w	r1, r3, r1
 800e154:	60f9      	str	r1, [r7, #12]
 800e156:	f04f 0200 	mov.w	r2, #0
 800e15a:	f04f 0300 	mov.w	r3, #0
 800e15e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e162:	4621      	mov	r1, r4
 800e164:	084a      	lsrs	r2, r1, #1
 800e166:	4629      	mov	r1, r5
 800e168:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e16c:	4629      	mov	r1, r5
 800e16e:	104b      	asrs	r3, r1, #1
 800e170:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0


		if (mean_phase  < 0)
 800e174:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	da05      	bge.n	800e188 <VL53LX_f_028+0x230>
			mean_phase = 0;
 800e17c:	f04f 0200 	mov.w	r2, #0
 800e180:	f04f 0300 	mov.w	r3, #0
 800e184:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e188:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e18c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e190:	f173 0300 	sbcs.w	r3, r3, #0
 800e194:	db05      	blt.n	800e1a2 <VL53LX_f_028+0x24a>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e19a:	f04f 0300 	mov.w	r3, #0
 800e19e:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0


		mean_phase32 = (int32_t)mean_phase;
 800e1a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e1a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e1aa:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
 800e1ae:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e1b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1b4:	fb93 f1f2 	sdiv	r1, r3, r2
 800e1b8:	fb01 f202 	mul.w	r2, r1, r2
 800e1bc:	1a9b      	subs	r3, r3, r2
 800e1be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		mean_phase = mean_phase32;
 800e1c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1c6:	17da      	asrs	r2, r3, #31
 800e1c8:	603b      	str	r3, [r7, #0]
 800e1ca:	607a      	str	r2, [r7, #4]
 800e1cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e1d0:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0

		status = VL53LX_ERROR_NONE;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e1da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1e2:	601a      	str	r2, [r3, #0]

	return status;
 800e1e4:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	37c0      	adds	r7, #192	@ 0xc0
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e1f2 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b087      	sub	sp, #28
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	60ba      	str	r2, [r7, #8]
 800e1fa:	607b      	str	r3, [r7, #4]
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]
 800e200:	460b      	mov	r3, r1
 800e202:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e212:	7bfa      	ldrb	r2, [r7, #15]
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	3206      	adds	r2, #6
 800e218:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e226:	2300      	movs	r3, #0
 800e228:	75fb      	strb	r3, [r7, #23]
 800e22a:	e02f      	b.n	800e28c <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e22c:	7bfa      	ldrb	r2, [r7, #15]
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
 800e230:	4413      	add	r3, r2
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	7a92      	ldrb	r2, [r2, #10]
 800e236:	441a      	add	r2, r3
 800e238:	7bbb      	ldrb	r3, [r7, #14]
 800e23a:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	7a92      	ldrb	r2, [r2, #10]
 800e240:	fb93 f1f2 	sdiv	r1, r3, r2
 800e244:	fb01 f202 	mul.w	r2, r1, r2
 800e248:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e24a:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e24c:	7dfa      	ldrb	r2, [r7, #23]
 800e24e:	7bbb      	ldrb	r3, [r7, #14]
 800e250:	429a      	cmp	r2, r3
 800e252:	d20a      	bcs.n	800e26a <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	7db9      	ldrb	r1, [r7, #22]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	3106      	adds	r1, #6
 800e25e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e262:	441a      	add	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	e00d      	b.n	800e286 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e26a:	7dfa      	ldrb	r2, [r7, #23]
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d909      	bls.n	800e286 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	7db9      	ldrb	r1, [r7, #22]
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	3106      	adds	r1, #6
 800e27c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e280:	441a      	add	r2, r3
 800e282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e284:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e286:	7dfb      	ldrb	r3, [r7, #23]
 800e288:	3301      	adds	r3, #1
 800e28a:	75fb      	strb	r3, [r7, #23]
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	005a      	lsls	r2, r3, #1
 800e290:	7dfb      	ldrb	r3, [r7, #23]
 800e292:	429a      	cmp	r2, r3
 800e294:	daca      	bge.n	800e22c <VL53LX_f_022+0x3a>
	}
}
 800e296:	bf00      	nop
 800e298:	bf00      	nop
 800e29a:	371c      	adds	r7, #28
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b088      	sub	sp, #32
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60ba      	str	r2, [r7, #8]
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	81fb      	strh	r3, [r7, #14]
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	81bb      	strh	r3, [r7, #12]
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	89fa      	ldrh	r2, [r7, #14]
 800e2ce:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d2:	89ba      	ldrh	r2, [r7, #12]
 800e2d4:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	88fa      	ldrh	r2, [r7, #6]
 800e2e0:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e4:	8a5b      	ldrh	r3, [r3, #18]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e2ea:	23f1      	movs	r3, #241	@ 0xf1
 800e2ec:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e2f6:	23f1      	movs	r3, #241	@ 0xf1
 800e2f8:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e2fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d16f      	bne.n	800e3e2 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e304:	8a5b      	ldrh	r3, [r3, #18]
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd f90e 	bl	800b528 <VL53LX_calc_pll_period_us>
 800e30c:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e310:	699b      	ldr	r3, [r3, #24]
 800e312:	3301      	adds	r3, #1
 800e314:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e31a:	4619      	mov	r1, r3
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e322:	6978      	ldr	r0, [r7, #20]
 800e324:	f7fd f917 	bl	800b556 <VL53LX_duration_maths>
 800e328:	4602      	mov	r2, r0
 800e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32c:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e330:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e332:	0119      	lsls	r1, r3, #4
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e33a:	6978      	ldr	r0, [r7, #20]
 800e33c:	f7fd f90b 	bl	800b556 <VL53LX_duration_maths>
 800e340:	4602      	mov	r2, r0
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	4619      	mov	r1, r3
 800e350:	4610      	mov	r0, r2
 800e352:	f7fd fb78 	bl	800ba46 <VL53LX_rate_maths>
 800e356:	4603      	mov	r3, r0
 800e358:	461a      	mov	r2, r3
 800e35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35c:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e364:	6a1b      	ldr	r3, [r3, #32]
 800e366:	4619      	mov	r1, r3
 800e368:	4610      	mov	r0, r2
 800e36a:	f7fd fb6c 	bl	800ba46 <VL53LX_rate_maths>
 800e36e:	4603      	mov	r3, r0
 800e370:	461a      	mov	r2, r3
 800e372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e374:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e37a:	461a      	mov	r2, r3
 800e37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37e:	6a1b      	ldr	r3, [r3, #32]
 800e380:	4619      	mov	r1, r3
 800e382:	4610      	mov	r0, r2
 800e384:	f7fd fb5f 	bl	800ba46 <VL53LX_rate_maths>
 800e388:	4603      	mov	r3, r0
 800e38a:	461a      	mov	r2, r3
 800e38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38e:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e392:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800e394:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e398:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800e39a:	4413      	add	r3, r2
 800e39c:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e39e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d905      	bls.n	800e3b2 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e3a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b0:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b4:	8ada      	ldrh	r2, [r3, #22]
 800e3b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e3ba:	69b9      	ldr	r1, [r7, #24]
 800e3bc:	2006      	movs	r0, #6
 800e3be:	f7fd fb87 	bl	800bad0 <VL53LX_rate_per_spad_maths>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c8:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3cc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d0:	8ad9      	ldrh	r1, [r3, #22]
 800e3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d4:	69db      	ldr	r3, [r3, #28]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f7fd f916 	bl	800b608 <VL53LX_events_per_spad_maths>
 800e3dc:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e0:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e3e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3720      	adds	r7, #32
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e3ee:	b590      	push	{r4, r7, lr}
 800e3f0:	b085      	sub	sp, #20
 800e3f2:	af02      	add	r7, sp, #8
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	603a      	str	r2, [r7, #0]
 800e3f8:	80fb      	strh	r3, [r7, #6]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	8a58      	ldrh	r0, [r3, #18]
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	8a9c      	ldrh	r4, [r3, #20]
 800e40a:	88fb      	ldrh	r3, [r7, #6]
 800e40c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e410:	9201      	str	r2, [sp, #4]
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	2300      	movs	r3, #0
 800e416:	4622      	mov	r2, r4
 800e418:	f7fd fb8e 	bl	800bb38 <VL53LX_range_maths>
 800e41c:	4603      	mov	r3, r0
 800e41e:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	8a58      	ldrh	r0, [r3, #18]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	8a9c      	ldrh	r4, [r3, #20]
 800e434:	88fb      	ldrh	r3, [r7, #6]
 800e436:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e43a:	9201      	str	r2, [sp, #4]
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	4622      	mov	r2, r4
 800e442:	f7fd fb79 	bl	800bb38 <VL53LX_range_maths>
 800e446:	4603      	mov	r3, r0
 800e448:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	8a58      	ldrh	r0, [r3, #18]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	8a9c      	ldrh	r4, [r3, #20]
 800e45e:	88fb      	ldrh	r3, [r7, #6]
 800e460:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e464:	9201      	str	r2, [sp, #4]
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	2300      	movs	r3, #0
 800e46a:	4622      	mov	r2, r4
 800e46c:	f7fd fb64 	bl	800bb38 <VL53LX_range_maths>
 800e470:	4603      	mov	r3, r0
 800e472:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800e47a:	bf00      	nop
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd90      	pop	{r4, r7, pc}

0800e482 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b086      	sub	sp, #24
 800e486:	af00      	add	r7, sp, #0
 800e488:	60f8      	str	r0, [r7, #12]
 800e48a:	60b9      	str	r1, [r7, #8]
 800e48c:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e48e:	2300      	movs	r3, #0
 800e490:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e49e:	22ac      	movs	r2, #172	@ 0xac
 800e4a0:	68b9      	ldr	r1, [r7, #8]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f007 fabb 	bl	8015a1e <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	75fb      	strb	r3, [r7, #23]
 800e4ac:	e008      	b.n	800e4c0 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e4ae:	7dfa      	ldrb	r2, [r7, #23]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3206      	adds	r2, #6
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	75fb      	strb	r3, [r7, #23]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7a5b      	ldrb	r3, [r3, #9]
 800e4c4:	7dfa      	ldrb	r2, [r7, #23]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d3f1      	bcc.n	800e4ae <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e4ca:	68f9      	ldr	r1, [r7, #12]
 800e4cc:	68b8      	ldr	r0, [r7, #8]
 800e4ce:	f000 f878 	bl	800e5c2 <VL53LX_f_030>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	7a9a      	ldrb	r2, [r3, #10]
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	7a9b      	ldrb	r3, [r3, #10]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d203      	bcs.n	800e4ea <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	7a9b      	ldrb	r3, [r3, #10]
 800e4e6:	75bb      	strb	r3, [r7, #22]
 800e4e8:	e002      	b.n	800e4f0 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	7a9b      	ldrb	r3, [r3, #10]
 800e4ee:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	75fb      	strb	r3, [r7, #23]
 800e4f4:	e05c      	b.n	800e5b0 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e4f6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	db0f      	blt.n	800e51e <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e4fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e502:	461a      	mov	r2, r3
 800e504:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e508:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	7a92      	ldrb	r2, [r2, #10]
 800e50e:	b252      	sxtb	r2, r2
 800e510:	fb93 f1f2 	sdiv	r1, r3, r2
 800e514:	fb01 f202 	mul.w	r2, r1, r2
 800e518:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e51a:	757b      	strb	r3, [r7, #21]
 800e51c:	e013      	b.n	800e546 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	7a9b      	ldrb	r3, [r3, #10]
 800e522:	b25b      	sxtb	r3, r3
 800e524:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e52a:	4619      	mov	r1, r3
 800e52c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e530:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e532:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	7a92      	ldrb	r2, [r2, #10]
 800e538:	b252      	sxtb	r2, r2
 800e53a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e53e:	fb01 f202 	mul.w	r2, r1, r2
 800e542:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e544:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e546:	7d7b      	ldrb	r3, [r7, #21]
 800e548:	461a      	mov	r2, r3
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	3206      	adds	r2, #6
 800e54e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e552:	7df9      	ldrb	r1, [r7, #23]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	3106      	adds	r1, #6
 800e558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e55c:	429a      	cmp	r2, r3
 800e55e:	dd12      	ble.n	800e586 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e560:	7d7b      	ldrb	r3, [r7, #21]
 800e562:	461a      	mov	r2, r3
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	3206      	adds	r2, #6
 800e568:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e56c:	7df9      	ldrb	r1, [r7, #23]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	3106      	adds	r1, #6
 800e572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e576:	7d79      	ldrb	r1, [r7, #21]
 800e578:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e57a:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	1d82      	adds	r2, r0, #6
 800e580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e584:	e006      	b.n	800e594 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e586:	7d7b      	ldrb	r3, [r7, #21]
 800e588:	461a      	mov	r2, r3
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	3206      	adds	r2, #6
 800e58e:	2100      	movs	r1, #0
 800e590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e594:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e596:	7d7b      	ldrb	r3, [r7, #21]
 800e598:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	3206      	adds	r2, #6
 800e59e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	1d82      	adds	r2, r0, #6
 800e5a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	75fb      	strb	r3, [r7, #23]
 800e5b0:	7dfa      	ldrb	r2, [r7, #23]
 800e5b2:	7dbb      	ldrb	r3, [r7, #22]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d39e      	bcc.n	800e4f6 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e5b8:	bf00      	nop
 800e5ba:	bf00      	nop
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b086      	sub	sp, #24
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fd fb90 	bl	800bd08 <VL53LX_decode_vcsel_period>
 800e5e8:	4603      	mov	r3, r0
	period = 2048 *
 800e5ea:	02db      	lsls	r3, r3, #11
 800e5ec:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800e600:	68b9      	ldr	r1, [r7, #8]
 800e602:	fb01 f202 	mul.w	r2, r1, r2
 800e606:	1a9b      	subs	r3, r3, r2
 800e608:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800e610:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e612:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dd09      	ble.n	800e632 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e624:	2b00      	cmp	r3, #0
 800e626:	da01      	bge.n	800e62c <VL53LX_f_030+0x6a>
 800e628:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e62c:	12db      	asrs	r3, r3, #11
 800e62e:	75fb      	strb	r3, [r7, #23]
 800e630:	e008      	b.n	800e644 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800e638:	2b00      	cmp	r3, #0
 800e63a:	da01      	bge.n	800e640 <VL53LX_f_030+0x7e>
 800e63c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800e640:	12db      	asrs	r3, r3, #11
 800e642:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08e      	sub	sp, #56	@ 0x38
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e65a:	2300      	movs	r3, #0
 800e65c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e682:	22ac      	movs	r2, #172	@ 0xac
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	6838      	ldr	r0, [r7, #0]
 800e688:	f007 f9c9 	bl	8015a1e <memcpy>


	podata->VL53LX_p_021 = 0;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e692:	2300      	movs	r3, #0
 800e694:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e698:	e00a      	b.n	800e6b0 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e69a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e69e:	683a      	ldr	r2, [r7, #0]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	2210      	movs	r2, #16
 800e6a4:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e6a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e6b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e6b4:	2b05      	cmp	r3, #5
 800e6b6:	d9f0      	bls.n	800e69a <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e6be:	e00b      	b.n	800e6d8 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e6c0:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	3206      	adds	r2, #6
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e6ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	7a5b      	ldrb	r3, [r3, #9]
 800e6dc:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d3ed      	bcc.n	800e6c0 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e6ea:	e012      	b.n	800e712 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800e6ec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e6f0:	3338      	adds	r3, #56	@ 0x38
 800e6f2:	443b      	add	r3, r7
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e6fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e6fe:	3338      	adds	r3, #56	@ 0x38
 800e700:	443b      	add	r3, r7
 800e702:	2200      	movs	r2, #0
 800e704:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e708:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e70c:	3301      	adds	r3, #1
 800e70e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e712:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e716:	2b0f      	cmp	r3, #15
 800e718:	d9e8      	bls.n	800e6ec <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e71a:	2300      	movs	r3, #0
 800e71c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e720:	2300      	movs	r3, #0
 800e722:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e726:	e068      	b.n	800e7fa <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800e728:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4413      	add	r3, r2
 800e730:	7b1b      	ldrb	r3, [r3, #12]
 800e732:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e736:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e73a:	3338      	adds	r3, #56	@ 0x38
 800e73c:	443b      	add	r3, r7
 800e73e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d115      	bne.n	800e772 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e746:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e74a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800e74e:	0092      	lsls	r2, r2, #2
 800e750:	b2d2      	uxtb	r2, r2
 800e752:	3338      	adds	r3, #56	@ 0x38
 800e754:	443b      	add	r3, r7
 800e756:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e75a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e75e:	683a      	ldr	r2, [r7, #0]
 800e760:	4413      	add	r3, r2
 800e762:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800e766:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e76c:	3301      	adds	r3, #1
 800e76e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e772:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e776:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e77a:	443a      	add	r2, r7
 800e77c:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e780:	3201      	adds	r2, #1
 800e782:	b2d2      	uxtb	r2, r2
 800e784:	3338      	adds	r3, #56	@ 0x38
 800e786:	443b      	add	r3, r7
 800e788:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e78c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e790:	3338      	adds	r3, #56	@ 0x38
 800e792:	443b      	add	r3, r7
 800e794:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e79c:	2300      	movs	r3, #0
 800e79e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e7a2:	e021      	b.n	800e7e8 <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800e7a4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e7a8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e7ac:	441a      	add	r2, r3
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	3206      	adds	r2, #6
 800e7b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e7b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7ba:	009a      	lsls	r2, r3, #2
 800e7bc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e7c0:	441a      	add	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	3206      	adds	r2, #6
 800e7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e7ca:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800e7ce:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800e7d2:	4402      	add	r2, r0
 800e7d4:	4419      	add	r1, r3
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	3206      	adds	r2, #6
 800e7da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e7de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e7e8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	d9d9      	bls.n	800e7a4 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e7f0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e7fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e7fe:	2b05      	cmp	r3, #5
 800e800:	d992      	bls.n	800e728 <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e802:	2300      	movs	r3, #0
 800e804:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e808:	e022      	b.n	800e850 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800e80a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	4413      	add	r3, r2
 800e812:	7b1b      	ldrb	r3, [r3, #12]
 800e814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e81c:	2b0f      	cmp	r3, #15
 800e81e:	d80c      	bhi.n	800e83a <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e820:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800e824:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800e828:	3238      	adds	r2, #56	@ 0x38
 800e82a:	443a      	add	r2, r7
 800e82c:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	4413      	add	r3, r2
 800e834:	460a      	mov	r2, r1
 800e836:	749a      	strb	r2, [r3, #18]
 800e838:	e005      	b.n	800e846 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800e83a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	4413      	add	r3, r2
 800e842:	2200      	movs	r2, #0
 800e844:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e846:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e84a:	3301      	adds	r3, #1
 800e84c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e850:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e854:	2b05      	cmp	r3, #5
 800e856:	d9d8      	bls.n	800e80a <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e858:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e864:	2300      	movs	r3, #0
 800e866:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e86a:	e050      	b.n	800e90e <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e86c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e870:	3338      	adds	r3, #56	@ 0x38
 800e872:	443b      	add	r3, r7
 800e874:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e878:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800e87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	dd41      	ble.n	800e904 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800e880:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e884:	3338      	adds	r3, #56	@ 0x38
 800e886:	443b      	add	r3, r7
 800e888:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e88c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e890:	2300      	movs	r3, #0
 800e892:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e896:	e031      	b.n	800e8fc <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800e898:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e89c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8a0:	441a      	add	r2, r3
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	3206      	adds	r2, #6
 800e8a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ac:	0fda      	lsrs	r2, r3, #31
 800e8ae:	4413      	add	r3, r2
 800e8b0:	105b      	asrs	r3, r3, #1
 800e8b2:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e8b4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e8b8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8bc:	441a      	add	r2, r3
 800e8be:	4401      	add	r1, r0
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	3206      	adds	r2, #6
 800e8c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e8c8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e8cc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8d0:	441a      	add	r2, r3
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	3206      	adds	r2, #6
 800e8d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8da:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800e8de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8e2:	441a      	add	r2, r3
 800e8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e6:	fb91 f1f3 	sdiv	r1, r1, r3
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	3206      	adds	r2, #6
 800e8ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e8f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800e8fc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e900:	2b03      	cmp	r3, #3
 800e902:	d9c9      	bls.n	800e898 <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e904:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e908:	3301      	adds	r3, #1
 800e90a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800e90e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e912:	2b0f      	cmp	r3, #15
 800e914:	d9aa      	bls.n	800e86c <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2200      	movs	r2, #0
 800e91a:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d102      	bne.n	800e928 <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800e922:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	2204      	movs	r2, #4
 800e92c:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e92e:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800e932:	4618      	mov	r0, r3
 800e934:	3738      	adds	r7, #56	@ 0x38
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e93a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93c:	b0cb      	sub	sp, #300	@ 0x12c
 800e93e:	af06      	add	r7, sp, #24
 800e940:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800e944:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800e948:	6020      	str	r0, [r4, #0]
 800e94a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800e94e:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800e952:	6001      	str	r1, [r0, #0]
 800e954:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800e958:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800e95c:	600a      	str	r2, [r1, #0]
 800e95e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800e962:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800e966:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e968:	2300      	movs	r3, #0
 800e96a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e96e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e972:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e976:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e97a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e97e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800e982:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e986:	f107 0318 	add.w	r3, r7, #24
 800e98a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e9b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800e9be:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e9c2:	6818      	ldr	r0, [r3, #0]
 800e9c4:	f7ff fe44 	bl	800e650 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e9c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9cc:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9d4:	3348      	adds	r3, #72	@ 0x48
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	2000      	movs	r0, #0
 800e9da:	f7fd f9e6 	bl	800bdaa <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e9de:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e9e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9e6:	3348      	adds	r3, #72	@ 0x48
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f7fd f99f 	bl	800bd2e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e9f0:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d142      	bne.n	800ea7e <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e9f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d039      	beq.n	800ea7e <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800ea0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800ea16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800ea24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800ea32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea36:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800ea40:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ea44:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800ea48:	6812      	ldr	r2, [r2, #0]
 800ea4a:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 800ea4e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800ea52:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800ea56:	6809      	ldr	r1, [r1, #0]
 800ea58:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 800ea5c:	f107 0014 	add.w	r0, r7, #20
 800ea60:	9004      	str	r0, [sp, #16]
 800ea62:	9103      	str	r1, [sp, #12]
 800ea64:	9202      	str	r2, [sp, #8]
 800ea66:	9301      	str	r3, [sp, #4]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	4632      	mov	r2, r6
 800ea70:	4629      	mov	r1, r5
 800ea72:	4620      	mov	r0, r4
 800ea74:	f002 f988 	bl	8010d88 <VL53LX_f_032>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800ea7e:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d115      	bne.n	800eab2 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800ea86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00c      	beq.n	800eab2 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800ea98:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaa2:	3348      	adds	r3, #72	@ 0x48
 800eaa4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800eaa8:	f002 fbd0 	bl	801124c <VL53LX_f_033>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800eab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eab6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 800eaba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eabe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800eac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eac6:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800eaca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eace:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800ead2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ead6:	2200      	movs	r2, #0
 800ead8:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800eadc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eae0:	2200      	movs	r2, #0
 800eae2:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800eae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800eaf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800eb00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800eb12:	2301      	movs	r3, #1
 800eb14:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800eb1e:	e108      	b.n	800ed32 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800eb20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800eb2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 800eb32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb36:	3348      	adds	r3, #72	@ 0x48
 800eb38:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800eb3c:	7814      	ldrb	r4, [r2, #0]
 800eb3e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800eb42:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800eb46:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800eb4a:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800eb4e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800eb52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800eb56:	9405      	str	r4, [sp, #20]
 800eb58:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 800eb5c:	9404      	str	r4, [sp, #16]
 800eb5e:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800eb62:	9403      	str	r4, [sp, #12]
 800eb64:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 800eb68:	9402      	str	r4, [sp, #8]
 800eb6a:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 800eb6e:	9401      	str	r4, [sp, #4]
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb76:	6812      	ldr	r2, [r2, #0]
 800eb78:	6809      	ldr	r1, [r1, #0]
 800eb7a:	6800      	ldr	r0, [r0, #0]
 800eb7c:	f7fe fe69 	bl	800d852 <VL53LX_f_025>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800eb86:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f040 80cb 	bne.w	800ed26 <VL53LX_hist_process_data+0x3ec>
 800eb90:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f040 80c6 	bne.w	800ed26 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800eb9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb9e:	7c9b      	ldrb	r3, [r3, #18]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d110      	bne.n	800ebc6 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800eba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eba8:	3314      	adds	r3, #20
 800ebaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800ebae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ebb2:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800ebb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebb8:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800ebba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ebbe:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800ebc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebc4:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800ebc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800ebd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800ebd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebe2:	fb02 f303 	mul.w	r3, r2, r3
 800ebe6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800ebea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebee:	011b      	lsls	r3, r3, #4
 800ebf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ebfa:	e08b      	b.n	800ed14 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800ebfc:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800ec00:	224c      	movs	r2, #76	@ 0x4c
 800ec02:	fb02 f303 	mul.w	r3, r2, r3
 800ec06:	3310      	adds	r3, #16
 800ec08:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800ec0c:	4413      	add	r3, r2
 800ec0e:	3304      	adds	r3, #4
 800ec10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800ec14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec18:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800ec1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec20:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ec24:	429a      	cmp	r2, r3
 800ec26:	dd0e      	ble.n	800ec46 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800ec28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec2c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ec30:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800ec32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec36:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ec3a:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	b29b      	uxth	r3, r3
				delta_mm =
 800ec40:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800ec44:	e00d      	b.n	800ec62 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800ec46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec4a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ec4e:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800ec50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec54:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800ec58:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	b29b      	uxth	r3, r3
				delta_mm =
 800ec5e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800ec62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 800ec6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800ec72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec7e:	fb02 f303 	mul.w	r3, r2, r3
 800ec82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 800ec86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec8a:	015b      	lsls	r3, r3, #5
 800ec8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 800ec90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec94:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ec98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800eca6:	429a      	cmp	r2, r3
 800eca8:	dd2f      	ble.n	800ed0a <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800ecaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecae:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ecb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ecb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	da22      	bge.n	800ed0a <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800ecc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ecca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d91b      	bls.n	800ed0a <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ecd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecd6:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800ecd8:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800ecda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d913      	bls.n	800ed0a <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800ece2:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800ece6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ecea:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800ecee:	6812      	ldr	r2, [r2, #0]
 800ecf0:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	da09      	bge.n	800ed0a <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800ecf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ecfa:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 800ecfe:	224c      	movs	r2, #76	@ 0x4c
 800ed00:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800ed04:	4618      	mov	r0, r3
 800ed06:	f006 fe8a 	bl	8015a1e <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800ed0a:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800ed0e:	3301      	adds	r3, #1
 800ed10:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800ed14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed18:	7c9b      	ldrb	r3, [r3, #18]
 800ed1a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	f4ff af6c 	bcc.w	800ebfc <VL53LX_hist_process_data+0x2c2>
 800ed24:	e000      	b.n	800ed28 <VL53LX_hist_process_data+0x3ee>
			continue;
 800ed26:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ed28:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800ed32:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800ed36:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	f67f aef0 	bls.w	800eb20 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800ed40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800ed4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ed52:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed60 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ed72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d104      	bne.n	800ed84 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7f9 fbc9 	bl	8008512 <VL53LX_disable_firmware>
 800ed80:	4603      	mov	r3, r0
 800ed82:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ed84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d104      	bne.n	800ed96 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f7f9 fbf1 	bl	8008574 <VL53LX_enable_powerforce>
 800ed92:	4603      	mov	r3, r0
 800ed94:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ed96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d105      	bne.n	800edaa <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ed9e:	21fa      	movs	r1, #250	@ 0xfa
 800eda0:	68f8      	ldr	r0, [r7, #12]
 800eda2:	f002 fcc3 	bl	801172c <VL53LX_WaitUs>
 800eda6:	4603      	mov	r3, r0
 800eda8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800edaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d107      	bne.n	800edc2 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800edb2:	2201      	movs	r2, #1
 800edb4:	f240 7181 	movw	r1, #1921	@ 0x781
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f002 fbc5 	bl	8011548 <VL53LX_WrByte>
 800edbe:	4603      	mov	r3, r0
 800edc0:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800edc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d107      	bne.n	800edda <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800edca:	2205      	movs	r2, #5
 800edcc:	f240 6183 	movw	r1, #1667	@ 0x683
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f002 fbb9 	bl	8011548 <VL53LX_WrByte>
 800edd6:	4603      	mov	r3, r0
 800edd8:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800edda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d105      	bne.n	800edee <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800ede2:	6879      	ldr	r1, [r7, #4]
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f002 fca1 	bl	801172c <VL53LX_WaitUs>
 800edea:	4603      	mov	r3, r0
 800edec:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800edee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d107      	bne.n	800ee06 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800edf6:	2201      	movs	r2, #1
 800edf8:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f002 fba3 	bl	8011548 <VL53LX_WrByte>
 800ee02:	4603      	mov	r3, r0
 800ee04:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800ee06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d108      	bne.n	800ee20 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800ee0e:	897b      	ldrh	r3, [r7, #10]
 800ee10:	461a      	mov	r2, r3
 800ee12:	f240 7184 	movw	r1, #1924	@ 0x784
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f002 fbc0 	bl	801159c <VL53LX_WrWord>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800ee20:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	607b      	str	r3, [r7, #4]
 800ee36:	460b      	mov	r3, r1
 800ee38:	72fb      	strb	r3, [r7, #11]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800ee46:	7afb      	ldrb	r3, [r7, #11]
 800ee48:	75bb      	strb	r3, [r7, #22]
 800ee4a:	e041      	b.n	800eed0 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800ee4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d108      	bne.n	800ee66 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800ee54:	7dbb      	ldrb	r3, [r7, #22]
 800ee56:	461a      	mov	r2, r3
 800ee58:	f240 7194 	movw	r1, #1940	@ 0x794
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f002 fb73 	bl	8011548 <VL53LX_WrByte>
 800ee62:	4603      	mov	r3, r0
 800ee64:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800ee66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d107      	bne.n	800ee7e <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f240 7183 	movw	r1, #1923	@ 0x783
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f002 fb67 	bl	8011548 <VL53LX_WrByte>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800ee7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d105      	bne.n	800ee92 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800ee86:	2105      	movs	r1, #5
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f002 fc4f 	bl	801172c <VL53LX_WaitUs>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800ee92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d107      	bne.n	800eeaa <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f240 7183 	movw	r1, #1923	@ 0x783
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f002 fb51 	bl	8011548 <VL53LX_WrByte>
 800eea6:	4603      	mov	r3, r0
 800eea8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800eeaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d108      	bne.n	800eec4 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800eeb2:	2304      	movs	r3, #4
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f002 fb0e 	bl	80114dc <VL53LX_ReadMulti>
 800eec0:	4603      	mov	r3, r0
 800eec2:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	3304      	adds	r3, #4
 800eec8:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800eeca:	7dbb      	ldrb	r3, [r7, #22]
 800eecc:	3301      	adds	r3, #1
 800eece:	75bb      	strb	r3, [r7, #22]
 800eed0:	7dba      	ldrb	r2, [r7, #22]
 800eed2:	7af9      	ldrb	r1, [r7, #11]
 800eed4:	7abb      	ldrb	r3, [r7, #10]
 800eed6:	440b      	add	r3, r1
 800eed8:	429a      	cmp	r2, r3
 800eeda:	dbb7      	blt.n	800ee4c <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800eedc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3718      	adds	r7, #24
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800eef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d107      	bne.n	800ef0c <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800eefc:	2201      	movs	r2, #1
 800eefe:	f240 7183 	movw	r1, #1923	@ 0x783
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f002 fb20 	bl	8011548 <VL53LX_WrByte>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ef0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d107      	bne.n	800ef24 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800ef14:	2200      	movs	r2, #0
 800ef16:	f240 7181 	movw	r1, #1921	@ 0x781
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f002 fb14 	bl	8011548 <VL53LX_WrByte>
 800ef20:	4603      	mov	r3, r0
 800ef22:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ef24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d104      	bne.n	800ef36 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7f9 fb33 	bl	8008598 <VL53LX_disable_powerforce>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800ef36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d104      	bne.n	800ef48 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7f9 fad5 	bl	80084ee <VL53LX_enable_firmware>
 800ef44:	4603      	mov	r3, r0
 800ef46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800ef48:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b087      	sub	sp, #28
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef62:	2300      	movs	r3, #0
 800ef64:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800ef6a:	89fb      	ldrh	r3, [r7, #14]
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d802      	bhi.n	800ef76 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ef70:	f06f 0308 	mvn.w	r3, #8
 800ef74:	e017      	b.n	800efa6 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 800ef76:	23f0      	movs	r3, #240	@ 0xf0
 800ef78:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	3302      	adds	r3, #2
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	461a      	mov	r2, r3
 800ef82:	8afb      	ldrh	r3, [r7, #22]
 800ef84:	1a9b      	subs	r3, r3, r2
 800ef86:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800ef88:	8afb      	ldrh	r3, [r7, #22]
 800ef8a:	2bff      	cmp	r3, #255	@ 0xff
 800ef8c:	d901      	bls.n	800ef92 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800ef92:	8afb      	ldrh	r3, [r7, #22]
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	78da      	ldrb	r2, [r3, #3]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	705a      	strb	r2, [r3, #1]

	return status;
 800efa2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	371c      	adds	r7, #28
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800efb2:	b590      	push	{r4, r7, lr}
 800efb4:	b087      	sub	sp, #28
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	4603      	mov	r3, r0
 800efba:	60b9      	str	r1, [r7, #8]
 800efbc:	607a      	str	r2, [r7, #4]
 800efbe:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800efc0:	2300      	movs	r3, #0
 800efc2:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800efc4:	2300      	movs	r3, #0
 800efc6:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800efc8:	2300      	movs	r3, #0
 800efca:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800efcc:	89fb      	ldrh	r3, [r7, #14]
 800efce:	2b37      	cmp	r3, #55	@ 0x37
 800efd0:	d802      	bhi.n	800efd8 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800efd2:	f06f 0308 	mvn.w	r3, #8
 800efd6:	e03e      	b.n	800f056 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800efd8:	68b9      	ldr	r1, [r7, #8]
 800efda:	2002      	movs	r0, #2
 800efdc:	f7f9 f96d 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800efe0:	4603      	mov	r3, r0
 800efe2:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	3302      	adds	r3, #2
 800efec:	4619      	mov	r1, r3
 800efee:	2002      	movs	r0, #2
 800eff0:	f7f9 f963 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800eff4:	4603      	mov	r3, r0
 800eff6:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800f000:	099b      	lsrs	r3, r3, #6
 800f002:	b29a      	uxth	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2219      	movs	r2, #25
 800f00c:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2205      	movs	r2, #5
 800f012:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2205      	movs	r2, #5
 800f018:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	3304      	adds	r3, #4
 800f01e:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f020:	2300      	movs	r3, #0
 800f022:	74fb      	strb	r3, [r7, #19]
 800f024:	e012      	b.n	800f04c <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800f026:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800f028:	6979      	ldr	r1, [r7, #20]
 800f02a:	2002      	movs	r0, #2
 800f02c:	f7f9 f945 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f030:	4603      	mov	r3, r0
 800f032:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	1d23      	adds	r3, r4, #4
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	4413      	add	r3, r2
 800f03c:	460a      	mov	r2, r1
 800f03e:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	3302      	adds	r3, #2
 800f044:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f046:	7cfb      	ldrb	r3, [r7, #19]
 800f048:	3301      	adds	r3, #1
 800f04a:	74fb      	strb	r3, [r7, #19]
 800f04c:	7cfb      	ldrb	r3, [r7, #19]
 800f04e:	2b18      	cmp	r3, #24
 800f050:	d9e9      	bls.n	800f026 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800f052:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f056:	4618      	mov	r0, r3
 800f058:	371c      	adds	r7, #28
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd90      	pop	{r4, r7, pc}

0800f05e <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b086      	sub	sp, #24
 800f062:	af00      	add	r7, sp, #0
 800f064:	4603      	mov	r3, r0
 800f066:	60b9      	str	r1, [r7, #8]
 800f068:	607a      	str	r2, [r7, #4]
 800f06a:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f06c:	2300      	movs	r3, #0
 800f06e:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800f070:	89fb      	ldrh	r3, [r7, #14]
 800f072:	2b07      	cmp	r3, #7
 800f074:	d802      	bhi.n	800f07c <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f076:	f06f 0308 	mvn.w	r3, #8
 800f07a:	e027      	b.n	800f0cc <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	2002      	movs	r0, #2
 800f080:	f7f9 f91b 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f084:	4603      	mov	r3, r0
 800f086:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	3302      	adds	r3, #2
 800f090:	4619      	mov	r1, r3
 800f092:	2002      	movs	r0, #2
 800f094:	f7f9 f911 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f098:	4603      	mov	r3, r0
 800f09a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	2002      	movs	r0, #2
 800f0a8:	f7f9 f907 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	3306      	adds	r3, #6
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	2002      	movs	r0, #2
 800f0bc:	f7f9 f8fd 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	80da      	strh	r2, [r3, #6]

	return status;
 800f0c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3718      	adds	r7, #24
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4603      	mov	r3, r0
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f0e6:	89fb      	ldrh	r3, [r7, #14]
 800f0e8:	2b0f      	cmp	r3, #15
 800f0ea:	d802      	bhi.n	800f0f2 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f0ec:	f06f 0308 	mvn.w	r3, #8
 800f0f0:	e04d      	b.n	800f18e <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f0f2:	68b9      	ldr	r1, [r7, #8]
 800f0f4:	2002      	movs	r0, #2
 800f0f6:	f7f9 f8e0 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	789a      	ldrb	r2, [r3, #2]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	78da      	ldrb	r2, [r3, #3]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	3304      	adds	r3, #4
 800f116:	4619      	mov	r1, r3
 800f118:	2002      	movs	r0, #2
 800f11a:	f7f9 f8ce 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f11e:	4603      	mov	r3, r0
 800f120:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	3306      	adds	r3, #6
 800f12a:	4619      	mov	r1, r3
 800f12c:	2002      	movs	r0, #2
 800f12e:	f7f9 f8c4 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f132:	4603      	mov	r3, r0
 800f134:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	3308      	adds	r3, #8
 800f13e:	4619      	mov	r1, r3
 800f140:	2002      	movs	r0, #2
 800f142:	f7f9 f8ba 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f146:	4603      	mov	r3, r0
 800f148:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	330a      	adds	r3, #10
 800f152:	4619      	mov	r1, r3
 800f154:	2002      	movs	r0, #2
 800f156:	f7f9 f8b0 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f15a:	4603      	mov	r3, r0
 800f15c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	330c      	adds	r3, #12
 800f166:	4619      	mov	r1, r3
 800f168:	2002      	movs	r0, #2
 800f16a:	f7f9 f8a6 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f16e:	4603      	mov	r3, r0
 800f170:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	330e      	adds	r3, #14
 800f17a:	4619      	mov	r1, r3
 800f17c:	2002      	movs	r0, #2
 800f17e:	f7f9 f89c 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f182:	4603      	mov	r3, r0
 800f184:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	81da      	strh	r2, [r3, #14]

	return status;
 800f18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3718      	adds	r7, #24
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b086      	sub	sp, #24
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	607b      	str	r3, [r7, #4]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	72fb      	strb	r3, [r7, #11]
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f1ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d106      	bne.n	800f1c2 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f1b4:	2232      	movs	r2, #50	@ 0x32
 800f1b6:	2104      	movs	r1, #4
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7ff fdd1 	bl	800ed60 <VL53LX_nvm_enable>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f1c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d107      	bne.n	800f1da <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f1ca:	7aba      	ldrb	r2, [r7, #10]
 800f1cc:	7af9      	ldrb	r1, [r7, #11]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f7ff fe2b 	bl	800ee2c <VL53LX_nvm_read>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f1da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d104      	bne.n	800f1ec <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f7ff fe80 	bl	800eee8 <VL53LX_nvm_disable>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3718      	adds	r7, #24
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f202:	2300      	movs	r3, #0
 800f204:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f206:	f107 0308 	add.w	r3, r7, #8
 800f20a:	2201      	movs	r2, #1
 800f20c:	212e      	movs	r1, #46	@ 0x2e
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7ff ffc1 	bl	800f196 <VL53LX_read_nvm_raw_data>
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d108      	bne.n	800f232 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f220:	f107 0308 	add.w	r3, r7, #8
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	4619      	mov	r1, r3
 800f228:	2004      	movs	r0, #4
 800f22a:	f7ff fe93 	bl	800ef54 <VL53LX_nvm_decode_optical_centre>
 800f22e:	4603      	mov	r3, r0
 800f230:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b092      	sub	sp, #72	@ 0x48
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f248:	2300      	movs	r3, #0
 800f24a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f24e:	f107 030c 	add.w	r3, r7, #12
 800f252:	220e      	movs	r2, #14
 800f254:	2157      	movs	r1, #87	@ 0x57
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff ff9d 	bl	800f196 <VL53LX_read_nvm_raw_data>
 800f25c:	4603      	mov	r3, r0
 800f25e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f262:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800f266:	2b00      	cmp	r3, #0
 800f268:	d109      	bne.n	800f27e <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f26a:	f107 030c 	add.w	r3, r7, #12
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	4619      	mov	r1, r3
 800f272:	2038      	movs	r0, #56	@ 0x38
 800f274:	f7ff fe9d 	bl	800efb2 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f278:	4603      	mov	r3, r0
 800f27a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f27e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800f282:	4618      	mov	r0, r3
 800f284:	3748      	adds	r7, #72	@ 0x48
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b086      	sub	sp, #24
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f294:	2300      	movs	r3, #0
 800f296:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f298:	f107 030c 	add.w	r3, r7, #12
 800f29c:	2202      	movs	r2, #2
 800f29e:	2165      	movs	r1, #101	@ 0x65
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff ff78 	bl	800f196 <VL53LX_read_nvm_raw_data>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f2aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d108      	bne.n	800f2c4 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f2b2:	f107 030c 	add.w	r3, r7, #12
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	2008      	movs	r0, #8
 800f2bc:	f7ff fecf 	bl	800f05e <VL53LX_nvm_decode_additional_offset_cal_data>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	@ 0x28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f2e4:	897b      	ldrh	r3, [r7, #10]
 800f2e6:	089b      	lsrs	r3, r3, #2
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	b2d9      	uxtb	r1, r3
 800f2ec:	f107 0314 	add.w	r3, r7, #20
 800f2f0:	2204      	movs	r2, #4
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f7ff ff4f 	bl	800f196 <VL53LX_read_nvm_raw_data>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f2fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f302:	2b00      	cmp	r3, #0
 800f304:	d109      	bne.n	800f31a <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f306:	f107 0314 	add.w	r3, r7, #20
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	4619      	mov	r1, r3
 800f30e:	2010      	movs	r0, #16
 800f310:	f7ff fee0 	bl	800f0d4 <VL53LX_nvm_decode_fmt_range_results_data>
 800f314:	4603      	mov	r3, r0
 800f316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800f31e:	4618      	mov	r0, r3
 800f320:	3728      	adds	r7, #40	@ 0x28
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	60f8      	str	r0, [r7, #12]
 800f32e:	460b      	mov	r3, r1
 800f330:	607a      	str	r2, [r7, #4]
 800f332:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f334:	2300      	movs	r3, #0
 800f336:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f338:	897b      	ldrh	r3, [r7, #10]
 800f33a:	2b0a      	cmp	r3, #10
 800f33c:	d802      	bhi.n	800f344 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f33e:	f06f 0309 	mvn.w	r3, #9
 800f342:	e047      	b.n	800f3d4 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f34c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f35a:	f002 020f 	and.w	r2, r2, #15
 800f35e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f360:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f36a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f36e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f370:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f37a:	f002 0203 	and.w	r2, r2, #3
 800f37e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f380:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f38a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f38e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f390:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	88d8      	ldrh	r0, [r3, #6]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	3305      	adds	r3, #5
 800f39a:	461a      	mov	r2, r3
 800f39c:	2102      	movs	r1, #2
 800f39e:	f7f8 ff61 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f3aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f3b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f3be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f3c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f3c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f3ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f3d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3718      	adds	r7, #24
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
 800f3e8:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f3ee:	89fb      	ldrh	r3, [r7, #14]
 800f3f0:	2b0a      	cmp	r3, #10
 800f3f2:	d802      	bhi.n	800f3fa <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f3f4:	f06f 0309 	mvn.w	r3, #9
 800f3f8:	e046      	b.n	800f488 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f402:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	3301      	adds	r3, #1
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	f003 030f 	and.w	r3, r3, #15
 800f412:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	3302      	adds	r3, #2
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f422:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	3303      	adds	r3, #3
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	f003 0303 	and.w	r3, r3, #3
 800f432:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	3304      	adds	r3, #4
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f442:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	3305      	adds	r3, #5
 800f44c:	4619      	mov	r1, r3
 800f44e:	2002      	movs	r0, #2
 800f450:	f7f8 ff33 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	79da      	ldrb	r2, [r3, #7]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	7a1a      	ldrb	r2, [r3, #8]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	3309      	adds	r3, #9
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f476:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	7a9a      	ldrb	r2, [r3, #10]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3718      	adds	r7, #24
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f49a:	2300      	movs	r3, #0
 800f49c:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d108      	bne.n	800f4b8 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f4a6:	f107 020c 	add.w	r2, r7, #12
 800f4aa:	230b      	movs	r3, #11
 800f4ac:	2101      	movs	r1, #1
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f002 f814 	bl	80114dc <VL53LX_ReadMulti>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f4b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d108      	bne.n	800f4d2 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f4c0:	f107 030c 	add.w	r3, r7, #12
 800f4c4:	683a      	ldr	r2, [r7, #0]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	200b      	movs	r0, #11
 800f4ca:	f7ff ff87 	bl	800f3dc <VL53LX_i2c_decode_static_nvm_managed>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f4d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3718      	adds	r7, #24
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b086      	sub	sp, #24
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	60f8      	str	r0, [r7, #12]
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	607a      	str	r2, [r7, #4]
 800f4ea:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f4f0:	897b      	ldrh	r3, [r7, #10]
 800f4f2:	2b16      	cmp	r3, #22
 800f4f4:	d802      	bhi.n	800f4fc <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4f6:	f06f 0309 	mvn.w	r3, #9
 800f4fa:	e076      	b.n	800f5ea <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f50c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f516:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f51c:	68fa      	ldr	r2, [r7, #12]
 800f51e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f520:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f52a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f534:	f002 020f 	and.w	r2, r2, #15
 800f538:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f53a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f544:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f54e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f552:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f554:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f55e:	f002 0203 	and.w	r2, r2, #3
 800f562:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f564:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	8958      	ldrh	r0, [r3, #10]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	3309      	adds	r3, #9
 800f56e:	461a      	mov	r2, r3
 800f570:	2102      	movs	r1, #2
 800f572:	f7f8 fe77 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	330b      	adds	r3, #11
 800f580:	461a      	mov	r2, r3
 800f582:	2102      	movs	r1, #2
 800f584:	f7f8 feba 	bl	80082fc <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	330d      	adds	r3, #13
 800f592:	461a      	mov	r2, r3
 800f594:	2102      	movs	r1, #2
 800f596:	f7f8 feb1 	bl	80082fc <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	8a18      	ldrh	r0, [r3, #16]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	330f      	adds	r3, #15
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	2102      	movs	r1, #2
 800f5a6:	f7f8 fe5d 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f5b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5b4:	b218      	sxth	r0, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	3311      	adds	r3, #17
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	2102      	movs	r1, #2
 800f5be:	f7f8 fe9d 	bl	80082fc <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	3313      	adds	r3, #19
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	2102      	movs	r1, #2
 800f5d0:	f7f8 fe94 	bl	80082fc <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3315      	adds	r3, #21
 800f5de:	461a      	mov	r2, r3
 800f5e0:	2102      	movs	r1, #2
 800f5e2:	f7f8 fe8b 	bl	80082fc <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f5e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b086      	sub	sp, #24
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	60b9      	str	r1, [r7, #8]
 800f5fc:	607a      	str	r2, [r7, #4]
 800f5fe:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f600:	2300      	movs	r3, #0
 800f602:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f604:	89fb      	ldrh	r3, [r7, #14]
 800f606:	2b16      	cmp	r3, #22
 800f608:	d802      	bhi.n	800f610 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f60a:	f06f 0309 	mvn.w	r3, #9
 800f60e:	e079      	b.n	800f704 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	785a      	ldrb	r2, [r3, #1]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	789a      	ldrb	r2, [r3, #2]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	78da      	ldrb	r2, [r3, #3]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	791a      	ldrb	r2, [r3, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	3305      	adds	r3, #5
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	f003 030f 	and.w	r3, r3, #15
 800f642:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	799a      	ldrb	r2, [r3, #6]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3307      	adds	r3, #7
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f65a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	3308      	adds	r3, #8
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	f003 0303 	and.w	r3, r3, #3
 800f66a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	3309      	adds	r3, #9
 800f674:	4619      	mov	r1, r3
 800f676:	2002      	movs	r0, #2
 800f678:	f7f8 fe1f 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f67c:	4603      	mov	r3, r0
 800f67e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	330b      	adds	r3, #11
 800f688:	4619      	mov	r1, r3
 800f68a:	2002      	movs	r0, #2
 800f68c:	f7f8 fe62 	bl	8008354 <VL53LX_i2c_decode_int16_t>
 800f690:	4603      	mov	r3, r0
 800f692:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	330d      	adds	r3, #13
 800f69c:	4619      	mov	r1, r3
 800f69e:	2002      	movs	r0, #2
 800f6a0:	f7f8 fe58 	bl	8008354 <VL53LX_i2c_decode_int16_t>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	330f      	adds	r3, #15
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	2002      	movs	r0, #2
 800f6b4:	f7f8 fe01 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	3311      	adds	r3, #17
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	2002      	movs	r0, #2
 800f6c8:	f7f8 fe44 	bl	8008354 <VL53LX_i2c_decode_int16_t>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6d2:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	3313      	adds	r3, #19
 800f6dc:	4619      	mov	r1, r3
 800f6de:	2002      	movs	r0, #2
 800f6e0:	f7f8 fe38 	bl	8008354 <VL53LX_i2c_decode_int16_t>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	3315      	adds	r3, #21
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	2002      	movs	r0, #2
 800f6f4:	f7f8 fe2e 	bl	8008354 <VL53LX_i2c_decode_int16_t>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3718      	adds	r7, #24
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08a      	sub	sp, #40	@ 0x28
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f716:	2300      	movs	r3, #0
 800f718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f71c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f720:	2b00      	cmp	r3, #0
 800f722:	d109      	bne.n	800f738 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f724:	f107 020c 	add.w	r2, r7, #12
 800f728:	2317      	movs	r3, #23
 800f72a:	210d      	movs	r1, #13
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f001 fed5 	bl	80114dc <VL53LX_ReadMulti>
 800f732:	4603      	mov	r3, r0
 800f734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f738:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d109      	bne.n	800f754 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f740:	f107 030c 	add.w	r3, r7, #12
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	4619      	mov	r1, r3
 800f748:	2017      	movs	r0, #23
 800f74a:	f7ff ff52 	bl	800f5f2 <VL53LX_i2c_decode_customer_nvm_managed>
 800f74e:	4603      	mov	r3, r0
 800f750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f754:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d11c      	bne.n	800f796 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	8a5b      	ldrh	r3, [r3, #18]
 800f760:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 800f762:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f766:	2b00      	cmp	r3, #0
 800f768:	da00      	bge.n	800f76c <VL53LX_get_customer_nvm_managed+0x60>
 800f76a:	3303      	adds	r3, #3
 800f76c:	109b      	asrs	r3, r3, #2
 800f76e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 800f770:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f778:	db04      	blt.n	800f784 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f77a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f77c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800f780:	b29b      	uxth	r3, r3
 800f782:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2200      	movs	r2, #0
 800f788:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f78e:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f794:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f796:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3728      	adds	r7, #40	@ 0x28
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b086      	sub	sp, #24
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	60f8      	str	r0, [r7, #12]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	607a      	str	r2, [r7, #4]
 800f7ae:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f7b4:	897b      	ldrh	r3, [r7, #10]
 800f7b6:	2b1f      	cmp	r3, #31
 800f7b8:	d802      	bhi.n	800f7c0 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f7ba:	f06f 0309 	mvn.w	r3, #9
 800f7be:	e0cf      	b.n	800f960 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	2102      	movs	r1, #2
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7f8 fd4b 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f7d6:	f002 0201 	and.w	r2, r2, #1
 800f7da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f7dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f7e6:	f002 020f 	and.w	r2, r2, #15
 800f7ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f7ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f7f6:	f002 020f 	and.w	r2, r2, #15
 800f7fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f7fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f806:	f002 021f 	and.w	r2, r2, #31
 800f80a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f80c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f816:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f81a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f81c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f826:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f82a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f82c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f836:	f002 0201 	and.w	r2, r2, #1
 800f83a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f83c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f846:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f850:	f002 0201 	and.w	r2, r2, #1
 800f854:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f856:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f860:	f002 0203 	and.w	r2, r2, #3
 800f864:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f866:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f870:	f002 021f 	and.w	r2, r2, #31
 800f874:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f876:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f880:	f002 0203 	and.w	r2, r2, #3
 800f884:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f886:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f890:	f002 0203 	and.w	r2, r2, #3
 800f894:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f896:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f8a0:	f002 0207 	and.w	r2, r2, #7
 800f8a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f8a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f8b0:	f002 021f 	and.w	r2, r2, #31
 800f8b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f8b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f8c0:	f002 0201 	and.w	r2, r2, #1
 800f8c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f8c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f8d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f8e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f8ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f8f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f902:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	8b18      	ldrh	r0, [r3, #24]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	3318      	adds	r3, #24
 800f90c:	461a      	mov	r2, r3
 800f90e:	2102      	movs	r1, #2
 800f910:	f7f8 fca8 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f91c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f926:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f930:	f002 020f 	and.w	r2, r2, #15
 800f934:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f936:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f940:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f94a:	f002 020f 	and.w	r2, r2, #15
 800f94e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f950:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f95a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f95c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f960:	4618      	mov	r0, r3
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	460b      	mov	r3, r1
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f976:	2300      	movs	r3, #0
 800f978:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f97a:	897b      	ldrh	r3, [r7, #10]
 800f97c:	2b15      	cmp	r3, #21
 800f97e:	d802      	bhi.n	800f986 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f980:	f06f 0309 	mvn.w	r3, #9
 800f984:	e070      	b.n	800fa68 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f996:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f9a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f9aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f9ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f9b0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f9b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f9ba:	b298      	uxth	r0, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3304      	adds	r3, #4
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	2102      	movs	r1, #2
 800f9c4:	f7f8 fc4e 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f9d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f9d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f9d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f9e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f9ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f9f4:	f002 0201 	and.w	r2, r2, #1
 800f9f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f9fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800fa04:	f002 0207 	and.w	r2, r2, #7
 800fa08:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fa0a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	8998      	ldrh	r0, [r3, #12]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	330c      	adds	r3, #12
 800fa14:	461a      	mov	r2, r3
 800fa16:	2102      	movs	r1, #2
 800fa18:	f7f8 fc24 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	89d8      	ldrh	r0, [r3, #14]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	330e      	adds	r3, #14
 800fa24:	461a      	mov	r2, r3
 800fa26:	2102      	movs	r1, #2
 800fa28:	f7f8 fc1c 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	8a18      	ldrh	r0, [r3, #16]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	3310      	adds	r3, #16
 800fa34:	461a      	mov	r2, r3
 800fa36:	2102      	movs	r1, #2
 800fa38:	f7f8 fc14 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fa44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fa4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fa58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fa62:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fa64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3718      	adds	r7, #24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b086      	sub	sp, #24
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	460b      	mov	r3, r1
 800fa7a:	607a      	str	r2, [r7, #4]
 800fa7c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800fa82:	897b      	ldrh	r3, [r7, #10]
 800fa84:	2b16      	cmp	r3, #22
 800fa86:	d802      	bhi.n	800fa8e <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa88:	f06f 0309 	mvn.w	r3, #9
 800fa8c:	e06e      	b.n	800fb6c <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	f003 030f 	and.w	r3, r3, #15
 800fa96:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800faa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800faae:	f002 020f 	and.w	r2, r2, #15
 800fab2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fab4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fabe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fac8:	f002 020f 	and.w	r2, r2, #15
 800facc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800face:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fad8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fae2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fae6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fae8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800faf2:	f002 020f 	and.w	r2, r2, #15
 800faf6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800faf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fb02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800fb0c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fb10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fb12:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	8958      	ldrh	r0, [r3, #10]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	330a      	adds	r3, #10
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	2102      	movs	r1, #2
 800fb20:	f7f8 fba0 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	8998      	ldrh	r0, [r3, #12]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	330c      	adds	r3, #12
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	2102      	movs	r1, #2
 800fb30:	f7f8 fb98 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800fb3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800fb46:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6918      	ldr	r0, [r3, #16]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3312      	adds	r3, #18
 800fb50:	461a      	mov	r2, r3
 800fb52:	2104      	movs	r1, #4
 800fb54:	f7f8 fc26 	bl	80083a4 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800fb60:	f002 0201 	and.w	r2, r2, #1
 800fb64:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800fb66:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb82:	2300      	movs	r3, #0
 800fb84:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800fb86:	897b      	ldrh	r3, [r7, #10]
 800fb88:	2b11      	cmp	r3, #17
 800fb8a:	d802      	bhi.n	800fb92 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb8c:	f06f 0309 	mvn.w	r3, #9
 800fb90:	e071      	b.n	800fc76 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 0303 	and.w	r3, r3, #3
 800fb9a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	8858      	ldrh	r0, [r3, #2]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	3301      	adds	r3, #1
 800fba8:	461a      	mov	r2, r3
 800fbaa:	2102      	movs	r1, #2
 800fbac:	f7f8 fb5a 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	8898      	ldrh	r0, [r3, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	3303      	adds	r3, #3
 800fbb8:	461a      	mov	r2, r3
 800fbba:	2102      	movs	r1, #2
 800fbbc:	f7f8 fb52 	bl	8008264 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fbc8:	f002 0201 	and.w	r2, r2, #1
 800fbcc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fbce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800fbd8:	f002 0207 	and.w	r2, r2, #7
 800fbdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fbde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fbe8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fbf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fbfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fc00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fc02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fc0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fc10:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fc12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fc1c:	f002 0203 	and.w	r2, r2, #3
 800fc20:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fc22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800fc2c:	f002 0203 	and.w	r2, r2, #3
 800fc30:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fc32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fc3c:	f002 020f 	and.w	r2, r2, #15
 800fc40:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fc42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800fc4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800fc56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800fc60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800fc6a:	f002 0203 	and.w	r2, r2, #3
 800fc6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fc70:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3718      	adds	r7, #24
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fc7e:	b480      	push	{r7}
 800fc80:	b087      	sub	sp, #28
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	60f8      	str	r0, [r7, #12]
 800fc86:	460b      	mov	r3, r1
 800fc88:	607a      	str	r2, [r7, #4]
 800fc8a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800fc90:	897b      	ldrh	r3, [r7, #10]
 800fc92:	2b04      	cmp	r3, #4
 800fc94:	d802      	bhi.n	800fc9c <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc96:	f06f 0309 	mvn.w	r3, #9
 800fc9a:	e025      	b.n	800fce8 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f003 0301 	and.w	r3, r3, #1
 800fca4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800fcb2:	f002 0201 	and.w	r2, r2, #1
 800fcb6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fcb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800fcc2:	f002 0201 	and.w	r2, r2, #1
 800fcc6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fcc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800fcd2:	f002 0203 	and.w	r2, r2, #3
 800fcd6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fcd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fce2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	371c      	adds	r7, #28
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b086      	sub	sp, #24
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd02:	2300      	movs	r3, #0
 800fd04:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fd06:	89fb      	ldrh	r3, [r7, #14]
 800fd08:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd0a:	d802      	bhi.n	800fd12 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd0c:	f06f 0309 	mvn.w	r3, #9
 800fd10:	e0e2      	b.n	800fed8 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd1a:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	785a      	ldrb	r2, [r3, #1]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	3302      	adds	r3, #2
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f003 030f 	and.w	r3, r3, #15
 800fd32:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	78da      	ldrb	r2, [r3, #3]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	3304      	adds	r3, #4
 800fd44:	4619      	mov	r1, r3
 800fd46:	2002      	movs	r0, #2
 800fd48:	f7f8 fab7 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	3306      	adds	r3, #6
 800fd58:	4619      	mov	r1, r3
 800fd5a:	2002      	movs	r0, #2
 800fd5c:	f7f8 faad 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fd60:	4603      	mov	r3, r0
 800fd62:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	3308      	adds	r3, #8
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	2002      	movs	r0, #2
 800fd70:	f7f8 faa3 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fd74:	4603      	mov	r3, r0
 800fd76:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	330a      	adds	r3, #10
 800fd80:	4619      	mov	r1, r3
 800fd82:	2002      	movs	r0, #2
 800fd84:	f7f8 fa99 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	330c      	adds	r3, #12
 800fd94:	4619      	mov	r1, r3
 800fd96:	2002      	movs	r0, #2
 800fd98:	f7f8 fa8f 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	330e      	adds	r3, #14
 800fda8:	4619      	mov	r1, r3
 800fdaa:	2002      	movs	r0, #2
 800fdac:	f7f8 fa85 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	3310      	adds	r3, #16
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	2002      	movs	r0, #2
 800fdc0:	f7f8 fa7b 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	3312      	adds	r3, #18
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	2002      	movs	r0, #2
 800fdd4:	f7f8 fa71 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	3314      	adds	r3, #20
 800fde4:	4619      	mov	r1, r3
 800fde6:	2002      	movs	r0, #2
 800fde8:	f7f8 fa67 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fdec:	4603      	mov	r3, r0
 800fdee:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	3316      	adds	r3, #22
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	2002      	movs	r0, #2
 800fdfc:	f7f8 fa5d 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe00:	4603      	mov	r3, r0
 800fe02:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	3318      	adds	r3, #24
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	2002      	movs	r0, #2
 800fe10:	f7f8 fa53 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe14:	4603      	mov	r3, r0
 800fe16:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	331a      	adds	r3, #26
 800fe20:	4619      	mov	r1, r3
 800fe22:	2002      	movs	r0, #2
 800fe24:	f7f8 fa49 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	331c      	adds	r3, #28
 800fe34:	4619      	mov	r1, r3
 800fe36:	2002      	movs	r0, #2
 800fe38:	f7f8 fa3f 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	331e      	adds	r3, #30
 800fe48:	4619      	mov	r1, r3
 800fe4a:	2002      	movs	r0, #2
 800fe4c:	f7f8 fa35 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe50:	4603      	mov	r3, r0
 800fe52:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	3320      	adds	r3, #32
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	2002      	movs	r0, #2
 800fe60:	f7f8 fa2b 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe64:	4603      	mov	r3, r0
 800fe66:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	3322      	adds	r3, #34	@ 0x22
 800fe70:	4619      	mov	r1, r3
 800fe72:	2002      	movs	r0, #2
 800fe74:	f7f8 fa21 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	3324      	adds	r3, #36	@ 0x24
 800fe84:	4619      	mov	r1, r3
 800fe86:	2002      	movs	r0, #2
 800fe88:	f7f8 fa17 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	3326      	adds	r3, #38	@ 0x26
 800fe98:	4619      	mov	r1, r3
 800fe9a:	2002      	movs	r0, #2
 800fe9c:	f7f8 fa0d 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800fea0:	4603      	mov	r3, r0
 800fea2:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	3328      	adds	r3, #40	@ 0x28
 800feac:	4619      	mov	r1, r3
 800feae:	2002      	movs	r0, #2
 800feb0:	f7f8 fa03 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3718      	adds	r7, #24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	4603      	mov	r3, r0
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800feee:	2300      	movs	r3, #0
 800fef0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800fef2:	89fb      	ldrh	r3, [r7, #14]
 800fef4:	2b20      	cmp	r3, #32
 800fef6:	d802      	bhi.n	800fefe <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fef8:	f06f 0309 	mvn.w	r3, #9
 800fefc:	e04d      	b.n	800ff9a <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800fefe:	68b9      	ldr	r1, [r7, #8]
 800ff00:	2004      	movs	r0, #4
 800ff02:	f7f8 fa79 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 800ff06:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	3304      	adds	r3, #4
 800ff10:	4619      	mov	r1, r3
 800ff12:	2004      	movs	r0, #4
 800ff14:	f7f8 fa70 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 800ff18:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	3308      	adds	r3, #8
 800ff22:	4619      	mov	r1, r3
 800ff24:	2004      	movs	r0, #4
 800ff26:	f7f8 fa84 	bl	8008432 <VL53LX_i2c_decode_int32_t>
 800ff2a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	330c      	adds	r3, #12
 800ff34:	4619      	mov	r1, r3
 800ff36:	2004      	movs	r0, #4
 800ff38:	f7f8 fa5e 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 800ff3c:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	3310      	adds	r3, #16
 800ff46:	4619      	mov	r1, r3
 800ff48:	2004      	movs	r0, #4
 800ff4a:	f7f8 fa55 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 800ff4e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	3314      	adds	r3, #20
 800ff58:	4619      	mov	r1, r3
 800ff5a:	2004      	movs	r0, #4
 800ff5c:	f7f8 fa4c 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 800ff60:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	3318      	adds	r3, #24
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	2004      	movs	r0, #4
 800ff6e:	f7f8 fa60 	bl	8008432 <VL53LX_i2c_decode_int32_t>
 800ff72:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	331c      	adds	r3, #28
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	2004      	movs	r0, #4
 800ff80:	f7f8 fa3a 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 800ff84:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ff96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3718      	adds	r7, #24
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b086      	sub	sp, #24
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	60b9      	str	r1, [r7, #8]
 800ffac:	607a      	str	r2, [r7, #4]
 800ffae:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800ffb4:	89fb      	ldrh	r3, [r7, #14]
 800ffb6:	2b37      	cmp	r3, #55	@ 0x37
 800ffb8:	d802      	bhi.n	800ffc0 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ffba:	f06f 0309 	mvn.w	r3, #9
 800ffbe:	e15e      	b.n	801027e <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800ffc0:	68b9      	ldr	r1, [r7, #8]
 800ffc2:	2002      	movs	r0, #2
 800ffc4:	f7f8 f979 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	3302      	adds	r3, #2
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffda:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	3303      	adds	r3, #3
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffea:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	3304      	adds	r3, #4
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	f003 0303 	and.w	r3, r3, #3
 800fffa:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	3305      	adds	r3, #5
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	f003 0301 	and.w	r3, r3, #1
 801000a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	3306      	adds	r3, #6
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801001a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	3307      	adds	r3, #7
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801002a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	3308      	adds	r3, #8
 8010034:	4619      	mov	r1, r3
 8010036:	2002      	movs	r0, #2
 8010038:	f7f8 f93f 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 801003c:	4603      	mov	r3, r0
 801003e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010042:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	330a      	adds	r3, #10
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f003 0303 	and.w	r3, r3, #3
 8010052:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	330b      	adds	r3, #11
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	f003 0303 	and.w	r3, r3, #3
 8010062:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	330c      	adds	r3, #12
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	f003 030f 	and.w	r3, r3, #15
 8010072:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	330d      	adds	r3, #13
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	f003 0307 	and.w	r3, r3, #7
 8010082:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	330e      	adds	r3, #14
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	330f      	adds	r3, #15
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	f003 0303 	and.w	r3, r3, #3
 80100a2:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	7c1a      	ldrb	r2, [r3, #16]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	7c5a      	ldrb	r2, [r3, #17]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3312      	adds	r3, #18
 80100bc:	4619      	mov	r1, r3
 80100be:	2002      	movs	r0, #2
 80100c0:	f7f8 f8fb 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 80100c4:	4603      	mov	r3, r0
 80100c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100ca:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	3316      	adds	r3, #22
 80100d4:	4619      	mov	r1, r3
 80100d6:	2002      	movs	r0, #2
 80100d8:	f7f8 f8ef 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 80100dc:	4603      	mov	r3, r0
 80100de:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	3318      	adds	r3, #24
 80100e8:	4619      	mov	r1, r3
 80100ea:	2002      	movs	r0, #2
 80100ec:	f7f8 f8e5 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	331a      	adds	r3, #26
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	f003 0301 	and.w	r3, r3, #1
 8010102:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	331b      	adds	r3, #27
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	f003 0307 	and.w	r3, r3, #7
 8010112:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	7f1a      	ldrb	r2, [r3, #28]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	7f5a      	ldrb	r2, [r3, #29]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	331e      	adds	r3, #30
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010132:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	331f      	adds	r3, #31
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010142:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	3320      	adds	r3, #32
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	f003 0303 	and.w	r3, r3, #3
 8010152:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	3321      	adds	r3, #33	@ 0x21
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	f003 030f 	and.w	r3, r3, #15
 8010162:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	3325      	adds	r3, #37	@ 0x25
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	3326      	adds	r3, #38	@ 0x26
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 0303 	and.w	r3, r3, #3
 80101a8:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	3327      	adds	r3, #39	@ 0x27
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	f003 031f 	and.w	r3, r3, #31
 80101ba:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	3328      	adds	r3, #40	@ 0x28
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	f003 031f 	and.w	r3, r3, #31
 80101cc:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	3329      	adds	r3, #41	@ 0x29
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	f003 031f 	and.w	r3, r3, #31
 80101de:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	332a      	adds	r3, #42	@ 0x2a
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	332b      	adds	r3, #43	@ 0x2b
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	f003 0301 	and.w	r3, r3, #1
 8010202:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	332c      	adds	r3, #44	@ 0x2c
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 0303 	and.w	r3, r3, #3
 8010214:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	332d      	adds	r3, #45	@ 0x2d
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010226:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	332e      	adds	r3, #46	@ 0x2e
 8010232:	4619      	mov	r1, r3
 8010234:	2004      	movs	r0, #4
 8010236:	f7f8 f8df 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 801023a:	4603      	mov	r3, r0
 801023c:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	3332      	adds	r3, #50	@ 0x32
 8010248:	4619      	mov	r1, r3
 801024a:	2004      	movs	r0, #4
 801024c:	f7f8 f8d4 	bl	80083f8 <VL53LX_i2c_decode_uint32_t>
 8010250:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	3336      	adds	r3, #54	@ 0x36
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	3337      	adds	r3, #55	@ 0x37
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 801027a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}

08010286 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8010286:	b580      	push	{r7, lr}
 8010288:	b086      	sub	sp, #24
 801028a:	af00      	add	r7, sp, #0
 801028c:	4603      	mov	r3, r0
 801028e:	60b9      	str	r1, [r7, #8]
 8010290:	607a      	str	r2, [r7, #4]
 8010292:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010294:	2300      	movs	r3, #0
 8010296:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8010298:	89fb      	ldrh	r3, [r7, #14]
 801029a:	2b30      	cmp	r3, #48	@ 0x30
 801029c:	d802      	bhi.n	80102a4 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801029e:	f06f 0309 	mvn.w	r3, #9
 80102a2:	e112      	b.n	80104ca <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	785a      	ldrb	r2, [r3, #1]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	789a      	ldrb	r2, [r3, #2]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	3303      	adds	r3, #3
 80102c0:	4619      	mov	r1, r3
 80102c2:	2002      	movs	r0, #2
 80102c4:	f7f7 fff9 	bl	80082ba <VL53LX_i2c_decode_uint16_t>
 80102c8:	4603      	mov	r3, r0
 80102ca:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	3305      	adds	r3, #5
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102da:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	3306      	adds	r3, #6
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	f003 0307 	and.w	r3, r3, #7
 80102ea:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	3307      	adds	r3, #7
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 0307 	and.w	r3, r3, #7
 80102fa:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	3308      	adds	r3, #8
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801030a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	3309      	adds	r3, #9
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801031a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	330a      	adds	r3, #10
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	f003 0301 	and.w	r3, r3, #1
 801032a:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	330b      	adds	r3, #11
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801033a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	330c      	adds	r3, #12
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	f003 0301 	and.w	r3, r3, #1
 801034a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	330d      	adds	r3, #13
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801035a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	330e      	adds	r3, #14
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801036a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	7bda      	ldrb	r2, [r3, #15]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	7c1a      	ldrb	r2, [r3, #16]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	7c5a      	ldrb	r2, [r3, #17]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	7c9a      	ldrb	r2, [r3, #18]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	7cda      	ldrb	r2, [r3, #19]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	7d1a      	ldrb	r2, [r3, #20]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	7d5a      	ldrb	r2, [r3, #21]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	7d9a      	ldrb	r2, [r3, #22]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	7dda      	ldrb	r2, [r3, #23]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	7e1a      	ldrb	r2, [r3, #24]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	7e5a      	ldrb	r2, [r3, #25]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	7e9a      	ldrb	r2, [r3, #26]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	7eda      	ldrb	r2, [r3, #27]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	7f1a      	ldrb	r2, [r3, #28]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	7f5a      	ldrb	r2, [r3, #29]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	7f9a      	ldrb	r2, [r3, #30]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	7fda      	ldrb	r2, [r3, #31]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80104c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3718      	adds	r7, #24
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b090      	sub	sp, #64	@ 0x40
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80104dc:	2300      	movs	r3, #0
 80104de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80104e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d10a      	bne.n	8010500 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80104ea:	f107 020c 	add.w	r2, r7, #12
 80104ee:	2331      	movs	r3, #49	@ 0x31
 80104f0:	f240 110f 	movw	r1, #271	@ 0x10f
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 fff1 	bl	80114dc <VL53LX_ReadMulti>
 80104fa:	4603      	mov	r3, r0
 80104fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010500:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010504:	2b00      	cmp	r3, #0
 8010506:	d109      	bne.n	801051c <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010508:	f107 030c 	add.w	r3, r7, #12
 801050c:	683a      	ldr	r2, [r7, #0]
 801050e:	4619      	mov	r1, r3
 8010510:	2031      	movs	r0, #49	@ 0x31
 8010512:	f7ff feb8 	bl	8010286 <VL53LX_i2c_decode_nvm_copy_data>
 8010516:	4603      	mov	r3, r0
 8010518:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801051c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8010520:	4618      	mov	r0, r3
 8010522:	3740      	adds	r7, #64	@ 0x40
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801052c:	b0d6      	sub	sp, #344	@ 0x158
 801052e:	af00      	add	r7, sp, #0
 8010530:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8010534:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8010538:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801053c:	4603      	mov	r3, r0
 801053e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010542:	23f1      	movs	r3, #241	@ 0xf1
 8010544:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 8010548:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801054c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 8010556:	f04f 0200 	mov.w	r2, #0
 801055a:	f04f 0300 	mov.w	r3, #0
 801055e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 8010562:	f04f 0200 	mov.w	r2, #0
 8010566:	f04f 0300 	mov.w	r3, #0
 801056a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 801056e:	f04f 0200 	mov.w	r2, #0
 8010572:	f04f 0300 	mov.w	r3, #0
 8010576:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 801057a:	f04f 0200 	mov.w	r2, #0
 801057e:	f04f 0300 	mov.w	r3, #0
 8010582:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 8010586:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801058a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801058e:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8010590:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 8322 	beq.w	8010bde <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 801059a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fb fa32 	bl	800ba08 <VL53LX_calc_pll_period_mm>
 80105a4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 80105a8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80105ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d91a      	bls.n	80105ea <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80105b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80105b8:	2200      	movs	r2, #0
 80105ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80105be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 80105c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105c6:	2200      	movs	r2, #0
 80105c8:	4698      	mov	r8, r3
 80105ca:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80105cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80105d0:	460b      	mov	r3, r1
 80105d2:	ebb3 0308 	subs.w	r3, r3, r8
 80105d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80105d8:	4613      	mov	r3, r2
 80105da:	eb63 0309 	sbc.w	r3, r3, r9
 80105de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105e0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80105e4:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 80105e8:	e013      	b.n	8010612 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80105ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80105ee:	2200      	movs	r2, #0
 80105f0:	469a      	mov	sl, r3
 80105f2:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 80105f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80105f8:	2200      	movs	r2, #0
 80105fa:	461c      	mov	r4, r3
 80105fc:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80105fe:	ebba 0304 	subs.w	r3, sl, r4
 8010602:	633b      	str	r3, [r7, #48]	@ 0x30
 8010604:	eb6b 0305 	sbc.w	r3, fp, r5
 8010608:	637b      	str	r3, [r7, #52]	@ 0x34
 801060a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801060e:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 8010612:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8010616:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801061a:	429a      	cmp	r2, r3
 801061c:	d91f      	bls.n	801065e <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801061e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010622:	2200      	movs	r2, #0
 8010624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010628:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 801062c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010630:	2200      	movs	r2, #0
 8010632:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010636:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801063a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 801063e:	4623      	mov	r3, r4
 8010640:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010644:	4602      	mov	r2, r0
 8010646:	1a9b      	subs	r3, r3, r2
 8010648:	62bb      	str	r3, [r7, #40]	@ 0x28
 801064a:	462b      	mov	r3, r5
 801064c:	460a      	mov	r2, r1
 801064e:	eb63 0302 	sbc.w	r3, r3, r2
 8010652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010654:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8010658:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 801065c:	e01e      	b.n	801069c <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801065e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010662:	2200      	movs	r2, #0
 8010664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010668:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 801066c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8010670:	2200      	movs	r2, #0
 8010672:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010676:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801067a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 801067e:	4623      	mov	r3, r4
 8010680:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010684:	4602      	mov	r2, r0
 8010686:	1a9b      	subs	r3, r3, r2
 8010688:	623b      	str	r3, [r7, #32]
 801068a:	462b      	mov	r3, r5
 801068c:	460a      	mov	r2, r1
 801068e:	eb63 0302 	sbc.w	r3, r3, r2
 8010692:	627b      	str	r3, [r7, #36]	@ 0x24
 8010694:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010698:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 801069c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80106a0:	4313      	orrs	r3, r2
 80106a2:	f000 829c 	beq.w	8010bde <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106aa:	2200      	movs	r2, #0
 80106ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80106b0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80106b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80106b8:	2200      	movs	r2, #0
 80106ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80106be:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80106c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80106c6:	4623      	mov	r3, r4
 80106c8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80106cc:	4602      	mov	r2, r0
 80106ce:	189b      	adds	r3, r3, r2
 80106d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80106d4:	460b      	mov	r3, r1
 80106d6:	462a      	mov	r2, r5
 80106d8:	eb42 0303 	adc.w	r3, r2, r3
 80106dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 80106e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80106e4:	2200      	movs	r2, #0
 80106e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80106ea:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106ee:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80106f2:	4623      	mov	r3, r4
 80106f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80106f8:	4602      	mov	r2, r0
 80106fa:	189b      	adds	r3, r3, r2
 80106fc:	61bb      	str	r3, [r7, #24]
 80106fe:	460b      	mov	r3, r1
 8010700:	462a      	mov	r2, r5
 8010702:	eb42 0303 	adc.w	r3, r2, r3
 8010706:	61fb      	str	r3, [r7, #28]
 8010708:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801070c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 8010710:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010714:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8010718:	f173 0300 	sbcs.w	r3, r3, #0
 801071c:	d305      	bcc.n	801072a <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 801071e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8010722:	f04f 0300 	mov.w	r3, #0
 8010726:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 801072a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801072e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010732:	fb03 f102 	mul.w	r1, r3, r2
 8010736:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801073a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801073e:	fb02 f303 	mul.w	r3, r2, r3
 8010742:	18ca      	adds	r2, r1, r3
 8010744:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010748:	fba3 1303 	umull	r1, r3, r3, r3
 801074c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010750:	460b      	mov	r3, r1
 8010752:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8010756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801075a:	18d3      	adds	r3, r2, r3
 801075c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010760:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8010764:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010768:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 801076c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010770:	f04f 0000 	mov.w	r0, #0
 8010774:	f04f 0100 	mov.w	r1, #0
 8010778:	0219      	lsls	r1, r3, #8
 801077a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801077e:	0210      	lsls	r0, r2, #8
 8010780:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 8010784:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801078c:	d305      	bcc.n	801079a <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 801078e:	f04f 32ff 	mov.w	r2, #4294967295
 8010792:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8010796:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801079a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 801079e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80107a2:	f7f0 fa71 	bl	8000c88 <__aeabi_uldivmod>
 80107a6:	4602      	mov	r2, r0
 80107a8:	460b      	mov	r3, r1
 80107aa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80107ae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80107b2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80107b6:	f7f0 fa67 	bl	8000c88 <__aeabi_uldivmod>
 80107ba:	4602      	mov	r2, r0
 80107bc:	460b      	mov	r3, r1
 80107be:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80107c2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80107c6:	2b80      	cmp	r3, #128	@ 0x80
 80107c8:	d305      	bcc.n	80107d6 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 80107ca:	f04f 32ff 	mov.w	r2, #4294967295
 80107ce:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 80107d2:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 80107d6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80107da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107de:	fb03 f102 	mul.w	r1, r3, r2
 80107e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80107e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80107ea:	fb02 f303 	mul.w	r3, r2, r3
 80107ee:	4419      	add	r1, r3
 80107f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80107f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107f8:	fba2 2303 	umull	r2, r3, r2, r3
 80107fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010800:	4613      	mov	r3, r2
 8010802:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8010806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801080a:	18cb      	adds	r3, r1, r3
 801080c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010810:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8010814:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010818:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801081c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010820:	2200      	movs	r2, #0
 8010822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801082a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 801082e:	2200      	movs	r2, #0
 8010830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010834:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010838:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801083c:	4623      	mov	r3, r4
 801083e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8010842:	4602      	mov	r2, r0
 8010844:	189b      	adds	r3, r3, r2
 8010846:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801084a:	460b      	mov	r3, r1
 801084c:	462a      	mov	r2, r5
 801084e:	eb42 0303 	adc.w	r3, r2, r3
 8010852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010856:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801085a:	2200      	movs	r2, #0
 801085c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801085e:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010860:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8010864:	4623      	mov	r3, r4
 8010866:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801086a:	4602      	mov	r2, r0
 801086c:	189b      	adds	r3, r3, r2
 801086e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010870:	460b      	mov	r3, r1
 8010872:	462a      	mov	r2, r5
 8010874:	eb42 0303 	adc.w	r3, r2, r3
 8010878:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801087a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801087e:	2200      	movs	r2, #0
 8010880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010882:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010884:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8010888:	4623      	mov	r3, r4
 801088a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801088e:	4602      	mov	r2, r0
 8010890:	189b      	adds	r3, r3, r2
 8010892:	613b      	str	r3, [r7, #16]
 8010894:	460b      	mov	r3, r1
 8010896:	462a      	mov	r2, r5
 8010898:	eb42 0303 	adc.w	r3, r2, r3
 801089c:	617b      	str	r3, [r7, #20]
 801089e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80108a2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 80108a6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108aa:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80108ae:	f173 0300 	sbcs.w	r3, r3, #0
 80108b2:	d305      	bcc.n	80108c0 <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 80108b4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80108b8:	f04f 0300 	mov.w	r3, #0
 80108bc:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 80108c0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108c4:	f04f 0000 	mov.w	r0, #0
 80108c8:	f04f 0100 	mov.w	r1, #0
 80108cc:	0219      	lsls	r1, r3, #8
 80108ce:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80108d2:	0210      	lsls	r0, r2, #8
 80108d4:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 80108d8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80108dc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80108e0:	1884      	adds	r4, r0, r2
 80108e2:	60bc      	str	r4, [r7, #8]
 80108e4:	eb41 0303 	adc.w	r3, r1, r3
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80108ee:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80108f2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	da05      	bge.n	8010906 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 80108fa:	f04f 32ff 	mov.w	r2, #4294967295
 80108fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010902:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010906:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 801090a:	2b01      	cmp	r3, #1
 801090c:	d331      	bcc.n	8010972 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801090e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010912:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010916:	f7f0 f9b7 	bl	8000c88 <__aeabi_uldivmod>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010922:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010926:	2200      	movs	r2, #0
 8010928:	663b      	str	r3, [r7, #96]	@ 0x60
 801092a:	667a      	str	r2, [r7, #100]	@ 0x64
 801092c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010930:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010934:	4622      	mov	r2, r4
 8010936:	fb02 f203 	mul.w	r2, r2, r3
 801093a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801093e:	4629      	mov	r1, r5
 8010940:	fb01 f303 	mul.w	r3, r1, r3
 8010944:	441a      	add	r2, r3
 8010946:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801094a:	4621      	mov	r1, r4
 801094c:	fba3 1301 	umull	r1, r3, r3, r1
 8010950:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010954:	460b      	mov	r3, r1
 8010956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801095a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801095e:	18d3      	adds	r3, r2, r3
 8010960:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010964:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8010968:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 801096c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010970:	e030      	b.n	80109d4 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010976:	2200      	movs	r2, #0
 8010978:	65bb      	str	r3, [r7, #88]	@ 0x58
 801097a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801097c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010980:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8010984:	4622      	mov	r2, r4
 8010986:	fb02 f203 	mul.w	r2, r2, r3
 801098a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801098e:	4629      	mov	r1, r5
 8010990:	fb01 f303 	mul.w	r3, r1, r3
 8010994:	441a      	add	r2, r3
 8010996:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801099a:	4621      	mov	r1, r4
 801099c:	fba3 1301 	umull	r1, r3, r3, r1
 80109a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80109a4:	460b      	mov	r3, r1
 80109a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80109aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80109ae:	18d3      	adds	r3, r2, r3
 80109b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80109b4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80109b8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 80109bc:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80109c4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109c8:	f7f0 f95e 	bl	8000c88 <__aeabi_uldivmod>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80109d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80109d8:	2b00      	cmp	r3, #0
 80109da:	da05      	bge.n	80109e8 <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 80109dc:	f04f 32ff 	mov.w	r2, #4294967295
 80109e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80109e4:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80109e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d33d      	bcc.n	8010a6c <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109f0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80109f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80109f8:	f7f0 f946 	bl	8000c88 <__aeabi_uldivmod>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010a04:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010a08:	f04f 0200 	mov.w	r2, #0
 8010a0c:	f04f 0300 	mov.w	r3, #0
 8010a10:	0882      	lsrs	r2, r0, #2
 8010a12:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010a16:	088b      	lsrs	r3, r1, #2
 8010a18:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 8010a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a20:	2200      	movs	r2, #0
 8010a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a24:	657a      	str	r2, [r7, #84]	@ 0x54
 8010a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a2a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010a2e:	4622      	mov	r2, r4
 8010a30:	fb02 f203 	mul.w	r2, r2, r3
 8010a34:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a38:	4629      	mov	r1, r5
 8010a3a:	fb01 f303 	mul.w	r3, r1, r3
 8010a3e:	4413      	add	r3, r2
 8010a40:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010a44:	4621      	mov	r1, r4
 8010a46:	fba2 1201 	umull	r1, r2, r2, r1
 8010a4a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8010a4e:	460a      	mov	r2, r1
 8010a50:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8010a54:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010a58:	4413      	add	r3, r2
 8010a5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010a5e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8010a62:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a66:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010a6a:	e03c      	b.n	8010ae6 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a70:	2200      	movs	r2, #0
 8010a72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a74:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010a76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010a7a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010a7e:	4622      	mov	r2, r4
 8010a80:	fb02 f203 	mul.w	r2, r2, r3
 8010a84:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010a88:	4629      	mov	r1, r5
 8010a8a:	fb01 f303 	mul.w	r3, r1, r3
 8010a8e:	4413      	add	r3, r2
 8010a90:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010a94:	4621      	mov	r1, r4
 8010a96:	fba2 1201 	umull	r1, r2, r2, r1
 8010a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010a9e:	460a      	mov	r2, r1
 8010aa0:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8010aa4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8010aa8:	4413      	add	r3, r2
 8010aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010aae:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8010ab2:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8010ab6:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010aba:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8010abe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ac2:	f7f0 f8e1 	bl	8000c88 <__aeabi_uldivmod>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 8010ace:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010ad2:	f04f 0200 	mov.w	r2, #0
 8010ad6:	f04f 0300 	mov.w	r3, #0
 8010ada:	0882      	lsrs	r2, r0, #2
 8010adc:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010ae0:	088b      	lsrs	r3, r1, #2
 8010ae2:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010ae6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	da05      	bge.n	8010afa <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010aee:	f04f 32ff 	mov.w	r2, #4294967295
 8010af2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010af6:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 8010afa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010afe:	f04f 0200 	mov.w	r2, #0
 8010b02:	f04f 0300 	mov.w	r3, #0
 8010b06:	0882      	lsrs	r2, r0, #2
 8010b08:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010b0c:	088b      	lsrs	r3, r1, #2
 8010b0e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010b12:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010b16:	2b01      	cmp	r3, #1
 8010b18:	d305      	bcc.n	8010b26 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b1e:	f04f 0300 	mov.w	r3, #0
 8010b22:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b30:	f04f 0200 	mov.w	r2, #0
 8010b34:	f04f 0300 	mov.w	r3, #0
 8010b38:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	01cb      	lsls	r3, r1, #7
 8010b40:	4621      	mov	r1, r4
 8010b42:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8010b46:	4621      	mov	r1, r4
 8010b48:	01ca      	lsls	r2, r1, #7
 8010b4a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 8010b4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010b52:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8010b56:	fb03 f202 	mul.w	r2, r3, r2
 8010b5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010b5e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010b62:	fb01 f303 	mul.w	r3, r1, r3
 8010b66:	441a      	add	r2, r3
 8010b68:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8010b6c:	fba3 1303 	umull	r1, r3, r3, r3
 8010b70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010b74:	460b      	mov	r3, r1
 8010b76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b7e:	18d3      	adds	r3, r2, r3
 8010b80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010b84:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8010b88:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 8010b8c:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 8010b90:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010b94:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8010b98:	1884      	adds	r4, r0, r2
 8010b9a:	603c      	str	r4, [r7, #0]
 8010b9c:	eb41 0303 	adc.w	r3, r1, r3
 8010ba0:	607b      	str	r3, [r7, #4]
 8010ba2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010ba6:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010baa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d305      	bcc.n	8010bbe <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8010bb6:	f04f 0300 	mov.w	r3, #0
 8010bba:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010bbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fa fdb9 	bl	800b73a <VL53LX_isqrt>
 8010bc8:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8010bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8010bd6:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 8010bde:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8010be8:	46bd      	mov	sp, r7
 8010bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010bee <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b086      	sub	sp, #24
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	3318      	adds	r3, #24
 8010bfe:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d107      	bne.n	8010c1c <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010c0c:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f88b 	bl	8010d2c <VL53LX_poll_for_range_completion>
 8010c16:	4603      	mov	r3, r0
 8010c18:	75fb      	strb	r3, [r7, #23]
 8010c1a:	e01b      	b.n	8010c54 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010c20:	e011      	b.n	8010c46 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010c22:	f107 030f 	add.w	r3, r7, #15
 8010c26:	4619      	mov	r1, r3
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 f819 	bl	8010c60 <VL53LX_is_new_data_ready>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010c3a:	2101      	movs	r1, #1
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f000 fd65 	bl	801170c <VL53LX_WaitMs>
 8010c42:	4603      	mov	r3, r0
 8010c44:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d103      	bne.n	8010c54 <VL53LX_wait_for_test_completion+0x66>
 8010c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d0e6      	beq.n	8010c22 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3718      	adds	r7, #24
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b086      	sub	sp, #24
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	3318      	adds	r3, #24
 8010c72:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010c74:	2300      	movs	r3, #0
 8010c76:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010c86:	f003 0310 	and.w	r3, r3, #16
 8010c8a:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d102      	bne.n	8010c98 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010c92:	2301      	movs	r3, #1
 8010c94:	75fb      	strb	r3, [r7, #23]
 8010c96:	e001      	b.n	8010c9c <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010c9c:	f107 030e 	add.w	r3, r7, #14
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	2131      	movs	r1, #49	@ 0x31
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 fcab 	bl	8011600 <VL53LX_RdByte>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010cae:	7bbb      	ldrb	r3, [r7, #14]
 8010cb0:	f003 0201 	and.w	r2, r3, #1
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d103      	bne.n	8010cc2 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	701a      	strb	r2, [r3, #0]
 8010cc0:	e002      	b.n	8010cc8 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010cc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b086      	sub	sp, #24
 8010cd8:	af02      	add	r7, sp, #8
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010ce2:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fd20 	bl	801172c <VL53LX_WaitUs>
 8010cec:	4603      	mov	r3, r0
 8010cee:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8010cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d10b      	bne.n	8010d10 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	2301      	movs	r3, #1
 8010d02:	22e5      	movs	r2, #229	@ 0xe5
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 fd28 	bl	801175c <VL53LX_WaitValueMaskEx>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d103      	bne.n	8010d20 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010d18:	2103      	movs	r1, #3
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f7f6 fce4 	bl	80076e8 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b088      	sub	sp, #32
 8010d30:	af02      	add	r7, sp, #8
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010d36:	2300      	movs	r3, #0
 8010d38:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	3318      	adds	r3, #24
 8010d3e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010d40:	2300      	movs	r3, #0
 8010d42:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
	gpio__mux_active_high_hv =
 8010d4e:	f003 0310 	and.w	r3, r3, #16
 8010d52:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d102      	bne.n	8010d60 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	75fb      	strb	r3, [r7, #23]
 8010d5e:	e001      	b.n	8010d64 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010d60:	2300      	movs	r3, #0
 8010d62:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	2201      	movs	r2, #1
 8010d68:	9201      	str	r2, [sp, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	9200      	str	r2, [sp, #0]
 8010d6e:	2231      	movs	r2, #49	@ 0x31
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 fcf2 	bl	801175c <VL53LX_WaitValueMaskEx>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010d7c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3718      	adds	r7, #24
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d8c:	b0ba      	sub	sp, #232	@ 0xe8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
 8010d94:	4618      	mov	r0, r3
 8010d96:	460b      	mov	r3, r1
 8010d98:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 8010da2:	4603      	mov	r3, r0
 8010da4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010da8:	2300      	movs	r3, #0
 8010daa:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	uint8_t row = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
	uint8_t col = 0;
 8010db4:	2300      	movs	r3, #0
 8010db6:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5



	int16_t  bound_l_x = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
	int16_t  bound_r_x = 0;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
	int16_t  bound_u_y = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
	int16_t  bound_d_y = 0;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0

	int64_t xtalk_rate_ll = 0;
 8010dd2:	f04f 0200 	mov.w	r2, #0
 8010dd6:	f04f 0300 	mov.w	r3, #0
 8010dda:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	int64_t xtalk_rate_ur = 0;
 8010dde:	f04f 0200 	mov.w	r2, #0
 8010de2:	f04f 0300 	mov.w	r3, #0
 8010de6:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	int64_t xtalk_avg = 0;
 8010dea:	f04f 0200 	mov.w	r2, #0
 8010dee:	f04f 0300 	mov.w	r3, #0
 8010df2:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8





	if (status == VL53LX_ERROR_NONE) {
 8010df6:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d108      	bne.n	8010e10 <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8010dfe:	f107 02c5 	add.w	r2, r7, #197	@ 0xc5
 8010e02:	f107 01c6 	add.w	r1, r7, #198	@ 0xc6
 8010e06:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7fb f876 	bl	800befc <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010e10:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d162      	bne.n	8010ede <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010e18:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010e1c:	091b      	lsrs	r3, r3, #4
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00d      	beq.n	8010e44 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010e28:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010e32:	095b      	lsrs	r3, r3, #5
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 8010e42:	e00a      	b.n	8010e5a <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010e44:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8010e48:	461a      	mov	r2, r3
 8010e4a:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010e4e:	095b      	lsrs	r3, r3, #5
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	1ad3      	subs	r3, r2, r3
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010e5a:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8010e5e:	461a      	mov	r2, r3
 8010e60:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010e64:	095b      	lsrs	r3, r3, #5
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	4413      	add	r3, r2
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010e70:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010e74:	f003 0301 	and.w	r3, r3, #1
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d011      	beq.n	8010ea0 <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 8010e7c:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8010e80:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010e82:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010e86:	f003 020f 	and.w	r2, r3, #15
 8010e8a:	0fd3      	lsrs	r3, r2, #31
 8010e8c:	4413      	add	r3, r2
 8010e8e:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	1acb      	subs	r3, r1, r3
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	3b01      	subs	r3, #1
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 8010e9e:	e00f      	b.n	8010ec0 <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 8010ea0:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8010ea4:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010ea6:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010eaa:	f003 020f 	and.w	r2, r3, #15
 8010eae:	0fd3      	lsrs	r3, r2, #31
 8010eb0:	4413      	add	r3, r2
 8010eb2:	105b      	asrs	r3, r3, #1
 8010eb4:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	440b      	add	r3, r1
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0

		bound_u_y = (int16_t) row +
 8010ec0:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8010ec4:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010ec6:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8010eca:	f003 020f 	and.w	r2, r3, #15
 8010ece:	0fd3      	lsrs	r3, r2, #31
 8010ed0:	4413      	add	r3, r2
 8010ed2:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	440b      	add	r3, r1
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010ede:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d133      	bne.n	8010f4e <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010ee6:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8010ef0:	4413      	add	r3, r2
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	3b0f      	subs	r3, #15
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010f00:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8010f0a:	4413      	add	r3, r2
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	3b0f      	subs	r3, #15
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010f1a:	f997 3108 	ldrsb.w	r3, [r7, #264]	@ 0x108
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8010f24:	4413      	add	r3, r2
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	3b0f      	subs	r3, #15
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010f34:	f997 3108 	ldrsb.w	r3, [r7, #264]	@ 0x108
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8010f3e:	4413      	add	r3, r2
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	005b      	lsls	r3, r3, #1
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	3b0f      	subs	r3, #15
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010f4e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f040 812b 	bne.w	80111ae <VL53LX_f_032+0x426>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010f58:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	@ 0xe6
 8010f5c:	17da      	asrs	r2, r3, #31
 8010f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010f62:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010f66:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	@ 0xba
 8010f6a:	17da      	asrs	r2, r3, #31
 8010f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010f70:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010f74:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8010f78:	460b      	mov	r3, r1
 8010f7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8010f7e:	fb02 f203 	mul.w	r2, r2, r3
 8010f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010f86:	e9c7 012a 	strd	r0, r1, [r7, #168]	@ 0xa8
 8010f8a:	4601      	mov	r1, r0
 8010f8c:	fb01 f303 	mul.w	r3, r1, r3
 8010f90:	4413      	add	r3, r2
 8010f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010f96:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8010f9a:	fba2 4501 	umull	r4, r5, r2, r1
 8010f9e:	442b      	add	r3, r5
 8010fa0:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010fa2:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8010fa6:	17da      	asrs	r2, r3, #31
 8010fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010fac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
					((int64_t)ygradient));
 8010fb0:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8010fb4:	17da      	asrs	r2, r3, #31
 8010fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010fbe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010fc8:	fb02 f203 	mul.w	r2, r2, r3
 8010fcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010fd0:	e9c7 0126 	strd	r0, r1, [r7, #152]	@ 0x98
 8010fd4:	4601      	mov	r1, r0
 8010fd6:	fb01 f303 	mul.w	r3, r1, r3
 8010fda:	4413      	add	r3, r2
 8010fdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010fe0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010fe4:	fba2 ab01 	umull	sl, fp, r2, r1
 8010fe8:	445b      	add	r3, fp
 8010fea:	469b      	mov	fp, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010fec:	eb14 030a 	adds.w	r3, r4, sl
 8010ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ff2:	eb45 030b 	adc.w	r3, r5, fp
 8010ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ff8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8010ffc:	e9c7 3436 	strd	r3, r4, [r7, #216]	@ 0xd8
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8011000:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8011004:	1c51      	adds	r1, r2, #1
 8011006:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 801100a:	f143 0300 	adc.w	r3, r3, #0
 801100e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011012:	f04f 0200 	mov.w	r2, #0
 8011016:	f04f 0300 	mov.w	r3, #0
 801101a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801101e:	4629      	mov	r1, r5
 8011020:	0fca      	lsrs	r2, r1, #31
 8011022:	2300      	movs	r3, #0
 8011024:	4621      	mov	r1, r4
 8011026:	1851      	adds	r1, r2, r1
 8011028:	62b9      	str	r1, [r7, #40]	@ 0x28
 801102a:	4629      	mov	r1, r5
 801102c:	eb43 0101 	adc.w	r1, r3, r1
 8011030:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011032:	f04f 0200 	mov.w	r2, #0
 8011036:	f04f 0300 	mov.w	r3, #0
 801103a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801103e:	4621      	mov	r1, r4
 8011040:	084a      	lsrs	r2, r1, #1
 8011042:	4629      	mov	r1, r5
 8011044:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011048:	4629      	mov	r1, r5
 801104a:	104b      	asrs	r3, r1, #1
 801104c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8011050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011054:	2200      	movs	r2, #0
 8011056:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011058:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801105a:	f04f 0000 	mov.w	r0, #0
 801105e:	f04f 0100 	mov.w	r1, #0
 8011062:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8011066:	462b      	mov	r3, r5
 8011068:	0099      	lsls	r1, r3, #2
 801106a:	4623      	mov	r3, r4
 801106c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8011070:	4623      	mov	r3, r4
 8011072:	0098      	lsls	r0, r3, #2
 8011074:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8011078:	1814      	adds	r4, r2, r0
 801107a:	623c      	str	r4, [r7, #32]
 801107c:	414b      	adcs	r3, r1
 801107e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011080:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011084:	e9c7 3436 	strd	r3, r4, [r7, #216]	@ 0xd8

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011088:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 801108c:	17da      	asrs	r2, r3, #31
 801108e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011090:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011092:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	@ 0xba
 8011096:	17da      	asrs	r2, r3, #31
 8011098:	66bb      	str	r3, [r7, #104]	@ 0x68
 801109a:	66fa      	str	r2, [r7, #108]	@ 0x6c
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801109c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80110a0:	462b      	mov	r3, r5
 80110a2:	e9d7 ab1a 	ldrd	sl, fp, [r7, #104]	@ 0x68
 80110a6:	4652      	mov	r2, sl
 80110a8:	fb02 f203 	mul.w	r2, r2, r3
 80110ac:	465b      	mov	r3, fp
 80110ae:	4621      	mov	r1, r4
 80110b0:	fb01 f303 	mul.w	r3, r1, r3
 80110b4:	4413      	add	r3, r2
 80110b6:	4622      	mov	r2, r4
 80110b8:	4651      	mov	r1, sl
 80110ba:	fba2 8901 	umull	r8, r9, r2, r1
 80110be:	444b      	add	r3, r9
 80110c0:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110c2:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	@ 0xe2
 80110c6:	17da      	asrs	r2, r3, #31
 80110c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80110ca:	667a      	str	r2, [r7, #100]	@ 0x64
			((int64_t)ygradient));
 80110cc:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80110d0:	17da      	asrs	r2, r3, #31
 80110d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80110d4:	65fa      	str	r2, [r7, #92]	@ 0x5c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80110d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80110da:	462b      	mov	r3, r5
 80110dc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80110e0:	4652      	mov	r2, sl
 80110e2:	fb02 f203 	mul.w	r2, r2, r3
 80110e6:	465b      	mov	r3, fp
 80110e8:	4621      	mov	r1, r4
 80110ea:	fb01 f303 	mul.w	r3, r1, r3
 80110ee:	4413      	add	r3, r2
 80110f0:	4622      	mov	r2, r4
 80110f2:	4651      	mov	r1, sl
 80110f4:	fba2 1201 	umull	r1, r2, r2, r1
 80110f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80110fc:	460a      	mov	r2, r1
 80110fe:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8011102:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011106:	4413      	add	r3, r2
 8011108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801110c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8011110:	460b      	mov	r3, r1
 8011112:	eb18 0303 	adds.w	r3, r8, r3
 8011116:	61bb      	str	r3, [r7, #24]
 8011118:	4613      	mov	r3, r2
 801111a:	eb49 0303 	adc.w	r3, r9, r3
 801111e:	61fb      	str	r3, [r7, #28]
 8011120:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011124:	e9c7 3434 	strd	r3, r4, [r7, #208]	@ 0xd0
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011128:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 801112c:	1c51      	adds	r1, r2, #1
 801112e:	6539      	str	r1, [r7, #80]	@ 0x50
 8011130:	f143 0300 	adc.w	r3, r3, #0
 8011134:	657b      	str	r3, [r7, #84]	@ 0x54
 8011136:	f04f 0200 	mov.w	r2, #0
 801113a:	f04f 0300 	mov.w	r3, #0
 801113e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8011142:	4629      	mov	r1, r5
 8011144:	0fca      	lsrs	r2, r1, #31
 8011146:	2300      	movs	r3, #0
 8011148:	4621      	mov	r1, r4
 801114a:	1851      	adds	r1, r2, r1
 801114c:	6139      	str	r1, [r7, #16]
 801114e:	4629      	mov	r1, r5
 8011150:	eb43 0101 	adc.w	r1, r3, r1
 8011154:	6179      	str	r1, [r7, #20]
 8011156:	f04f 0200 	mov.w	r2, #0
 801115a:	f04f 0300 	mov.w	r3, #0
 801115e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011162:	4621      	mov	r1, r4
 8011164:	084a      	lsrs	r2, r1, #1
 8011166:	4629      	mov	r1, r5
 8011168:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801116c:	4629      	mov	r1, r5
 801116e:	104b      	asrs	r3, r1, #1
 8011170:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8011174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011178:	2200      	movs	r2, #0
 801117a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801117c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801117e:	f04f 0200 	mov.w	r2, #0
 8011182:	f04f 0300 	mov.w	r3, #0
 8011186:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 801118a:	4629      	mov	r1, r5
 801118c:	008b      	lsls	r3, r1, #2
 801118e:	4621      	mov	r1, r4
 8011190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011194:	4621      	mov	r1, r4
 8011196:	008a      	lsls	r2, r1, #2
 8011198:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 801119c:	1884      	adds	r4, r0, r2
 801119e:	60bc      	str	r4, [r7, #8]
 80111a0:	eb41 0303 	adc.w	r3, r1, r3
 80111a4:	60fb      	str	r3, [r7, #12]
 80111a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80111aa:	e9c7 3434 	strd	r3, r4, [r7, #208]	@ 0xd0
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80111ae:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d130      	bne.n	8011218 <VL53LX_f_032+0x490>
		xtalk_avg = do_division_s(
 80111b6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80111ba:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80111be:	1884      	adds	r4, r0, r2
 80111c0:	643c      	str	r4, [r7, #64]	@ 0x40
 80111c2:	eb41 0303 	adc.w	r3, r1, r3
 80111c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80111c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80111cc:	460b      	mov	r3, r1
 80111ce:	3301      	adds	r3, #1
 80111d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80111d2:	4613      	mov	r3, r2
 80111d4:	f143 0300 	adc.w	r3, r3, #0
 80111d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80111da:	f04f 0200 	mov.w	r2, #0
 80111de:	f04f 0300 	mov.w	r3, #0
 80111e2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80111e6:	4629      	mov	r1, r5
 80111e8:	0fca      	lsrs	r2, r1, #31
 80111ea:	2300      	movs	r3, #0
 80111ec:	4621      	mov	r1, r4
 80111ee:	1851      	adds	r1, r2, r1
 80111f0:	6039      	str	r1, [r7, #0]
 80111f2:	4629      	mov	r1, r5
 80111f4:	eb43 0101 	adc.w	r1, r3, r1
 80111f8:	6079      	str	r1, [r7, #4]
 80111fa:	f04f 0200 	mov.w	r2, #0
 80111fe:	f04f 0300 	mov.w	r3, #0
 8011202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011206:	4621      	mov	r1, r4
 8011208:	084a      	lsrs	r2, r1, #1
 801120a:	4629      	mov	r1, r5
 801120c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011210:	4629      	mov	r1, r5
 8011212:	104b      	asrs	r3, r1, #1
 8011214:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8011218:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 801121c:	2b00      	cmp	r3, #0
 801121e:	d109      	bne.n	8011234 <VL53LX_f_032+0x4ac>
		if (xtalk_avg < 0)
 8011220:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8011224:	2b00      	cmp	r3, #0
 8011226:	da05      	bge.n	8011234 <VL53LX_f_032+0x4ac>
			xtalk_avg = 0;
 8011228:	f04f 0200 	mov.w	r2, #0
 801122c:	f04f 0300 	mov.w	r3, #0
 8011230:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8011234:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011238:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801123c:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 801123e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 8011242:	4618      	mov	r0, r3
 8011244:	37e8      	adds	r7, #232	@ 0xe8
 8011246:	46bd      	mov	sp, r7
 8011248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801124c <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 801124c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011250:	b09a      	sub	sp, #104	@ 0x68
 8011252:	af00      	add	r7, sp, #0
 8011254:	6478      	str	r0, [r7, #68]	@ 0x44
 8011256:	6439      	str	r1, [r7, #64]	@ 0x40
 8011258:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801125a:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 801125c:	2300      	movs	r3, #0
 801125e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8011262:	f04f 0200 	mov.w	r2, #0
 8011266:	f04f 0300 	mov.w	r3, #0
 801126a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 801126e:	f04f 0200 	mov.w	r2, #0
 8011272:	f04f 0300 	mov.w	r3, #0
 8011276:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 801127a:	f04f 0200 	mov.w	r2, #0
 801127e:	f04f 0300 	mov.w	r3, #0
 8011282:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 801128c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801128e:	2200      	movs	r2, #0
 8011290:	633b      	str	r3, [r7, #48]	@ 0x30
 8011292:	637a      	str	r2, [r7, #52]	@ 0x34
 8011294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801129a:	2200      	movs	r2, #0
 801129c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801129e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80112a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80112a4:	460b      	mov	r3, r1
 80112a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112a8:	fb02 f203 	mul.w	r2, r2, r3
 80112ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ae:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80112b2:	4601      	mov	r1, r0
 80112b4:	fb01 f303 	mul.w	r3, r1, r3
 80112b8:	4413      	add	r3, r2
 80112ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112be:	fba2 4501 	umull	r4, r5, r2, r1
 80112c2:	442b      	add	r3, r5
 80112c4:	461d      	mov	r5, r3
 80112c6:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 80112ca:	623b      	str	r3, [r7, #32]
 80112cc:	f145 0300 	adc.w	r3, r5, #0
 80112d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80112d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80112d6:	f04f 0300 	mov.w	r3, #0
 80112da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80112de:	f7ef fcd3 	bl	8000c88 <__aeabi_uldivmod>
 80112e2:	4602      	mov	r2, r0
 80112e4:	460b      	mov	r3, r1
 80112e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80112ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112ec:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	2200      	movs	r2, #0
 80112f4:	61bb      	str	r3, [r7, #24]
 80112f6:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80112f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112fa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80112fe:	4622      	mov	r2, r4
 8011300:	fb02 f203 	mul.w	r2, r2, r3
 8011304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011306:	4629      	mov	r1, r5
 8011308:	fb01 f303 	mul.w	r3, r1, r3
 801130c:	4413      	add	r3, r2
 801130e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011310:	4621      	mov	r1, r4
 8011312:	fba2 ab01 	umull	sl, fp, r2, r1
 8011316:	445b      	add	r3, fp
 8011318:	469b      	mov	fp, r3
 801131a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 801131e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011322:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8011326:	f04f 0200 	mov.w	r2, #0
 801132a:	f04f 0300 	mov.w	r3, #0
 801132e:	0a02      	lsrs	r2, r0, #8
 8011330:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011334:	0a0b      	lsrs	r3, r1, #8
 8011336:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801133a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801133e:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 8011342:	6139      	str	r1, [r7, #16]
 8011344:	f143 0300 	adc.w	r3, r3, #0
 8011348:	617b      	str	r3, [r7, #20]
 801134a:	f04f 0200 	mov.w	r2, #0
 801134e:	f04f 0300 	mov.w	r3, #0
 8011352:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011356:	4621      	mov	r1, r4
 8011358:	0aca      	lsrs	r2, r1, #11
 801135a:	4629      	mov	r1, r5
 801135c:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8011360:	4629      	mov	r1, r5
 8011362:	0acb      	lsrs	r3, r1, #11
 8011364:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8011368:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801136c:	2b01      	cmp	r3, #1
 801136e:	d305      	bcc.n	801137c <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8011370:	f04f 32ff 	mov.w	r2, #4294967295
 8011374:	f04f 0300 	mov.w	r3, #0
 8011378:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801137c:	2300      	movs	r3, #0
 801137e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011382:	e041      	b.n	8011408 <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8011384:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801138a:	3302      	adds	r3, #2
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	4413      	add	r3, r2
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	60bb      	str	r3, [r7, #8]
 8011396:	60fa      	str	r2, [r7, #12]
 8011398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801139a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801139e:	4622      	mov	r2, r4
 80113a0:	fb02 f203 	mul.w	r2, r2, r3
 80113a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113a6:	4629      	mov	r1, r5
 80113a8:	fb01 f303 	mul.w	r3, r1, r3
 80113ac:	4413      	add	r3, r2
 80113ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80113b0:	4621      	mov	r1, r4
 80113b2:	fba2 8901 	umull	r8, r9, r2, r1
 80113b6:	444b      	add	r3, r9
 80113b8:	4699      	mov	r9, r3
 80113ba:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 80113be:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80113c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80113c6:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 80113ca:	6039      	str	r1, [r7, #0]
 80113cc:	f143 0300 	adc.w	r3, r3, #0
 80113d0:	607b      	str	r3, [r7, #4]
 80113d2:	f04f 0200 	mov.w	r2, #0
 80113d6:	f04f 0300 	mov.w	r3, #0
 80113da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80113de:	4621      	mov	r1, r4
 80113e0:	0a8a      	lsrs	r2, r1, #10
 80113e2:	4629      	mov	r1, r5
 80113e4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80113e8:	4629      	mov	r1, r5
 80113ea:	0a8b      	lsrs	r3, r1, #10
 80113ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80113f0:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80113f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80113f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f8:	3206      	adds	r2, #6
 80113fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80113fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011402:	3301      	adds	r3, #1
 8011404:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801140a:	7a9b      	ldrb	r3, [r3, #10]
 801140c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011410:	429a      	cmp	r2, r3
 8011412:	d3b7      	bcc.n	8011384 <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8011414:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 8011418:	4618      	mov	r0, r3
 801141a:	3768      	adds	r7, #104	@ 0x68
 801141c:	46bd      	mov	sp, r7
 801141e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011422 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011422:	b580      	push	{r7, lr}
 8011424:	b084      	sub	sp, #16
 8011426:	af00      	add	r7, sp, #0
 8011428:	60f8      	str	r0, [r7, #12]
 801142a:	60b9      	str	r1, [r7, #8]
 801142c:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	8910      	ldrh	r0, [r2, #8]
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	b292      	uxth	r2, r2
 801143a:	68b9      	ldr	r1, [r7, #8]
 801143c:	4798      	blx	r3
 801143e:	4603      	mov	r3, r0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	691b      	ldr	r3, [r3, #16]
 8011458:	68fa      	ldr	r2, [r7, #12]
 801145a:	8910      	ldrh	r0, [r2, #8]
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	b292      	uxth	r2, r2
 8011460:	68b9      	ldr	r1, [r7, #8]
 8011462:	4798      	blx	r3
 8011464:	4603      	mov	r3, r0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
	...

08011470 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	607a      	str	r2, [r7, #4]
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	460b      	mov	r3, r1
 801147e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011480:	2300      	movs	r3, #0
 8011482:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	2bff      	cmp	r3, #255	@ 0xff
 8011488:	d902      	bls.n	8011490 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 801148a:	f06f 0303 	mvn.w	r3, #3
 801148e:	e01d      	b.n	80114cc <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8011490:	897b      	ldrh	r3, [r7, #10]
 8011492:	0a1b      	lsrs	r3, r3, #8
 8011494:	b29b      	uxth	r3, r3
 8011496:	b2da      	uxtb	r2, r3
 8011498:	4b0e      	ldr	r3, [pc, #56]	@ (80114d4 <VL53LX_WriteMulti+0x64>)
 801149a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801149c:	897b      	ldrh	r3, [r7, #10]
 801149e:	b2da      	uxtb	r2, r3
 80114a0:	4b0c      	ldr	r3, [pc, #48]	@ (80114d4 <VL53LX_WriteMulti+0x64>)
 80114a2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	480b      	ldr	r0, [pc, #44]	@ (80114d8 <VL53LX_WriteMulti+0x68>)
 80114aa:	f004 fab8 	bl	8015a1e <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	3302      	adds	r3, #2
 80114b2:	461a      	mov	r2, r3
 80114b4:	4907      	ldr	r1, [pc, #28]	@ (80114d4 <VL53LX_WriteMulti+0x64>)
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f7ff ffb3 	bl	8011422 <_I2CWrite>
 80114bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80114c4:	23f3      	movs	r3, #243	@ 0xf3
 80114c6:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 80114c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3718      	adds	r7, #24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	2000282c 	.word	0x2000282c
 80114d8:	2000282e 	.word	0x2000282e

080114dc <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	607a      	str	r2, [r7, #4]
 80114e6:	603b      	str	r3, [r7, #0]
 80114e8:	460b      	mov	r3, r1
 80114ea:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80114ec:	2300      	movs	r3, #0
 80114ee:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80114f0:	897b      	ldrh	r3, [r7, #10]
 80114f2:	0a1b      	lsrs	r3, r3, #8
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	4b12      	ldr	r3, [pc, #72]	@ (8011544 <VL53LX_ReadMulti+0x68>)
 80114fa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80114fc:	897b      	ldrh	r3, [r7, #10]
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	4b10      	ldr	r3, [pc, #64]	@ (8011544 <VL53LX_ReadMulti+0x68>)
 8011502:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011504:	2202      	movs	r2, #2
 8011506:	490f      	ldr	r1, [pc, #60]	@ (8011544 <VL53LX_ReadMulti+0x68>)
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f7ff ff8a 	bl	8011422 <_I2CWrite>
 801150e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d002      	beq.n	801151c <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011516:	23f3      	movs	r3, #243	@ 0xf3
 8011518:	75fb      	strb	r3, [r7, #23]
        goto done;
 801151a:	e00c      	b.n	8011536 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	6879      	ldr	r1, [r7, #4]
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7ff ff91 	bl	8011448 <_I2CRead>
 8011526:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d002      	beq.n	8011534 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801152e:	23f3      	movs	r3, #243	@ 0xf3
 8011530:	75fb      	strb	r3, [r7, #23]
 8011532:	e000      	b.n	8011536 <VL53LX_ReadMulti+0x5a>
    }
done:
 8011534:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801153a:	4618      	mov	r0, r3
 801153c:	3718      	adds	r7, #24
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	2000282c 	.word	0x2000282c

08011548 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	460b      	mov	r3, r1
 8011552:	807b      	strh	r3, [r7, #2]
 8011554:	4613      	mov	r3, r2
 8011556:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801155c:	887b      	ldrh	r3, [r7, #2]
 801155e:	0a1b      	lsrs	r3, r3, #8
 8011560:	b29b      	uxth	r3, r3
 8011562:	b2da      	uxtb	r2, r3
 8011564:	4b0c      	ldr	r3, [pc, #48]	@ (8011598 <VL53LX_WrByte+0x50>)
 8011566:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011568:	887b      	ldrh	r3, [r7, #2]
 801156a:	b2da      	uxtb	r2, r3
 801156c:	4b0a      	ldr	r3, [pc, #40]	@ (8011598 <VL53LX_WrByte+0x50>)
 801156e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011570:	4a09      	ldr	r2, [pc, #36]	@ (8011598 <VL53LX_WrByte+0x50>)
 8011572:	787b      	ldrb	r3, [r7, #1]
 8011574:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8011576:	2203      	movs	r2, #3
 8011578:	4907      	ldr	r1, [pc, #28]	@ (8011598 <VL53LX_WrByte+0x50>)
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f7ff ff51 	bl	8011422 <_I2CWrite>
 8011580:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011588:	23f3      	movs	r3, #243	@ 0xf3
 801158a:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 801158c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011590:	4618      	mov	r0, r3
 8011592:	3710      	adds	r7, #16
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	2000282c 	.word	0x2000282c

0801159c <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	460b      	mov	r3, r1
 80115a6:	807b      	strh	r3, [r7, #2]
 80115a8:	4613      	mov	r3, r2
 80115aa:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80115ac:	2300      	movs	r3, #0
 80115ae:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80115b0:	887b      	ldrh	r3, [r7, #2]
 80115b2:	0a1b      	lsrs	r3, r3, #8
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	4b10      	ldr	r3, [pc, #64]	@ (80115fc <VL53LX_WrWord+0x60>)
 80115ba:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80115bc:	887b      	ldrh	r3, [r7, #2]
 80115be:	b2da      	uxtb	r2, r3
 80115c0:	4b0e      	ldr	r3, [pc, #56]	@ (80115fc <VL53LX_WrWord+0x60>)
 80115c2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80115c4:	883b      	ldrh	r3, [r7, #0]
 80115c6:	0a1b      	lsrs	r3, r3, #8
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	4b0b      	ldr	r3, [pc, #44]	@ (80115fc <VL53LX_WrWord+0x60>)
 80115ce:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80115d0:	883b      	ldrh	r3, [r7, #0]
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	4b09      	ldr	r3, [pc, #36]	@ (80115fc <VL53LX_WrWord+0x60>)
 80115d6:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80115d8:	2204      	movs	r2, #4
 80115da:	4908      	ldr	r1, [pc, #32]	@ (80115fc <VL53LX_WrWord+0x60>)
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f7ff ff20 	bl	8011422 <_I2CWrite>
 80115e2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80115ea:	23f3      	movs	r3, #243	@ 0xf3
 80115ec:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80115ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	2000282c 	.word	0x2000282c

08011600 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	460b      	mov	r3, r1
 801160a:	607a      	str	r2, [r7, #4]
 801160c:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801160e:	2300      	movs	r3, #0
 8011610:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8011612:	897b      	ldrh	r3, [r7, #10]
 8011614:	0a1b      	lsrs	r3, r3, #8
 8011616:	b29b      	uxth	r3, r3
 8011618:	b2da      	uxtb	r2, r3
 801161a:	4b12      	ldr	r3, [pc, #72]	@ (8011664 <VL53LX_RdByte+0x64>)
 801161c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801161e:	897b      	ldrh	r3, [r7, #10]
 8011620:	b2da      	uxtb	r2, r3
 8011622:	4b10      	ldr	r3, [pc, #64]	@ (8011664 <VL53LX_RdByte+0x64>)
 8011624:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011626:	2202      	movs	r2, #2
 8011628:	490e      	ldr	r1, [pc, #56]	@ (8011664 <VL53LX_RdByte+0x64>)
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f7ff fef9 	bl	8011422 <_I2CWrite>
 8011630:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011638:	23f3      	movs	r3, #243	@ 0xf3
 801163a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801163c:	e00c      	b.n	8011658 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801163e:	2201      	movs	r2, #1
 8011640:	6879      	ldr	r1, [r7, #4]
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f7ff ff00 	bl	8011448 <_I2CRead>
 8011648:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011650:	23f3      	movs	r3, #243	@ 0xf3
 8011652:	75fb      	strb	r3, [r7, #23]
 8011654:	e000      	b.n	8011658 <VL53LX_RdByte+0x58>
    }
done:
 8011656:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3718      	adds	r7, #24
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	2000282c 	.word	0x2000282c

08011668 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	460b      	mov	r3, r1
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011676:	2300      	movs	r3, #0
 8011678:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801167a:	897b      	ldrh	r3, [r7, #10]
 801167c:	0a1b      	lsrs	r3, r3, #8
 801167e:	b29b      	uxth	r3, r3
 8011680:	b2da      	uxtb	r2, r3
 8011682:	4b17      	ldr	r3, [pc, #92]	@ (80116e0 <VL53LX_RdWord+0x78>)
 8011684:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011686:	897b      	ldrh	r3, [r7, #10]
 8011688:	b2da      	uxtb	r2, r3
 801168a:	4b15      	ldr	r3, [pc, #84]	@ (80116e0 <VL53LX_RdWord+0x78>)
 801168c:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801168e:	2202      	movs	r2, #2
 8011690:	4913      	ldr	r1, [pc, #76]	@ (80116e0 <VL53LX_RdWord+0x78>)
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff fec5 	bl	8011422 <_I2CWrite>
 8011698:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d002      	beq.n	80116a6 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116a0:	23f3      	movs	r3, #243	@ 0xf3
 80116a2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80116a4:	e015      	b.n	80116d2 <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80116a6:	2202      	movs	r2, #2
 80116a8:	490d      	ldr	r1, [pc, #52]	@ (80116e0 <VL53LX_RdWord+0x78>)
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f7ff fecc 	bl	8011448 <_I2CRead>
 80116b0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d002      	beq.n	80116be <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80116b8:	23f3      	movs	r3, #243	@ 0xf3
 80116ba:	75fb      	strb	r3, [r7, #23]
        goto done;
 80116bc:	e009      	b.n	80116d2 <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80116be:	4b08      	ldr	r3, [pc, #32]	@ (80116e0 <VL53LX_RdWord+0x78>)
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	021b      	lsls	r3, r3, #8
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	4a06      	ldr	r2, [pc, #24]	@ (80116e0 <VL53LX_RdWord+0x78>)
 80116c8:	7852      	ldrb	r2, [r2, #1]
 80116ca:	4413      	add	r3, r2
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80116d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3718      	adds	r7, #24
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	2000282c 	.word	0x2000282c

080116e4 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 80116ee:	2300      	movs	r3, #0
 80116f0:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	4798      	blx	r3
 80116f8:	4603      	mov	r3, r0
 80116fa:	461a      	mov	r2, r3
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3710      	adds	r7, #16
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	4619      	mov	r1, r3
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 f8d2 	bl	80118c4 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011720:	2300      	movs	r3, #0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
	...

0801172c <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	4a07      	ldr	r2, [pc, #28]	@ (8011758 <VL53LX_WaitUs+0x2c>)
 801173a:	fb82 1203 	smull	r1, r2, r2, r3
 801173e:	1192      	asrs	r2, r2, #6
 8011740:	17db      	asrs	r3, r3, #31
 8011742:	1ad3      	subs	r3, r2, r3
 8011744:	4619      	mov	r1, r3
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 f8bc 	bl	80118c4 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 801174c:	2300      	movs	r3, #0
}
 801174e:	4618      	mov	r0, r3
 8011750:	3708      	adds	r7, #8
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	10624dd3 	.word	0x10624dd3

0801175c <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 801175c:	b590      	push	{r4, r7, lr}
 801175e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8011762:	af00      	add	r7, sp, #0
 8011764:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8011768:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 801176c:	6020      	str	r0, [r4, #0]
 801176e:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8011772:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8011776:	6001      	str	r1, [r0, #0]
 8011778:	4619      	mov	r1, r3
 801177a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801177e:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8011782:	801a      	strh	r2, [r3, #0]
 8011784:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011788:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 801178c:	460a      	mov	r2, r1
 801178e:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011790:	2300      	movs	r3, #0
 8011792:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8011796:	2300      	movs	r3, #0
 8011798:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80117b4:	f107 0310 	add.w	r3, r7, #16
 80117b8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80117bc:	4940      	ldr	r1, [pc, #256]	@ (80118c0 <VL53LX_WaitValueMaskEx+0x164>)
 80117be:	4618      	mov	r0, r3
 80117c0:	f004 f8a2 	bl	8015908 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 80117c4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80117c8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80117d0:	4611      	mov	r1, r2
 80117d2:	6818      	ldr	r0, [r3, #0]
 80117d4:	f7ff ff86 	bl	80116e4 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 80117d8:	e04e      	b.n	8011878 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 80117da:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d110      	bne.n	8011804 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 80117e2:	f207 2213 	addw	r2, r7, #531	@ 0x213
 80117e6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117ea:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 80117ee:	8819      	ldrh	r1, [r3, #0]
 80117f0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80117f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80117f8:	6818      	ldr	r0, [r3, #0]
 80117fa:	f7ff ff01 	bl	8011600 <VL53LX_RdByte>
 80117fe:	4603      	mov	r3, r0
 8011800:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011804:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8011808:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801180c:	4013      	ands	r3, r2
 801180e:	b2db      	uxtb	r3, r3
 8011810:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8011814:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8011818:	7812      	ldrb	r2, [r2, #0]
 801181a:	429a      	cmp	r2, r3
 801181c:	d102      	bne.n	8011824 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 801181e:	2301      	movs	r3, #1
 8011820:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011824:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011828:	2b00      	cmp	r3, #0
 801182a:	d114      	bne.n	8011856 <VL53LX_WaitValueMaskEx+0xfa>
 801182c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011830:	2b00      	cmp	r3, #0
 8011832:	d110      	bne.n	8011856 <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 8011834:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00c      	beq.n	8011856 <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 801183c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8011840:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011844:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011848:	4611      	mov	r1, r2
 801184a:	6818      	ldr	r0, [r3, #0]
 801184c:	f7ff ff5e 	bl	801170c <VL53LX_WaitMs>
 8011850:	4603      	mov	r3, r0
 8011852:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011856:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801185a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801185e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011862:	4611      	mov	r1, r2
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f7ff ff3d 	bl	80116e4 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801186a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801186e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8011878:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801187c:	2b00      	cmp	r3, #0
 801187e:	d10c      	bne.n	801189a <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 8011880:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8011884:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8011888:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	429a      	cmp	r2, r3
 8011890:	d203      	bcs.n	801189a <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8011892:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8011896:	2b00      	cmp	r3, #0
 8011898:	d09f      	beq.n	80117da <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 801189a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d106      	bne.n	80118b0 <VL53LX_WaitValueMaskEx+0x154>
 80118a2:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d102      	bne.n	80118b0 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80118aa:	23f9      	movs	r3, #249	@ 0xf9
 80118ac:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 80118b0:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd90      	pop	{r4, r7, pc}
 80118be:	bf00      	nop
 80118c0:	080176d4 	.word	0x080176d4

080118c4 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	4798      	blx	r3
 80118d4:	4603      	mov	r3, r0
 80118d6:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80118d8:	bf00      	nop
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	4798      	blx	r3
 80118e0:	4603      	mov	r3, r0
 80118e2:	461a      	mov	r2, r3
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	683a      	ldr	r2, [r7, #0]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d8f5      	bhi.n	80118da <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b08c      	sub	sp, #48	@ 0x30
 80118fc:	af06      	add	r7, sp, #24
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
 8011904:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011906:	2300      	movs	r3, #0
 8011908:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 801190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190c:	9304      	str	r3, [sp, #16]
 801190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011910:	9303      	str	r3, [sp, #12]
 8011912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011914:	9302      	str	r3, [sp, #8]
 8011916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011918:	9301      	str	r3, [sp, #4]
 801191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	6a3b      	ldr	r3, [r7, #32]
 8011920:	683a      	ldr	r2, [r7, #0]
 8011922:	6879      	ldr	r1, [r7, #4]
 8011924:	68b8      	ldr	r0, [r7, #8]
 8011926:	f7fd f808 	bl	800e93a <VL53LX_hist_process_data>
 801192a:	4603      	mov	r3, r0
 801192c:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 801192e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3718      	adds	r7, #24
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <VL53L4CX_RegisterBusIO>:
  * @param pObj    vl53l4cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_RegisterBusIO(VL53L4CX_Object_t *pObj, VL53L4CX_IO_t *pIO)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d103      	bne.n	8011952 <VL53L4CX_RegisterBusIO+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 801194a:	f06f 0301 	mvn.w	r3, #1
 801194e:	60fb      	str	r3, [r7, #12]
 8011950:	e023      	b.n	801199a <VL53L4CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	685a      	ldr	r2, [r3, #4]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	891a      	ldrh	r2, [r3, #8]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	68da      	ldr	r2, [r3, #12]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	691a      	ldr	r2, [r3, #16]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	695a      	ldr	r2, [r3, #20]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d004      	beq.n	8011994 <VL53L4CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4798      	blx	r3
 8011990:	60f8      	str	r0, [r7, #12]
 8011992:	e002      	b.n	801199a <VL53L4CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L4CX_ERROR;
 8011994:	f04f 33ff 	mov.w	r3, #4294967295
 8011998:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801199a:	68fb      	ldr	r3, [r7, #12]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3710      	adds	r7, #16
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <VL53L4CX_Init>:
  * @brief Initializes the vl53l4cx.
  * @param pObj    vl53l4cx context object.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Init(VL53L4CX_Object_t *pObj)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80119b2:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d003      	beq.n	80119c2 <VL53L4CX_Init+0x1e>
  {
    ret =  VL53L4CX_ERROR;
 80119ba:	f04f 33ff 	mov.w	r3, #4294967295
 80119be:	60fb      	str	r3, [r7, #12]
 80119c0:	e043      	b.n	8011a4a <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7f0 f858 	bl	8001a78 <VL53LX_WaitDeviceBooted>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d003      	beq.n	80119d6 <VL53L4CX_Init+0x32>
  {
    ret =  VL53L4CX_ERROR;
 80119ce:	f04f 33ff 	mov.w	r3, #4294967295
 80119d2:	60fb      	str	r3, [r7, #12]
 80119d4:	e039      	b.n	8011a4a <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7ef fff3 	bl	80019c2 <VL53LX_DataInit>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d003      	beq.n	80119ea <VL53L4CX_Init+0x46>
  {
    ret = VL53L4CX_ERROR;
 80119e2:	f04f 33ff 	mov.w	r3, #4294967295
 80119e6:	60fb      	str	r3, [r7, #12]
 80119e8:	e02f      	b.n	8011a4a <VL53L4CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7f0 fedc 	bl	80027a8 <VL53LX_PerformRefSpadManagement>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d003      	beq.n	80119fe <VL53L4CX_Init+0x5a>
  {
    ret = VL53L4CX_ERROR;
 80119f6:	f04f 33ff 	mov.w	r3, #4294967295
 80119fa:	60fb      	str	r3, [r7, #12]
 80119fc:	e025      	b.n	8011a4a <VL53L4CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a04:	2200      	movs	r2, #0
 8011a06:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    pObj->IsBlocking = 0;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a10:	2200      	movs	r2, #0
 8011a12:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    pObj->IsContinuous = 0;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    pObj->IsAmbientEnabled = 0;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = 0;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed
    pObj->IsInitialized = 1;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a40:	2201      	movs	r2, #1
 8011a42:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    ret = VL53L4CX_OK;
 8011a46:	2300      	movs	r3, #0
 8011a48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <VL53L4CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L4CX the profile corresponds to the distance modes.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigProfile(VL53L4CX_Object_t *pObj, VL53L4CX_ProfileConfig_t *pConfig)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d009      	beq.n	8011a78 <VL53L4CX_ConfigProfile+0x24>
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d006      	beq.n	8011a78 <VL53L4CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L4CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011a70:	7afb      	ldrb	r3, [r7, #11]
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d103      	bne.n	8011a7e <VL53L4CX_ConfigProfile+0x2a>
 8011a76:	e00c      	b.n	8011a92 <VL53L4CX_ConfigProfile+0x3e>
    return VL53L4CX_INVALID_PARAM;
 8011a78:	f06f 0301 	mvn.w	r3, #1
 8011a7c:	e043      	b.n	8011b06 <VL53L4CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L4CX_PROFILE_SHORT) &&
 8011a7e:	7afb      	ldrb	r3, [r7, #11]
 8011a80:	2b02      	cmp	r3, #2
 8011a82:	d006      	beq.n	8011a92 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_MEDIUM) &&
 8011a84:	7afb      	ldrb	r3, [r7, #11]
 8011a86:	2b03      	cmp	r3, #3
 8011a88:	d003      	beq.n	8011a92 <VL53L4CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L4CX_PROFILE_LONG))
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011a8a:	f06f 0301 	mvn.w	r3, #1
 8011a8e:	60fb      	str	r3, [r7, #12]
 8011a90:	e038      	b.n	8011b04 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011a92:	7afb      	ldrb	r3, [r7, #11]
 8011a94:	4619      	mov	r1, r3
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f7f0 f8cf 	bl	8001c3a <VL53LX_SetDistanceMode>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d003      	beq.n	8011aaa <VL53L4CX_ConfigProfile+0x56>
  {
    ret = VL53L4CX_ERROR;
 8011aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa6:	60fb      	str	r3, [r7, #12]
 8011aa8:	e02c      	b.n	8011b04 <VL53L4CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011aae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011ab2:	fb02 f303 	mul.w	r3, r2, r3
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7f0 f927 	bl	8001d0c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d003      	beq.n	8011acc <VL53L4CX_ConfigProfile+0x78>
  {
    ret = VL53L4CX_ERROR;
 8011ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac8:	60fb      	str	r3, [r7, #12]
 8011aca:	e01b      	b.n	8011b04 <VL53L4CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	bf14      	ite	ne
 8011ad4:	2301      	movne	r3, #1
 8011ad6:	2300      	moveq	r3, #0
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	461a      	mov	r2, r3
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ae2:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	691b      	ldr	r3, [r3, #16]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	bf14      	ite	ne
 8011aee:	2301      	movne	r3, #1
 8011af0:	2300      	moveq	r3, #0
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	461a      	mov	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011afc:	f883 24ed 	strb.w	r2, [r3, #1261]	@ 0x4ed

    ret = VL53L4CX_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b04:	68fb      	ldr	r3, [r7, #12]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <VL53L4CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_ConfigROI(VL53L4CX_Object_t *pObj, VL53L4CX_ROIConfig_t *pROIConfig)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b084      	sub	sp, #16
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d002      	beq.n	8011b24 <VL53L4CX_ConfigROI+0x16>
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d103      	bne.n	8011b2c <VL53L4CX_ConfigROI+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011b24:	f06f 0301 	mvn.w	r3, #1
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	e01a      	b.n	8011b62 <VL53L4CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	789b      	ldrb	r3, [r3, #2]
 8011b30:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	78db      	ldrb	r3, [r3, #3]
 8011b36:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	785b      	ldrb	r3, [r3, #1]
 8011b42:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011b44:	f107 0308 	add.w	r3, r7, #8
 8011b48:	4619      	mov	r1, r3
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7f0 f956 	bl	8001dfc <VL53LX_SetUserROI>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d003      	beq.n	8011b5e <VL53L4CX_ConfigROI+0x50>
    {
      ret = VL53L4CX_ERROR;
 8011b56:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5a:	60fb      	str	r3, [r7, #12]
 8011b5c:	e001      	b.n	8011b62 <VL53L4CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011b62:	68fb      	ldr	r3, [r7, #12]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3710      	adds	r7, #16
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <VL53L4CX_GetDistance>:
  * @param pObj    vl53l4cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_GetDistance(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L4CX_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d002      	beq.n	8011b86 <VL53L4CX_GetDistance+0x1a>
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d103      	bne.n	8011b8e <VL53L4CX_GetDistance+0x22>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011b86:	f06f 0301 	mvn.w	r3, #1
 8011b8a:	60fb      	str	r3, [r7, #12]
 8011b8c:	e009      	b.n	8011ba2 <VL53L4CX_GetDistance+0x36>
  }
  else if (pObj->IsRanging == 0U)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011b94:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d102      	bne.n	8011ba2 <VL53L4CX_GetDistance+0x36>
  {
    ret = VL53L4CX_ERROR;
 8011b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba0:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L4CX_OK)
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d112      	bne.n	8011bce <VL53L4CX_GetDistance+0x62>
  {
    if (pObj->IsBlocking == 1U)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011bae:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d106      	bne.n	8011bc4 <VL53L4CX_GetDistance+0x58>
    {
      ret = vl53l4cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011bb6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 f8aa 	bl	8011d14 <vl53l4cx_poll_for_measurement>
 8011bc0:	60f8      	str	r0, [r7, #12]
 8011bc2:	e004      	b.n	8011bce <VL53L4CX_GetDistance+0x62>
    }
    else
    {
      ret = vl53l4cx_poll_for_measurement(pObj, 0U);
 8011bc4:	2100      	movs	r1, #0
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f000 f8a4 	bl	8011d14 <vl53l4cx_poll_for_measurement>
 8011bcc:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L4CX_OK)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d119      	bne.n	8011c08 <VL53L4CX_GetDistance+0x9c>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l4cx_get_result(pObj, pResult) != VL53L4CX_OK)
 8011bd4:	6839      	ldr	r1, [r7, #0]
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f000 f8ca 	bl	8011d70 <vl53l4cx_get_result>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d003      	beq.n	8011bea <VL53L4CX_GetDistance+0x7e>
    {
      ret = VL53L4CX_ERROR;
 8011be2:	f04f 33ff 	mov.w	r3, #4294967295
 8011be6:	60fb      	str	r3, [r7, #12]
 8011be8:	e00e      	b.n	8011c08 <VL53L4CX_GetDistance+0x9c>
    }
    else if (pObj->IsContinuous == 1U)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011bf0:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d105      	bne.n	8011c04 <VL53L4CX_GetDistance+0x98>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f7f0 f9ba 	bl	8001f72 <VL53LX_ClearInterruptAndStartMeasurement>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	60fb      	str	r3, [r7, #12]
 8011c02:	e001      	b.n	8011c08 <VL53L4CX_GetDistance+0x9c>
    }
    else
    {
      ret = VL53L4CX_OK;
 8011c04:	2300      	movs	r3, #0
 8011c06:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011c08:	68fb      	ldr	r3, [r7, #12]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
	...

08011c14 <VL53L4CX_Start>:
  * @param pObj    vl53l4cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L4CX status
  */
int32_t VL53L4CX_Start(VL53L4CX_Object_t *pObj, uint32_t Mode)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d103      	bne.n	8011c2c <VL53L4CX_Start+0x18>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011c24:	f06f 0301 	mvn.w	r3, #1
 8011c28:	60fb      	str	r3, [r7, #12]
 8011c2a:	e06e      	b.n	8011d0a <VL53L4CX_Start+0xf6>
  }
  else if (pObj->IsRanging == 1U)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c32:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d103      	bne.n	8011c42 <VL53L4CX_Start+0x2e>
  {
    ret = VL53L4CX_ERROR;
 8011c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	e063      	b.n	8011d0a <VL53L4CX_Start+0xf6>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7f0 f947 	bl	8001ed6 <VL53LX_StartMeasurement>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d15a      	bne.n	8011d04 <VL53L4CX_Start+0xf0>
  {
    pObj->IsRanging = 1;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c54:	2201      	movs	r2, #1
 8011c56:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
    ret = VL53L4CX_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	60fb      	str	r3, [r7, #12]

    ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7f0 f987 	bl	8001f72 <VL53LX_ClearInterruptAndStartMeasurement>
 8011c64:	4603      	mov	r3, r0
 8011c66:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	2b03      	cmp	r3, #3
 8011c6e:	d83f      	bhi.n	8011cf0 <VL53L4CX_Start+0xdc>
 8011c70:	a201      	add	r2, pc, #4	@ (adr r2, 8011c78 <VL53L4CX_Start+0x64>)
 8011c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c76:	bf00      	nop
 8011c78:	08011c89 	.word	0x08011c89
 8011c7c:	08011ca3 	.word	0x08011ca3
 8011c80:	08011cbd 	.word	0x08011cbd
 8011c84:	08011cd7 	.word	0x08011cd7
    {
    case VL53L4CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c8e:	2201      	movs	r2, #1
 8011c90:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c9a:	2201      	movs	r2, #1
 8011c9c:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011ca0:	e033      	b.n	8011d0a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 1U;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011cba:	e026      	b.n	8011d0a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011cd4:	e019      	b.n	8011d0a <VL53L4CX_Start+0xf6>

    case VL53L4CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cdc:	2200      	movs	r2, #0
 8011cde:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
      pObj->IsBlocking = 0U;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ce8:	2200      	movs	r2, #0
 8011cea:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
      break;
 8011cee:	e00c      	b.n	8011d0a <VL53L4CX_Start+0xf6>

    default:
      pObj->IsRanging = 0U;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
      ret = VL53L4CX_INVALID_PARAM;
 8011cfc:	f06f 0301 	mvn.w	r3, #1
 8011d00:	60fb      	str	r3, [r7, #12]
      break;
 8011d02:	e002      	b.n	8011d0a <VL53L4CX_Start+0xf6>
    }
  }
  else
  {
    ret = VL53L4CX_ERROR;
 8011d04:	f04f 33ff 	mov.w	r3, #4294967295
 8011d08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3710      	adds	r7, #16
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <vl53l4cx_poll_for_measurement>:
/** @defgroup VL53L4CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l4cx_poll_for_measurement(VL53L4CX_Object_t *pObj, uint32_t Timeout)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <vl53l4cx_poll_for_measurement+0x1a>
  {
    return VL53L4CX_INVALID_PARAM;
 8011d28:	f06f 0301 	mvn.w	r3, #1
 8011d2c:	e01b      	b.n	8011d66 <vl53l4cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	695b      	ldr	r3, [r3, #20]
 8011d32:	4798      	blx	r3
 8011d34:	4603      	mov	r3, r0
 8011d36:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011d38:	f107 030b 	add.w	r3, r7, #11
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f7f0 f92d 	bl	8001f9e <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011d44:	7afb      	ldrb	r3, [r7, #11]
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d101      	bne.n	8011d4e <vl53l4cx_poll_for_measurement+0x3a>
    {
      return VL53L4CX_OK;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	e00b      	b.n	8011d66 <vl53l4cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	695b      	ldr	r3, [r3, #20]
 8011d52:	4798      	blx	r3
 8011d54:	4603      	mov	r3, r0
 8011d56:	461a      	mov	r2, r3
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	683a      	ldr	r2, [r7, #0]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d8ea      	bhi.n	8011d38 <vl53l4cx_poll_for_measurement+0x24>

  return VL53L4CX_TIMEOUT;
 8011d62:	f06f 0302 	mvn.w	r3, #2
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
	...

08011d70 <vl53l4cx_get_result>:

static int32_t vl53l4cx_get_result(VL53L4CX_Object_t *pObj, VL53L4CX_Result_t *pResult)
{
 8011d70:	b590      	push	{r4, r7, lr}
 8011d72:	b089      	sub	sp, #36	@ 0x24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <vl53l4cx_get_result+0x16>
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d103      	bne.n	8011d8e <vl53l4cx_get_result+0x1e>
  {
    ret = VL53L4CX_INVALID_PARAM;
 8011d86:	f06f 0301 	mvn.w	r3, #1
 8011d8a:	61fb      	str	r3, [r7, #28]
 8011d8c:	e103      	b.n	8011f96 <vl53l4cx_get_result+0x226>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011d8e:	4984      	ldr	r1, [pc, #528]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f7f0 fce2 	bl	800275a <VL53LX_GetMultiRangingData>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d003      	beq.n	8011da4 <vl53l4cx_get_result+0x34>
  {
    ret = VL53L4CX_ERROR;
 8011d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011da0:	61fb      	str	r3, [r7, #28]
 8011da2:	e0f8      	b.n	8011f96 <vl53l4cx_get_result+0x226>
  }
  else
  {
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8011da4:	2300      	movs	r3, #0
 8011da6:	76fb      	strb	r3, [r7, #27]
 8011da8:	e0ec      	b.n	8011f84 <vl53l4cx_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8011daa:	4b7d      	ldr	r3, [pc, #500]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011dac:	795b      	ldrb	r3, [r3, #5]
 8011dae:	7efa      	ldrb	r2, [r7, #27]
 8011db0:	4618      	mov	r0, r3
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	4613      	mov	r3, r2
 8011db6:	011b      	lsls	r3, r3, #4
 8011db8:	4413      	add	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	440b      	add	r3, r1
 8011dbe:	3304      	adds	r3, #4
 8011dc0:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	76bb      	strb	r3, [r7, #26]
 8011dc6:	e0d4      	b.n	8011f72 <vl53l4cx_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8011dc8:	7eba      	ldrb	r2, [r7, #26]
 8011dca:	4975      	ldr	r1, [pc, #468]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011dcc:	4613      	mov	r3, r2
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4413      	add	r3, r2
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	440b      	add	r3, r1
 8011dd6:	3318      	adds	r3, #24
 8011dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	da0b      	bge.n	8011df8 <vl53l4cx_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011de0:	7efa      	ldrb	r2, [r7, #27]
 8011de2:	7eb8      	ldrb	r0, [r7, #26]
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	4613      	mov	r3, r2
 8011de8:	011b      	lsls	r3, r3, #4
 8011dea:	4413      	add	r3, r2
 8011dec:	4403      	add	r3, r0
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	440b      	add	r3, r1
 8011df2:	2200      	movs	r2, #0
 8011df4:	609a      	str	r2, [r3, #8]
 8011df6:	e014      	b.n	8011e22 <vl53l4cx_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011df8:	7eba      	ldrb	r2, [r7, #26]
 8011dfa:	4969      	ldr	r1, [pc, #420]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	4413      	add	r3, r2
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	440b      	add	r3, r1
 8011e06:	3318      	adds	r3, #24
 8011e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e0c:	7efa      	ldrb	r2, [r7, #27]
 8011e0e:	7eb8      	ldrb	r0, [r7, #26]
 8011e10:	461c      	mov	r4, r3
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	4613      	mov	r3, r2
 8011e16:	011b      	lsls	r3, r3, #4
 8011e18:	4413      	add	r3, r2
 8011e1a:	4403      	add	r3, r0
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	440b      	add	r3, r1
 8011e20:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e28:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d132      	bne.n	8011e96 <vl53l4cx_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011e30:	7eba      	ldrb	r2, [r7, #26]
 8011e32:	495b      	ldr	r1, [pc, #364]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011e34:	4613      	mov	r3, r2
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4413      	add	r3, r2
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	440b      	add	r3, r1
 8011e3e:	3310      	adds	r3, #16
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	ee07 3a90 	vmov	s15, r3
 8011e46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011e4a:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8011fa4 <vl53l4cx_get_result+0x234>
 8011e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e52:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8011fa8 <vl53l4cx_get_result+0x238>
 8011e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e5a:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011e5e:	4b50      	ldr	r3, [pc, #320]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011e64:	0a1b      	lsrs	r3, r3, #8
 8011e66:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8011e68:	8a7b      	ldrh	r3, [r7, #18]
 8011e6a:	ee07 3a90 	vmov	s15, r3
 8011e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011e72:	7efa      	ldrb	r2, [r7, #27]
 8011e74:	7eb8      	ldrb	r0, [r7, #26]
 8011e76:	edd7 6a05 	vldr	s13, [r7, #20]
 8011e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011e7e:	6839      	ldr	r1, [r7, #0]
 8011e80:	4613      	mov	r3, r2
 8011e82:	011b      	lsls	r3, r3, #4
 8011e84:	4413      	add	r3, r2
 8011e86:	4403      	add	r3, r0
 8011e88:	3308      	adds	r3, #8
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	440b      	add	r3, r1
 8011e8e:	3308      	adds	r3, #8
 8011e90:	edc3 7a00 	vstr	s15, [r3]
 8011e94:	e00d      	b.n	8011eb2 <vl53l4cx_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011e96:	7efa      	ldrb	r2, [r7, #27]
 8011e98:	7eb8      	ldrb	r0, [r7, #26]
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	011b      	lsls	r3, r3, #4
 8011ea0:	4413      	add	r3, r2
 8011ea2:	4403      	add	r3, r0
 8011ea4:	3308      	adds	r3, #8
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	440b      	add	r3, r1
 8011eaa:	3308      	adds	r3, #8
 8011eac:	f04f 0200 	mov.w	r2, #0
 8011eb0:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011eb8:	f893 34ed 	ldrb.w	r3, [r3, #1261]	@ 0x4ed
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d132      	bne.n	8011f26 <vl53l4cx_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011ec0:	7eba      	ldrb	r2, [r7, #26]
 8011ec2:	4937      	ldr	r1, [pc, #220]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	4413      	add	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	440b      	add	r3, r1
 8011ece:	330c      	adds	r3, #12
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	ee07 3a90 	vmov	s15, r3
 8011ed6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011eda:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8011fa4 <vl53l4cx_get_result+0x234>
 8011ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ee2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011fa8 <vl53l4cx_get_result+0x238>
 8011ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011eea:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011eee:	4b2c      	ldr	r3, [pc, #176]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011ef4:	0a1b      	lsrs	r3, r3, #8
 8011ef6:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8011ef8:	8a7b      	ldrh	r3, [r7, #18]
 8011efa:	ee07 3a90 	vmov	s15, r3
 8011efe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011f02:	7efa      	ldrb	r2, [r7, #27]
 8011f04:	7eb8      	ldrb	r0, [r7, #26]
 8011f06:	edd7 6a03 	vldr	s13, [r7, #12]
 8011f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f0e:	6839      	ldr	r1, [r7, #0]
 8011f10:	4613      	mov	r3, r2
 8011f12:	011b      	lsls	r3, r3, #4
 8011f14:	4413      	add	r3, r2
 8011f16:	4403      	add	r3, r0
 8011f18:	330c      	adds	r3, #12
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	440b      	add	r3, r1
 8011f1e:	3308      	adds	r3, #8
 8011f20:	edc3 7a00 	vstr	s15, [r3]
 8011f24:	e00d      	b.n	8011f42 <vl53l4cx_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8011f26:	7efa      	ldrb	r2, [r7, #27]
 8011f28:	7eb8      	ldrb	r0, [r7, #26]
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	011b      	lsls	r3, r3, #4
 8011f30:	4413      	add	r3, r2
 8011f32:	4403      	add	r3, r0
 8011f34:	330c      	adds	r3, #12
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	440b      	add	r3, r1
 8011f3a:	3308      	adds	r3, #8
 8011f3c:	f04f 0200 	mov.w	r2, #0
 8011f40:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8011f42:	7eba      	ldrb	r2, [r7, #26]
 8011f44:	4916      	ldr	r1, [pc, #88]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011f46:	4613      	mov	r3, r2
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	4413      	add	r3, r2
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	440b      	add	r3, r1
 8011f50:	331a      	adds	r3, #26
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	7efa      	ldrb	r2, [r7, #27]
 8011f56:	7eb8      	ldrb	r0, [r7, #26]
 8011f58:	461c      	mov	r4, r3
 8011f5a:	6839      	ldr	r1, [r7, #0]
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	011b      	lsls	r3, r3, #4
 8011f60:	4413      	add	r3, r2
 8011f62:	4403      	add	r3, r0
 8011f64:	3304      	adds	r3, #4
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	440b      	add	r3, r1
 8011f6a:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011f6c:	7ebb      	ldrb	r3, [r7, #26]
 8011f6e:	3301      	adds	r3, #1
 8011f70:	76bb      	strb	r3, [r7, #26]
 8011f72:	4b0b      	ldr	r3, [pc, #44]	@ (8011fa0 <vl53l4cx_get_result+0x230>)
 8011f74:	795b      	ldrb	r3, [r3, #5]
 8011f76:	7eba      	ldrb	r2, [r7, #26]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	f4ff af25 	bcc.w	8011dc8 <vl53l4cx_get_result+0x58>
    for (i = 0; i < VL53L4CX_MAX_NB_ZONES; i++)
 8011f7e:	7efb      	ldrb	r3, [r7, #27]
 8011f80:	3301      	adds	r3, #1
 8011f82:	76fb      	strb	r3, [r7, #27]
 8011f84:	7efb      	ldrb	r3, [r7, #27]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f43f af0f 	beq.w	8011daa <vl53l4cx_get_result+0x3a>
      }
    }

    pResult->NumberOfZones = VL53L4CX_MAX_NB_ZONES;
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	601a      	str	r2, [r3, #0]

    ret = VL53L4CX_OK;
 8011f92:	2300      	movs	r3, #0
 8011f94:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8011f96:	69fb      	ldr	r3, [r7, #28]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3724      	adds	r7, #36	@ 0x24
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd90      	pop	{r4, r7, pc}
 8011fa0:	2000292c 	.word	0x2000292c
 8011fa4:	47800000 	.word	0x47800000
 8011fa8:	447a0000 	.word	0x447a0000

08011fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8011fec <HAL_Init+0x40>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8011fec <HAL_Init+0x40>)
 8011fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8011fec <HAL_Init+0x40>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8011fec <HAL_Init+0x40>)
 8011fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011fc8:	4b08      	ldr	r3, [pc, #32]	@ (8011fec <HAL_Init+0x40>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a07      	ldr	r2, [pc, #28]	@ (8011fec <HAL_Init+0x40>)
 8011fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011fd4:	2003      	movs	r0, #3
 8011fd6:	f000 f90d 	bl	80121f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011fda:	2000      	movs	r0, #0
 8011fdc:	f000 f808 	bl	8011ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011fe0:	f7ef f8ec 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	40023c00 	.word	0x40023c00

08011ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011ff8:	4b12      	ldr	r3, [pc, #72]	@ (8012044 <HAL_InitTick+0x54>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	4b12      	ldr	r3, [pc, #72]	@ (8012048 <HAL_InitTick+0x58>)
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	4619      	mov	r1, r3
 8012002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012006:	fbb3 f3f1 	udiv	r3, r3, r1
 801200a:	fbb2 f3f3 	udiv	r3, r2, r3
 801200e:	4618      	mov	r0, r3
 8012010:	f000 f917 	bl	8012242 <HAL_SYSTICK_Config>
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d001      	beq.n	801201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801201a:	2301      	movs	r3, #1
 801201c:	e00e      	b.n	801203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2b0f      	cmp	r3, #15
 8012022:	d80a      	bhi.n	801203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012024:	2200      	movs	r2, #0
 8012026:	6879      	ldr	r1, [r7, #4]
 8012028:	f04f 30ff 	mov.w	r0, #4294967295
 801202c:	f000 f8ed 	bl	801220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012030:	4a06      	ldr	r2, [pc, #24]	@ (801204c <HAL_InitTick+0x5c>)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8012036:	2300      	movs	r3, #0
 8012038:	e000      	b.n	801203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801203a:	2301      	movs	r3, #1
}
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	20000000 	.word	0x20000000
 8012048:	20000064 	.word	0x20000064
 801204c:	20000060 	.word	0x20000060

08012050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012050:	b480      	push	{r7}
 8012052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012054:	4b06      	ldr	r3, [pc, #24]	@ (8012070 <HAL_IncTick+0x20>)
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	461a      	mov	r2, r3
 801205a:	4b06      	ldr	r3, [pc, #24]	@ (8012074 <HAL_IncTick+0x24>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	4413      	add	r3, r2
 8012060:	4a04      	ldr	r2, [pc, #16]	@ (8012074 <HAL_IncTick+0x24>)
 8012062:	6013      	str	r3, [r2, #0]
}
 8012064:	bf00      	nop
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop
 8012070:	20000064 	.word	0x20000064
 8012074:	20002988 	.word	0x20002988

08012078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012078:	b480      	push	{r7}
 801207a:	af00      	add	r7, sp, #0
  return uwTick;
 801207c:	4b03      	ldr	r3, [pc, #12]	@ (801208c <HAL_GetTick+0x14>)
 801207e:	681b      	ldr	r3, [r3, #0]
}
 8012080:	4618      	mov	r0, r3
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop
 801208c:	20002988 	.word	0x20002988

08012090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012090:	b480      	push	{r7}
 8012092:	b085      	sub	sp, #20
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f003 0307 	and.w	r3, r3, #7
 801209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80120a0:	4b0c      	ldr	r3, [pc, #48]	@ (80120d4 <__NVIC_SetPriorityGrouping+0x44>)
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80120ac:	4013      	ands	r3, r2
 80120ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80120b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80120bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80120c2:	4a04      	ldr	r2, [pc, #16]	@ (80120d4 <__NVIC_SetPriorityGrouping+0x44>)
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	60d3      	str	r3, [r2, #12]
}
 80120c8:	bf00      	nop
 80120ca:	3714      	adds	r7, #20
 80120cc:	46bd      	mov	sp, r7
 80120ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d2:	4770      	bx	lr
 80120d4:	e000ed00 	.word	0xe000ed00

080120d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80120d8:	b480      	push	{r7}
 80120da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80120dc:	4b04      	ldr	r3, [pc, #16]	@ (80120f0 <__NVIC_GetPriorityGrouping+0x18>)
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	0a1b      	lsrs	r3, r3, #8
 80120e2:	f003 0307 	and.w	r3, r3, #7
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	e000ed00 	.word	0xe000ed00

080120f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	4603      	mov	r3, r0
 80120fc:	6039      	str	r1, [r7, #0]
 80120fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012104:	2b00      	cmp	r3, #0
 8012106:	db0a      	blt.n	801211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	b2da      	uxtb	r2, r3
 801210c:	490c      	ldr	r1, [pc, #48]	@ (8012140 <__NVIC_SetPriority+0x4c>)
 801210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012112:	0112      	lsls	r2, r2, #4
 8012114:	b2d2      	uxtb	r2, r2
 8012116:	440b      	add	r3, r1
 8012118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801211c:	e00a      	b.n	8012134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	b2da      	uxtb	r2, r3
 8012122:	4908      	ldr	r1, [pc, #32]	@ (8012144 <__NVIC_SetPriority+0x50>)
 8012124:	79fb      	ldrb	r3, [r7, #7]
 8012126:	f003 030f 	and.w	r3, r3, #15
 801212a:	3b04      	subs	r3, #4
 801212c:	0112      	lsls	r2, r2, #4
 801212e:	b2d2      	uxtb	r2, r2
 8012130:	440b      	add	r3, r1
 8012132:	761a      	strb	r2, [r3, #24]
}
 8012134:	bf00      	nop
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr
 8012140:	e000e100 	.word	0xe000e100
 8012144:	e000ed00 	.word	0xe000ed00

08012148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012148:	b480      	push	{r7}
 801214a:	b089      	sub	sp, #36	@ 0x24
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f003 0307 	and.w	r3, r3, #7
 801215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	f1c3 0307 	rsb	r3, r3, #7
 8012162:	2b04      	cmp	r3, #4
 8012164:	bf28      	it	cs
 8012166:	2304      	movcs	r3, #4
 8012168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	3304      	adds	r3, #4
 801216e:	2b06      	cmp	r3, #6
 8012170:	d902      	bls.n	8012178 <NVIC_EncodePriority+0x30>
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	3b03      	subs	r3, #3
 8012176:	e000      	b.n	801217a <NVIC_EncodePriority+0x32>
 8012178:	2300      	movs	r3, #0
 801217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801217c:	f04f 32ff 	mov.w	r2, #4294967295
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	fa02 f303 	lsl.w	r3, r2, r3
 8012186:	43da      	mvns	r2, r3
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	401a      	ands	r2, r3
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012190:	f04f 31ff 	mov.w	r1, #4294967295
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	fa01 f303 	lsl.w	r3, r1, r3
 801219a:	43d9      	mvns	r1, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80121a0:	4313      	orrs	r3, r2
         );
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3724      	adds	r7, #36	@ 0x24
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr
	...

080121b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3b01      	subs	r3, #1
 80121bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80121c0:	d301      	bcc.n	80121c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80121c2:	2301      	movs	r3, #1
 80121c4:	e00f      	b.n	80121e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80121c6:	4a0a      	ldr	r2, [pc, #40]	@ (80121f0 <SysTick_Config+0x40>)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	3b01      	subs	r3, #1
 80121cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80121ce:	210f      	movs	r1, #15
 80121d0:	f04f 30ff 	mov.w	r0, #4294967295
 80121d4:	f7ff ff8e 	bl	80120f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80121d8:	4b05      	ldr	r3, [pc, #20]	@ (80121f0 <SysTick_Config+0x40>)
 80121da:	2200      	movs	r2, #0
 80121dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80121de:	4b04      	ldr	r3, [pc, #16]	@ (80121f0 <SysTick_Config+0x40>)
 80121e0:	2207      	movs	r2, #7
 80121e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80121e4:	2300      	movs	r3, #0
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3708      	adds	r7, #8
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	e000e010 	.word	0xe000e010

080121f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f7ff ff47 	bl	8012090 <__NVIC_SetPriorityGrouping>
}
 8012202:	bf00      	nop
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801220a:	b580      	push	{r7, lr}
 801220c:	b086      	sub	sp, #24
 801220e:	af00      	add	r7, sp, #0
 8012210:	4603      	mov	r3, r0
 8012212:	60b9      	str	r1, [r7, #8]
 8012214:	607a      	str	r2, [r7, #4]
 8012216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012218:	2300      	movs	r3, #0
 801221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801221c:	f7ff ff5c 	bl	80120d8 <__NVIC_GetPriorityGrouping>
 8012220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	68b9      	ldr	r1, [r7, #8]
 8012226:	6978      	ldr	r0, [r7, #20]
 8012228:	f7ff ff8e 	bl	8012148 <NVIC_EncodePriority>
 801222c:	4602      	mov	r2, r0
 801222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012232:	4611      	mov	r1, r2
 8012234:	4618      	mov	r0, r3
 8012236:	f7ff ff5d 	bl	80120f4 <__NVIC_SetPriority>
}
 801223a:	bf00      	nop
 801223c:	3718      	adds	r7, #24
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}

08012242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012242:	b580      	push	{r7, lr}
 8012244:	b082      	sub	sp, #8
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff ffb0 	bl	80121b0 <SysTick_Config>
 8012250:	4603      	mov	r3, r0
}
 8012252:	4618      	mov	r0, r3
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
	...

0801225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801225c:	b480      	push	{r7}
 801225e:	b089      	sub	sp, #36	@ 0x24
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012266:	2300      	movs	r3, #0
 8012268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801226a:	2300      	movs	r3, #0
 801226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801226e:	2300      	movs	r3, #0
 8012270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012272:	2300      	movs	r3, #0
 8012274:	61fb      	str	r3, [r7, #28]
 8012276:	e165      	b.n	8012544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012278:	2201      	movs	r2, #1
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	fa02 f303 	lsl.w	r3, r2, r3
 8012280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	697a      	ldr	r2, [r7, #20]
 8012288:	4013      	ands	r3, r2
 801228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801228c:	693a      	ldr	r2, [r7, #16]
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	429a      	cmp	r2, r3
 8012292:	f040 8154 	bne.w	801253e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	f003 0303 	and.w	r3, r3, #3
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d005      	beq.n	80122ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d130      	bne.n	8012310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	689b      	ldr	r3, [r3, #8]
 80122b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	005b      	lsls	r3, r3, #1
 80122b8:	2203      	movs	r2, #3
 80122ba:	fa02 f303 	lsl.w	r3, r2, r3
 80122be:	43db      	mvns	r3, r3
 80122c0:	69ba      	ldr	r2, [r7, #24]
 80122c2:	4013      	ands	r3, r2
 80122c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	68da      	ldr	r2, [r3, #12]
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	005b      	lsls	r3, r3, #1
 80122ce:	fa02 f303 	lsl.w	r3, r2, r3
 80122d2:	69ba      	ldr	r2, [r7, #24]
 80122d4:	4313      	orrs	r3, r2
 80122d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	69ba      	ldr	r2, [r7, #24]
 80122dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80122e4:	2201      	movs	r2, #1
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	fa02 f303 	lsl.w	r3, r2, r3
 80122ec:	43db      	mvns	r3, r3
 80122ee:	69ba      	ldr	r2, [r7, #24]
 80122f0:	4013      	ands	r3, r2
 80122f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	091b      	lsrs	r3, r3, #4
 80122fa:	f003 0201 	and.w	r2, r3, #1
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	fa02 f303 	lsl.w	r3, r2, r3
 8012304:	69ba      	ldr	r2, [r7, #24]
 8012306:	4313      	orrs	r3, r2
 8012308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	69ba      	ldr	r2, [r7, #24]
 801230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	f003 0303 	and.w	r3, r3, #3
 8012318:	2b03      	cmp	r3, #3
 801231a:	d017      	beq.n	801234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	2203      	movs	r2, #3
 8012328:	fa02 f303 	lsl.w	r3, r2, r3
 801232c:	43db      	mvns	r3, r3
 801232e:	69ba      	ldr	r2, [r7, #24]
 8012330:	4013      	ands	r3, r2
 8012332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	689a      	ldr	r2, [r3, #8]
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	fa02 f303 	lsl.w	r3, r2, r3
 8012340:	69ba      	ldr	r2, [r7, #24]
 8012342:	4313      	orrs	r3, r2
 8012344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	69ba      	ldr	r2, [r7, #24]
 801234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	f003 0303 	and.w	r3, r3, #3
 8012354:	2b02      	cmp	r3, #2
 8012356:	d123      	bne.n	80123a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	08da      	lsrs	r2, r3, #3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	3208      	adds	r2, #8
 8012360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	f003 0307 	and.w	r3, r3, #7
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	220f      	movs	r2, #15
 8012370:	fa02 f303 	lsl.w	r3, r2, r3
 8012374:	43db      	mvns	r3, r3
 8012376:	69ba      	ldr	r2, [r7, #24]
 8012378:	4013      	ands	r3, r2
 801237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	691a      	ldr	r2, [r3, #16]
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	f003 0307 	and.w	r3, r3, #7
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	fa02 f303 	lsl.w	r3, r2, r3
 801238c:	69ba      	ldr	r2, [r7, #24]
 801238e:	4313      	orrs	r3, r2
 8012390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	08da      	lsrs	r2, r3, #3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	3208      	adds	r2, #8
 801239a:	69b9      	ldr	r1, [r7, #24]
 801239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	2203      	movs	r2, #3
 80123ac:	fa02 f303 	lsl.w	r3, r2, r3
 80123b0:	43db      	mvns	r3, r3
 80123b2:	69ba      	ldr	r2, [r7, #24]
 80123b4:	4013      	ands	r3, r2
 80123b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	f003 0203 	and.w	r2, r3, #3
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	005b      	lsls	r3, r3, #1
 80123c4:	fa02 f303 	lsl.w	r3, r2, r3
 80123c8:	69ba      	ldr	r2, [r7, #24]
 80123ca:	4313      	orrs	r3, r2
 80123cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	69ba      	ldr	r2, [r7, #24]
 80123d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f000 80ae 	beq.w	801253e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80123e2:	2300      	movs	r3, #0
 80123e4:	60fb      	str	r3, [r7, #12]
 80123e6:	4b5d      	ldr	r3, [pc, #372]	@ (801255c <HAL_GPIO_Init+0x300>)
 80123e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123ea:	4a5c      	ldr	r2, [pc, #368]	@ (801255c <HAL_GPIO_Init+0x300>)
 80123ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80123f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80123f2:	4b5a      	ldr	r3, [pc, #360]	@ (801255c <HAL_GPIO_Init+0x300>)
 80123f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80123fa:	60fb      	str	r3, [r7, #12]
 80123fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80123fe:	4a58      	ldr	r2, [pc, #352]	@ (8012560 <HAL_GPIO_Init+0x304>)
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	089b      	lsrs	r3, r3, #2
 8012404:	3302      	adds	r3, #2
 8012406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	f003 0303 	and.w	r3, r3, #3
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	220f      	movs	r2, #15
 8012416:	fa02 f303 	lsl.w	r3, r2, r3
 801241a:	43db      	mvns	r3, r3
 801241c:	69ba      	ldr	r2, [r7, #24]
 801241e:	4013      	ands	r3, r2
 8012420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4a4f      	ldr	r2, [pc, #316]	@ (8012564 <HAL_GPIO_Init+0x308>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d025      	beq.n	8012476 <HAL_GPIO_Init+0x21a>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4a4e      	ldr	r2, [pc, #312]	@ (8012568 <HAL_GPIO_Init+0x30c>)
 801242e:	4293      	cmp	r3, r2
 8012430:	d01f      	beq.n	8012472 <HAL_GPIO_Init+0x216>
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4a4d      	ldr	r2, [pc, #308]	@ (801256c <HAL_GPIO_Init+0x310>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d019      	beq.n	801246e <HAL_GPIO_Init+0x212>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4a4c      	ldr	r2, [pc, #304]	@ (8012570 <HAL_GPIO_Init+0x314>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d013      	beq.n	801246a <HAL_GPIO_Init+0x20e>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4a4b      	ldr	r2, [pc, #300]	@ (8012574 <HAL_GPIO_Init+0x318>)
 8012446:	4293      	cmp	r3, r2
 8012448:	d00d      	beq.n	8012466 <HAL_GPIO_Init+0x20a>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4a4a      	ldr	r2, [pc, #296]	@ (8012578 <HAL_GPIO_Init+0x31c>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d007      	beq.n	8012462 <HAL_GPIO_Init+0x206>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4a49      	ldr	r2, [pc, #292]	@ (801257c <HAL_GPIO_Init+0x320>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d101      	bne.n	801245e <HAL_GPIO_Init+0x202>
 801245a:	2306      	movs	r3, #6
 801245c:	e00c      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 801245e:	2307      	movs	r3, #7
 8012460:	e00a      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 8012462:	2305      	movs	r3, #5
 8012464:	e008      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 8012466:	2304      	movs	r3, #4
 8012468:	e006      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 801246a:	2303      	movs	r3, #3
 801246c:	e004      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 801246e:	2302      	movs	r3, #2
 8012470:	e002      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 8012472:	2301      	movs	r3, #1
 8012474:	e000      	b.n	8012478 <HAL_GPIO_Init+0x21c>
 8012476:	2300      	movs	r3, #0
 8012478:	69fa      	ldr	r2, [r7, #28]
 801247a:	f002 0203 	and.w	r2, r2, #3
 801247e:	0092      	lsls	r2, r2, #2
 8012480:	4093      	lsls	r3, r2
 8012482:	69ba      	ldr	r2, [r7, #24]
 8012484:	4313      	orrs	r3, r2
 8012486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012488:	4935      	ldr	r1, [pc, #212]	@ (8012560 <HAL_GPIO_Init+0x304>)
 801248a:	69fb      	ldr	r3, [r7, #28]
 801248c:	089b      	lsrs	r3, r3, #2
 801248e:	3302      	adds	r3, #2
 8012490:	69ba      	ldr	r2, [r7, #24]
 8012492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012496:	4b3a      	ldr	r3, [pc, #232]	@ (8012580 <HAL_GPIO_Init+0x324>)
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	43db      	mvns	r3, r3
 80124a0:	69ba      	ldr	r2, [r7, #24]
 80124a2:	4013      	ands	r3, r2
 80124a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d003      	beq.n	80124ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80124b2:	69ba      	ldr	r2, [r7, #24]
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80124ba:	4a31      	ldr	r2, [pc, #196]	@ (8012580 <HAL_GPIO_Init+0x324>)
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80124c0:	4b2f      	ldr	r3, [pc, #188]	@ (8012580 <HAL_GPIO_Init+0x324>)
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	43db      	mvns	r3, r3
 80124ca:	69ba      	ldr	r2, [r7, #24]
 80124cc:	4013      	ands	r3, r2
 80124ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d003      	beq.n	80124e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80124dc:	69ba      	ldr	r2, [r7, #24]
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80124e4:	4a26      	ldr	r2, [pc, #152]	@ (8012580 <HAL_GPIO_Init+0x324>)
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80124ea:	4b25      	ldr	r3, [pc, #148]	@ (8012580 <HAL_GPIO_Init+0x324>)
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	43db      	mvns	r3, r3
 80124f4:	69ba      	ldr	r2, [r7, #24]
 80124f6:	4013      	ands	r3, r2
 80124f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012502:	2b00      	cmp	r3, #0
 8012504:	d003      	beq.n	801250e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8012506:	69ba      	ldr	r2, [r7, #24]
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	4313      	orrs	r3, r2
 801250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801250e:	4a1c      	ldr	r2, [pc, #112]	@ (8012580 <HAL_GPIO_Init+0x324>)
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012514:	4b1a      	ldr	r3, [pc, #104]	@ (8012580 <HAL_GPIO_Init+0x324>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	43db      	mvns	r3, r3
 801251e:	69ba      	ldr	r2, [r7, #24]
 8012520:	4013      	ands	r3, r2
 8012522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801252c:	2b00      	cmp	r3, #0
 801252e:	d003      	beq.n	8012538 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8012530:	69ba      	ldr	r2, [r7, #24]
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	4313      	orrs	r3, r2
 8012536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012538:	4a11      	ldr	r2, [pc, #68]	@ (8012580 <HAL_GPIO_Init+0x324>)
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	3301      	adds	r3, #1
 8012542:	61fb      	str	r3, [r7, #28]
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	2b0f      	cmp	r3, #15
 8012548:	f67f ae96 	bls.w	8012278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801254c:	bf00      	nop
 801254e:	bf00      	nop
 8012550:	3724      	adds	r7, #36	@ 0x24
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	40023800 	.word	0x40023800
 8012560:	40013800 	.word	0x40013800
 8012564:	40020000 	.word	0x40020000
 8012568:	40020400 	.word	0x40020400
 801256c:	40020800 	.word	0x40020800
 8012570:	40020c00 	.word	0x40020c00
 8012574:	40021000 	.word	0x40021000
 8012578:	40021400 	.word	0x40021400
 801257c:	40021800 	.word	0x40021800
 8012580:	40013c00 	.word	0x40013c00

08012584 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012584:	b480      	push	{r7}
 8012586:	b087      	sub	sp, #28
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801258e:	2300      	movs	r3, #0
 8012590:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8012592:	2300      	movs	r3, #0
 8012594:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012596:	2300      	movs	r3, #0
 8012598:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801259a:	2300      	movs	r3, #0
 801259c:	617b      	str	r3, [r7, #20]
 801259e:	e0c7      	b.n	8012730 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80125a0:	2201      	movs	r2, #1
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	fa02 f303 	lsl.w	r3, r2, r3
 80125a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80125aa:	683a      	ldr	r2, [r7, #0]
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	4013      	ands	r3, r2
 80125b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	f040 80b7 	bne.w	801272a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80125bc:	4a62      	ldr	r2, [pc, #392]	@ (8012748 <HAL_GPIO_DeInit+0x1c4>)
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	089b      	lsrs	r3, r3, #2
 80125c2:	3302      	adds	r3, #2
 80125c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	f003 0303 	and.w	r3, r3, #3
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	220f      	movs	r2, #15
 80125d4:	fa02 f303 	lsl.w	r3, r2, r3
 80125d8:	68ba      	ldr	r2, [r7, #8]
 80125da:	4013      	ands	r3, r2
 80125dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a5a      	ldr	r2, [pc, #360]	@ (801274c <HAL_GPIO_DeInit+0x1c8>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d025      	beq.n	8012632 <HAL_GPIO_DeInit+0xae>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4a59      	ldr	r2, [pc, #356]	@ (8012750 <HAL_GPIO_DeInit+0x1cc>)
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d01f      	beq.n	801262e <HAL_GPIO_DeInit+0xaa>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4a58      	ldr	r2, [pc, #352]	@ (8012754 <HAL_GPIO_DeInit+0x1d0>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d019      	beq.n	801262a <HAL_GPIO_DeInit+0xa6>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	4a57      	ldr	r2, [pc, #348]	@ (8012758 <HAL_GPIO_DeInit+0x1d4>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d013      	beq.n	8012626 <HAL_GPIO_DeInit+0xa2>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	4a56      	ldr	r2, [pc, #344]	@ (801275c <HAL_GPIO_DeInit+0x1d8>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d00d      	beq.n	8012622 <HAL_GPIO_DeInit+0x9e>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4a55      	ldr	r2, [pc, #340]	@ (8012760 <HAL_GPIO_DeInit+0x1dc>)
 801260a:	4293      	cmp	r3, r2
 801260c:	d007      	beq.n	801261e <HAL_GPIO_DeInit+0x9a>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4a54      	ldr	r2, [pc, #336]	@ (8012764 <HAL_GPIO_DeInit+0x1e0>)
 8012612:	4293      	cmp	r3, r2
 8012614:	d101      	bne.n	801261a <HAL_GPIO_DeInit+0x96>
 8012616:	2306      	movs	r3, #6
 8012618:	e00c      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 801261a:	2307      	movs	r3, #7
 801261c:	e00a      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 801261e:	2305      	movs	r3, #5
 8012620:	e008      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 8012622:	2304      	movs	r3, #4
 8012624:	e006      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 8012626:	2303      	movs	r3, #3
 8012628:	e004      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 801262a:	2302      	movs	r3, #2
 801262c:	e002      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 801262e:	2301      	movs	r3, #1
 8012630:	e000      	b.n	8012634 <HAL_GPIO_DeInit+0xb0>
 8012632:	2300      	movs	r3, #0
 8012634:	697a      	ldr	r2, [r7, #20]
 8012636:	f002 0203 	and.w	r2, r2, #3
 801263a:	0092      	lsls	r2, r2, #2
 801263c:	4093      	lsls	r3, r2
 801263e:	68ba      	ldr	r2, [r7, #8]
 8012640:	429a      	cmp	r2, r3
 8012642:	d132      	bne.n	80126aa <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012644:	4b48      	ldr	r3, [pc, #288]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	43db      	mvns	r3, r3
 801264c:	4946      	ldr	r1, [pc, #280]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 801264e:	4013      	ands	r3, r2
 8012650:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012652:	4b45      	ldr	r3, [pc, #276]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 8012654:	685a      	ldr	r2, [r3, #4]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	43db      	mvns	r3, r3
 801265a:	4943      	ldr	r1, [pc, #268]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 801265c:	4013      	ands	r3, r2
 801265e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012660:	4b41      	ldr	r3, [pc, #260]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 8012662:	68da      	ldr	r2, [r3, #12]
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	43db      	mvns	r3, r3
 8012668:	493f      	ldr	r1, [pc, #252]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 801266a:	4013      	ands	r3, r2
 801266c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801266e:	4b3e      	ldr	r3, [pc, #248]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 8012670:	689a      	ldr	r2, [r3, #8]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	43db      	mvns	r3, r3
 8012676:	493c      	ldr	r1, [pc, #240]	@ (8012768 <HAL_GPIO_DeInit+0x1e4>)
 8012678:	4013      	ands	r3, r2
 801267a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	f003 0303 	and.w	r3, r3, #3
 8012682:	009b      	lsls	r3, r3, #2
 8012684:	220f      	movs	r2, #15
 8012686:	fa02 f303 	lsl.w	r3, r2, r3
 801268a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801268c:	4a2e      	ldr	r2, [pc, #184]	@ (8012748 <HAL_GPIO_DeInit+0x1c4>)
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	089b      	lsrs	r3, r3, #2
 8012692:	3302      	adds	r3, #2
 8012694:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	43da      	mvns	r2, r3
 801269c:	482a      	ldr	r0, [pc, #168]	@ (8012748 <HAL_GPIO_DeInit+0x1c4>)
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	089b      	lsrs	r3, r3, #2
 80126a2:	400a      	ands	r2, r1
 80126a4:	3302      	adds	r3, #2
 80126a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	005b      	lsls	r3, r3, #1
 80126b2:	2103      	movs	r1, #3
 80126b4:	fa01 f303 	lsl.w	r3, r1, r3
 80126b8:	43db      	mvns	r3, r3
 80126ba:	401a      	ands	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	08da      	lsrs	r2, r3, #3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	3208      	adds	r2, #8
 80126c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	f003 0307 	and.w	r3, r3, #7
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	220f      	movs	r2, #15
 80126d6:	fa02 f303 	lsl.w	r3, r2, r3
 80126da:	43db      	mvns	r3, r3
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	08d2      	lsrs	r2, r2, #3
 80126e0:	4019      	ands	r1, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	3208      	adds	r2, #8
 80126e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	68da      	ldr	r2, [r3, #12]
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	005b      	lsls	r3, r3, #1
 80126f2:	2103      	movs	r1, #3
 80126f4:	fa01 f303 	lsl.w	r3, r1, r3
 80126f8:	43db      	mvns	r3, r3
 80126fa:	401a      	ands	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685a      	ldr	r2, [r3, #4]
 8012704:	2101      	movs	r1, #1
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	fa01 f303 	lsl.w	r3, r1, r3
 801270c:	43db      	mvns	r3, r3
 801270e:	401a      	ands	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	689a      	ldr	r2, [r3, #8]
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	2103      	movs	r1, #3
 801271e:	fa01 f303 	lsl.w	r3, r1, r3
 8012722:	43db      	mvns	r3, r3
 8012724:	401a      	ands	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	3301      	adds	r3, #1
 801272e:	617b      	str	r3, [r7, #20]
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	2b0f      	cmp	r3, #15
 8012734:	f67f af34 	bls.w	80125a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012738:	bf00      	nop
 801273a:	bf00      	nop
 801273c:	371c      	adds	r7, #28
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	40013800 	.word	0x40013800
 801274c:	40020000 	.word	0x40020000
 8012750:	40020400 	.word	0x40020400
 8012754:	40020800 	.word	0x40020800
 8012758:	40020c00 	.word	0x40020c00
 801275c:	40021000 	.word	0x40021000
 8012760:	40021400 	.word	0x40021400
 8012764:	40021800 	.word	0x40021800
 8012768:	40013c00 	.word	0x40013c00

0801276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	460b      	mov	r3, r1
 8012776:	807b      	strh	r3, [r7, #2]
 8012778:	4613      	mov	r3, r2
 801277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801277c:	787b      	ldrb	r3, [r7, #1]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d003      	beq.n	801278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012782:	887a      	ldrh	r2, [r7, #2]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012788:	e003      	b.n	8012792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801278a:	887b      	ldrh	r3, [r7, #2]
 801278c:	041a      	lsls	r2, r3, #16
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	619a      	str	r2, [r3, #24]
}
 8012792:	bf00      	nop
 8012794:	370c      	adds	r7, #12
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr
	...

080127a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d101      	bne.n	80127b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80127ae:	2301      	movs	r3, #1
 80127b0:	e12b      	b.n	8012a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2200      	movs	r2, #0
 80127c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 f95d 	bl	8012a86 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2224      	movs	r2, #36	@ 0x24
 80127d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f022 0201 	bic.w	r2, r2, #1
 80127e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80127f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012804:	f001 f916 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8012808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	4a81      	ldr	r2, [pc, #516]	@ (8012a14 <HAL_I2C_Init+0x274>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d807      	bhi.n	8012824 <HAL_I2C_Init+0x84>
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	4a80      	ldr	r2, [pc, #512]	@ (8012a18 <HAL_I2C_Init+0x278>)
 8012818:	4293      	cmp	r3, r2
 801281a:	bf94      	ite	ls
 801281c:	2301      	movls	r3, #1
 801281e:	2300      	movhi	r3, #0
 8012820:	b2db      	uxtb	r3, r3
 8012822:	e006      	b.n	8012832 <HAL_I2C_Init+0x92>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	4a7d      	ldr	r2, [pc, #500]	@ (8012a1c <HAL_I2C_Init+0x27c>)
 8012828:	4293      	cmp	r3, r2
 801282a:	bf94      	ite	ls
 801282c:	2301      	movls	r3, #1
 801282e:	2300      	movhi	r3, #0
 8012830:	b2db      	uxtb	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012836:	2301      	movs	r3, #1
 8012838:	e0e7      	b.n	8012a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	4a78      	ldr	r2, [pc, #480]	@ (8012a20 <HAL_I2C_Init+0x280>)
 801283e:	fba2 2303 	umull	r2, r3, r2, r3
 8012842:	0c9b      	lsrs	r3, r3, #18
 8012844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	430a      	orrs	r2, r1
 8012858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	6a1b      	ldr	r3, [r3, #32]
 8012860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	4a6a      	ldr	r2, [pc, #424]	@ (8012a14 <HAL_I2C_Init+0x274>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d802      	bhi.n	8012874 <HAL_I2C_Init+0xd4>
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	3301      	adds	r3, #1
 8012872:	e009      	b.n	8012888 <HAL_I2C_Init+0xe8>
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801287a:	fb02 f303 	mul.w	r3, r2, r3
 801287e:	4a69      	ldr	r2, [pc, #420]	@ (8012a24 <HAL_I2C_Init+0x284>)
 8012880:	fba2 2303 	umull	r2, r3, r2, r3
 8012884:	099b      	lsrs	r3, r3, #6
 8012886:	3301      	adds	r3, #1
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	6812      	ldr	r2, [r2, #0]
 801288c:	430b      	orrs	r3, r1
 801288e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 801289a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	495c      	ldr	r1, [pc, #368]	@ (8012a14 <HAL_I2C_Init+0x274>)
 80128a4:	428b      	cmp	r3, r1
 80128a6:	d819      	bhi.n	80128dc <HAL_I2C_Init+0x13c>
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	1e59      	subs	r1, r3, #1
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80128b6:	1c59      	adds	r1, r3, #1
 80128b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80128bc:	400b      	ands	r3, r1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00a      	beq.n	80128d8 <HAL_I2C_Init+0x138>
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	1e59      	subs	r1, r3, #1
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80128d0:	3301      	adds	r3, #1
 80128d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80128d6:	e051      	b.n	801297c <HAL_I2C_Init+0x1dc>
 80128d8:	2304      	movs	r3, #4
 80128da:	e04f      	b.n	801297c <HAL_I2C_Init+0x1dc>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d111      	bne.n	8012908 <HAL_I2C_Init+0x168>
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	1e58      	subs	r0, r3, #1
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6859      	ldr	r1, [r3, #4]
 80128ec:	460b      	mov	r3, r1
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	440b      	add	r3, r1
 80128f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80128f6:	3301      	adds	r3, #1
 80128f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	bf0c      	ite	eq
 8012900:	2301      	moveq	r3, #1
 8012902:	2300      	movne	r3, #0
 8012904:	b2db      	uxtb	r3, r3
 8012906:	e012      	b.n	801292e <HAL_I2C_Init+0x18e>
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	1e58      	subs	r0, r3, #1
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6859      	ldr	r1, [r3, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	440b      	add	r3, r1
 8012916:	0099      	lsls	r1, r3, #2
 8012918:	440b      	add	r3, r1
 801291a:	fbb0 f3f3 	udiv	r3, r0, r3
 801291e:	3301      	adds	r3, #1
 8012920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012924:	2b00      	cmp	r3, #0
 8012926:	bf0c      	ite	eq
 8012928:	2301      	moveq	r3, #1
 801292a:	2300      	movne	r3, #0
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <HAL_I2C_Init+0x196>
 8012932:	2301      	movs	r3, #1
 8012934:	e022      	b.n	801297c <HAL_I2C_Init+0x1dc>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d10e      	bne.n	801295c <HAL_I2C_Init+0x1bc>
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	1e58      	subs	r0, r3, #1
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6859      	ldr	r1, [r3, #4]
 8012946:	460b      	mov	r3, r1
 8012948:	005b      	lsls	r3, r3, #1
 801294a:	440b      	add	r3, r1
 801294c:	fbb0 f3f3 	udiv	r3, r0, r3
 8012950:	3301      	adds	r3, #1
 8012952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801295a:	e00f      	b.n	801297c <HAL_I2C_Init+0x1dc>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	1e58      	subs	r0, r3, #1
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6859      	ldr	r1, [r3, #4]
 8012964:	460b      	mov	r3, r1
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	440b      	add	r3, r1
 801296a:	0099      	lsls	r1, r3, #2
 801296c:	440b      	add	r3, r1
 801296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012972:	3301      	adds	r3, #1
 8012974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801297c:	6879      	ldr	r1, [r7, #4]
 801297e:	6809      	ldr	r1, [r1, #0]
 8012980:	4313      	orrs	r3, r2
 8012982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	69da      	ldr	r2, [r3, #28]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6a1b      	ldr	r3, [r3, #32]
 8012996:	431a      	orrs	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	430a      	orrs	r2, r1
 801299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80129aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	6911      	ldr	r1, [r2, #16]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	68d2      	ldr	r2, [r2, #12]
 80129b6:	4311      	orrs	r1, r2
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	6812      	ldr	r2, [r2, #0]
 80129bc:	430b      	orrs	r3, r1
 80129be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	695a      	ldr	r2, [r3, #20]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	699b      	ldr	r3, [r3, #24]
 80129d2:	431a      	orrs	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	430a      	orrs	r2, r1
 80129da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f042 0201 	orr.w	r2, r2, #1
 80129ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2220      	movs	r2, #32
 80129f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2200      	movs	r2, #0
 80129fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	000186a0 	.word	0x000186a0
 8012a18:	001e847f 	.word	0x001e847f
 8012a1c:	003d08ff 	.word	0x003d08ff
 8012a20:	431bde83 	.word	0x431bde83
 8012a24:	10624dd3 	.word	0x10624dd3

08012a28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d101      	bne.n	8012a3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012a36:	2301      	movs	r3, #1
 8012a38:	e021      	b.n	8012a7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2224      	movs	r2, #36	@ 0x24
 8012a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f022 0201 	bic.w	r2, r2, #1
 8012a50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 f821 	bl	8012a9a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2200      	movs	r2, #0
 8012a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3708      	adds	r7, #8
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012a86:	b480      	push	{r7}
 8012a88:	b083      	sub	sp, #12
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012a8e:	bf00      	nop
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012a9a:	b480      	push	{r7}
 8012a9c:	b083      	sub	sp, #12
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012aa2:	bf00      	nop
 8012aa4:	370c      	adds	r7, #12
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
	...

08012ab0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b088      	sub	sp, #32
 8012ab4:	af02      	add	r7, sp, #8
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	607a      	str	r2, [r7, #4]
 8012aba:	461a      	mov	r2, r3
 8012abc:	460b      	mov	r3, r1
 8012abe:	817b      	strh	r3, [r7, #10]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012ac4:	f7ff fad8 	bl	8012078 <HAL_GetTick>
 8012ac8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	2b20      	cmp	r3, #32
 8012ad4:	f040 80e0 	bne.w	8012c98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	2319      	movs	r3, #25
 8012ade:	2201      	movs	r2, #1
 8012ae0:	4970      	ldr	r1, [pc, #448]	@ (8012ca4 <HAL_I2C_Master_Transmit+0x1f4>)
 8012ae2:	68f8      	ldr	r0, [r7, #12]
 8012ae4:	f000 fc7e 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8012aee:	2302      	movs	r3, #2
 8012af0:	e0d3      	b.n	8012c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d101      	bne.n	8012b00 <HAL_I2C_Master_Transmit+0x50>
 8012afc:	2302      	movs	r3, #2
 8012afe:	e0cc      	b.n	8012c9a <HAL_I2C_Master_Transmit+0x1ea>
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2201      	movs	r2, #1
 8012b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f003 0301 	and.w	r3, r3, #1
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d007      	beq.n	8012b26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f042 0201 	orr.w	r2, r2, #1
 8012b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012b34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2221      	movs	r2, #33	@ 0x21
 8012b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2210      	movs	r2, #16
 8012b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	893a      	ldrh	r2, [r7, #8]
 8012b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	4a50      	ldr	r2, [pc, #320]	@ (8012ca8 <HAL_I2C_Master_Transmit+0x1f8>)
 8012b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012b68:	8979      	ldrh	r1, [r7, #10]
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	6a3a      	ldr	r2, [r7, #32]
 8012b6e:	68f8      	ldr	r0, [r7, #12]
 8012b70:	f000 fae8 	bl	8013144 <I2C_MasterRequestWrite>
 8012b74:	4603      	mov	r3, r0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d001      	beq.n	8012b7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	e08d      	b.n	8012c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012b7e:	2300      	movs	r3, #0
 8012b80:	613b      	str	r3, [r7, #16]
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	695b      	ldr	r3, [r3, #20]
 8012b88:	613b      	str	r3, [r7, #16]
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	613b      	str	r3, [r7, #16]
 8012b92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8012b94:	e066      	b.n	8012c64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012b96:	697a      	ldr	r2, [r7, #20]
 8012b98:	6a39      	ldr	r1, [r7, #32]
 8012b9a:	68f8      	ldr	r0, [r7, #12]
 8012b9c:	f000 fd3c 	bl	8013618 <I2C_WaitOnTXEFlagUntilTimeout>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00d      	beq.n	8012bc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012baa:	2b04      	cmp	r3, #4
 8012bac:	d107      	bne.n	8012bbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	e06b      	b.n	8012c9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bc6:	781a      	ldrb	r2, [r3, #0]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bd2:	1c5a      	adds	r2, r3, #1
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	3b01      	subs	r3, #1
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bea:	3b01      	subs	r3, #1
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	695b      	ldr	r3, [r3, #20]
 8012bf8:	f003 0304 	and.w	r3, r3, #4
 8012bfc:	2b04      	cmp	r3, #4
 8012bfe:	d11b      	bne.n	8012c38 <HAL_I2C_Master_Transmit+0x188>
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d017      	beq.n	8012c38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c0c:	781a      	ldrb	r2, [r3, #0]
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c18:	1c5a      	adds	r2, r3, #1
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	3b01      	subs	r3, #1
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c30:	3b01      	subs	r3, #1
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012c38:	697a      	ldr	r2, [r7, #20]
 8012c3a:	6a39      	ldr	r1, [r7, #32]
 8012c3c:	68f8      	ldr	r0, [r7, #12]
 8012c3e:	f000 fd33 	bl	80136a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d00d      	beq.n	8012c64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c4c:	2b04      	cmp	r3, #4
 8012c4e:	d107      	bne.n	8012c60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012c5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	e01a      	b.n	8012c9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d194      	bne.n	8012b96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2220      	movs	r2, #32
 8012c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2200      	movs	r2, #0
 8012c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8012c94:	2300      	movs	r3, #0
 8012c96:	e000      	b.n	8012c9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012c98:	2302      	movs	r3, #2
  }
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3718      	adds	r7, #24
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	00100002 	.word	0x00100002
 8012ca8:	ffff0000 	.word	0xffff0000

08012cac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08c      	sub	sp, #48	@ 0x30
 8012cb0:	af02      	add	r7, sp, #8
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	607a      	str	r2, [r7, #4]
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	460b      	mov	r3, r1
 8012cba:	817b      	strh	r3, [r7, #10]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012cc0:	f7ff f9da 	bl	8012078 <HAL_GetTick>
 8012cc4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ccc:	b2db      	uxtb	r3, r3
 8012cce:	2b20      	cmp	r3, #32
 8012cd0:	f040 8217 	bne.w	8013102 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	2319      	movs	r3, #25
 8012cda:	2201      	movs	r2, #1
 8012cdc:	497c      	ldr	r1, [pc, #496]	@ (8012ed0 <HAL_I2C_Master_Receive+0x224>)
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f000 fb80 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8012cea:	2302      	movs	r3, #2
 8012cec:	e20a      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d101      	bne.n	8012cfc <HAL_I2C_Master_Receive+0x50>
 8012cf8:	2302      	movs	r3, #2
 8012cfa:	e203      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f003 0301 	and.w	r3, r3, #1
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d007      	beq.n	8012d22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	f042 0201 	orr.w	r2, r2, #1
 8012d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2222      	movs	r2, #34	@ 0x22
 8012d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2210      	movs	r2, #16
 8012d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2200      	movs	r2, #0
 8012d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	893a      	ldrh	r2, [r7, #8]
 8012d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	4a5c      	ldr	r2, [pc, #368]	@ (8012ed4 <HAL_I2C_Master_Receive+0x228>)
 8012d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012d64:	8979      	ldrh	r1, [r7, #10]
 8012d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	f000 fa6c 	bl	8013248 <I2C_MasterRequestRead>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d001      	beq.n	8012d7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8012d76:	2301      	movs	r3, #1
 8012d78:	e1c4      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d113      	bne.n	8012daa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012d82:	2300      	movs	r3, #0
 8012d84:	623b      	str	r3, [r7, #32]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	695b      	ldr	r3, [r3, #20]
 8012d8c:	623b      	str	r3, [r7, #32]
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	699b      	ldr	r3, [r3, #24]
 8012d94:	623b      	str	r3, [r7, #32]
 8012d96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012da6:	601a      	str	r2, [r3, #0]
 8012da8:	e198      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d11b      	bne.n	8012dea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	61fb      	str	r3, [r7, #28]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	695b      	ldr	r3, [r3, #20]
 8012dcc:	61fb      	str	r3, [r7, #28]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	699b      	ldr	r3, [r3, #24]
 8012dd4:	61fb      	str	r3, [r7, #28]
 8012dd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	e178      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dee:	2b02      	cmp	r3, #2
 8012df0:	d11b      	bne.n	8012e2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012e00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012e12:	2300      	movs	r3, #0
 8012e14:	61bb      	str	r3, [r7, #24]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	695b      	ldr	r3, [r3, #20]
 8012e1c:	61bb      	str	r3, [r7, #24]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	699b      	ldr	r3, [r3, #24]
 8012e24:	61bb      	str	r3, [r7, #24]
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	e158      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	617b      	str	r3, [r7, #20]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	695b      	ldr	r3, [r3, #20]
 8012e44:	617b      	str	r3, [r7, #20]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	699b      	ldr	r3, [r3, #24]
 8012e4c:	617b      	str	r3, [r7, #20]
 8012e4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012e50:	e144      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	f200 80f1 	bhi.w	801303e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d123      	bne.n	8012eac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012e68:	68f8      	ldr	r0, [r7, #12]
 8012e6a:	f000 fc65 	bl	8013738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d001      	beq.n	8012e78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012e74:	2301      	movs	r3, #1
 8012e76:	e145      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	691a      	ldr	r2, [r3, #16]
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e82:	b2d2      	uxtb	r2, r2
 8012e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e94:	3b01      	subs	r3, #1
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	3b01      	subs	r3, #1
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012eaa:	e117      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012eb0:	2b02      	cmp	r3, #2
 8012eb2:	d14e      	bne.n	8012f52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eba:	2200      	movs	r2, #0
 8012ebc:	4906      	ldr	r1, [pc, #24]	@ (8012ed8 <HAL_I2C_Master_Receive+0x22c>)
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f000 fa90 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d008      	beq.n	8012edc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e11a      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
 8012ece:	bf00      	nop
 8012ed0:	00100002 	.word	0x00100002
 8012ed4:	ffff0000 	.word	0xffff0000
 8012ed8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	691a      	ldr	r2, [r3, #16]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ef6:	b2d2      	uxtb	r2, r2
 8012ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012efe:	1c5a      	adds	r2, r3, #1
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	3b01      	subs	r3, #1
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	691a      	ldr	r2, [r3, #16]
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f28:	b2d2      	uxtb	r2, r2
 8012f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f30:	1c5a      	adds	r2, r3, #1
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	b29a      	uxth	r2, r3
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012f50:	e0c4      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f54:	9300      	str	r3, [sp, #0]
 8012f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f58:	2200      	movs	r2, #0
 8012f5a:	496c      	ldr	r1, [pc, #432]	@ (801310c <HAL_I2C_Master_Receive+0x460>)
 8012f5c:	68f8      	ldr	r0, [r7, #12]
 8012f5e:	f000 fa41 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d001      	beq.n	8012f6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	e0cb      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	691a      	ldr	r2, [r3, #16]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f86:	b2d2      	uxtb	r2, r2
 8012f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f8e:	1c5a      	adds	r2, r3, #1
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	4955      	ldr	r1, [pc, #340]	@ (801310c <HAL_I2C_Master_Receive+0x460>)
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 fa13 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d001      	beq.n	8012fc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e09d      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	691a      	ldr	r2, [r3, #16]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe2:	b2d2      	uxtb	r2, r2
 8012fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fea:	1c5a      	adds	r2, r3, #1
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013000:	b29b      	uxth	r3, r3
 8013002:	3b01      	subs	r3, #1
 8013004:	b29a      	uxth	r2, r3
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	691a      	ldr	r2, [r3, #16]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013014:	b2d2      	uxtb	r2, r2
 8013016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801301c:	1c5a      	adds	r2, r3, #1
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013026:	3b01      	subs	r3, #1
 8013028:	b29a      	uxth	r2, r3
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013032:	b29b      	uxth	r3, r3
 8013034:	3b01      	subs	r3, #1
 8013036:	b29a      	uxth	r2, r3
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801303c:	e04e      	b.n	80130dc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801303e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013040:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	f000 fb78 	bl	8013738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d001      	beq.n	8013052 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 801304e:	2301      	movs	r3, #1
 8013050:	e058      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	691a      	ldr	r2, [r3, #16]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801305c:	b2d2      	uxtb	r2, r2
 801305e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013064:	1c5a      	adds	r2, r3, #1
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801306e:	3b01      	subs	r3, #1
 8013070:	b29a      	uxth	r2, r3
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801307a:	b29b      	uxth	r3, r3
 801307c:	3b01      	subs	r3, #1
 801307e:	b29a      	uxth	r2, r3
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	695b      	ldr	r3, [r3, #20]
 801308a:	f003 0304 	and.w	r3, r3, #4
 801308e:	2b04      	cmp	r3, #4
 8013090:	d124      	bne.n	80130dc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013096:	2b03      	cmp	r3, #3
 8013098:	d107      	bne.n	80130aa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80130a8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	691a      	ldr	r2, [r3, #16]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130b4:	b2d2      	uxtb	r2, r2
 80130b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130bc:	1c5a      	adds	r2, r3, #1
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130c6:	3b01      	subs	r3, #1
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	3b01      	subs	r3, #1
 80130d6:	b29a      	uxth	r2, r3
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f47f aeb6 	bne.w	8012e52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2220      	movs	r2, #32
 80130ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2200      	movs	r2, #0
 80130f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2200      	movs	r2, #0
 80130fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80130fe:	2300      	movs	r3, #0
 8013100:	e000      	b.n	8013104 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8013102:	2302      	movs	r3, #2
  }
}
 8013104:	4618      	mov	r0, r3
 8013106:	3728      	adds	r7, #40	@ 0x28
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	00010004 	.word	0x00010004

08013110 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801311e:	b2db      	uxtb	r3, r3
}
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr

0801312c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8013138:	4618      	mov	r0, r3
 801313a:	370c      	adds	r7, #12
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr

08013144 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b088      	sub	sp, #32
 8013148:	af02      	add	r7, sp, #8
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	607a      	str	r2, [r7, #4]
 801314e:	603b      	str	r3, [r7, #0]
 8013150:	460b      	mov	r3, r1
 8013152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013158:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	2b08      	cmp	r3, #8
 801315e:	d006      	beq.n	801316e <I2C_MasterRequestWrite+0x2a>
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	2b01      	cmp	r3, #1
 8013164:	d003      	beq.n	801316e <I2C_MasterRequestWrite+0x2a>
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801316c:	d108      	bne.n	8013180 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	681a      	ldr	r2, [r3, #0]
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801317c:	601a      	str	r2, [r3, #0]
 801317e:	e00b      	b.n	8013198 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013184:	2b12      	cmp	r3, #18
 8013186:	d107      	bne.n	8013198 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013196:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2200      	movs	r2, #0
 80131a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f000 f91d 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00d      	beq.n	80131cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80131ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131be:	d103      	bne.n	80131c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80131c8:	2303      	movs	r3, #3
 80131ca:	e035      	b.n	8013238 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80131d4:	d108      	bne.n	80131e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80131d6:	897b      	ldrh	r3, [r7, #10]
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	461a      	mov	r2, r3
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80131e4:	611a      	str	r2, [r3, #16]
 80131e6:	e01b      	b.n	8013220 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80131e8:	897b      	ldrh	r3, [r7, #10]
 80131ea:	11db      	asrs	r3, r3, #7
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	f003 0306 	and.w	r3, r3, #6
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	f063 030f 	orn	r3, r3, #15
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	490e      	ldr	r1, [pc, #56]	@ (8013240 <I2C_MasterRequestWrite+0xfc>)
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	f000 f966 	bl	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d001      	beq.n	8013216 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8013212:	2301      	movs	r3, #1
 8013214:	e010      	b.n	8013238 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013216:	897b      	ldrh	r3, [r7, #10]
 8013218:	b2da      	uxtb	r2, r3
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	4907      	ldr	r1, [pc, #28]	@ (8013244 <I2C_MasterRequestWrite+0x100>)
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 f956 	bl	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d001      	beq.n	8013236 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8013232:	2301      	movs	r3, #1
 8013234:	e000      	b.n	8013238 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3718      	adds	r7, #24
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	00010008 	.word	0x00010008
 8013244:	00010002 	.word	0x00010002

08013248 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b088      	sub	sp, #32
 801324c:	af02      	add	r7, sp, #8
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	607a      	str	r2, [r7, #4]
 8013252:	603b      	str	r3, [r7, #0]
 8013254:	460b      	mov	r3, r1
 8013256:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801325c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	681a      	ldr	r2, [r3, #0]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801326c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	2b08      	cmp	r3, #8
 8013272:	d006      	beq.n	8013282 <I2C_MasterRequestRead+0x3a>
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	2b01      	cmp	r3, #1
 8013278:	d003      	beq.n	8013282 <I2C_MasterRequestRead+0x3a>
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8013280:	d108      	bne.n	8013294 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013290:	601a      	str	r2, [r3, #0]
 8013292:	e00b      	b.n	80132ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013298:	2b11      	cmp	r3, #17
 801329a:	d107      	bne.n	80132ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80132aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	9300      	str	r3, [sp, #0]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f000 f893 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00d      	beq.n	80132e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132d2:	d103      	bne.n	80132dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80132dc:	2303      	movs	r3, #3
 80132de:	e079      	b.n	80133d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	691b      	ldr	r3, [r3, #16]
 80132e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80132e8:	d108      	bne.n	80132fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80132ea:	897b      	ldrh	r3, [r7, #10]
 80132ec:	b2db      	uxtb	r3, r3
 80132ee:	f043 0301 	orr.w	r3, r3, #1
 80132f2:	b2da      	uxtb	r2, r3
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	611a      	str	r2, [r3, #16]
 80132fa:	e05f      	b.n	80133bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80132fc:	897b      	ldrh	r3, [r7, #10]
 80132fe:	11db      	asrs	r3, r3, #7
 8013300:	b2db      	uxtb	r3, r3
 8013302:	f003 0306 	and.w	r3, r3, #6
 8013306:	b2db      	uxtb	r3, r3
 8013308:	f063 030f 	orn	r3, r3, #15
 801330c:	b2da      	uxtb	r2, r3
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	4930      	ldr	r1, [pc, #192]	@ (80133dc <I2C_MasterRequestRead+0x194>)
 801331a:	68f8      	ldr	r0, [r7, #12]
 801331c:	f000 f8dc 	bl	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013320:	4603      	mov	r3, r0
 8013322:	2b00      	cmp	r3, #0
 8013324:	d001      	beq.n	801332a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8013326:	2301      	movs	r3, #1
 8013328:	e054      	b.n	80133d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801332a:	897b      	ldrh	r3, [r7, #10]
 801332c:	b2da      	uxtb	r2, r3
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	4929      	ldr	r1, [pc, #164]	@ (80133e0 <I2C_MasterRequestRead+0x198>)
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f000 f8cc 	bl	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013340:	4603      	mov	r3, r0
 8013342:	2b00      	cmp	r3, #0
 8013344:	d001      	beq.n	801334a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8013346:	2301      	movs	r3, #1
 8013348:	e044      	b.n	80133d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801334a:	2300      	movs	r3, #0
 801334c:	613b      	str	r3, [r7, #16]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	695b      	ldr	r3, [r3, #20]
 8013354:	613b      	str	r3, [r7, #16]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	699b      	ldr	r3, [r3, #24]
 801335c:	613b      	str	r3, [r7, #16]
 801335e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801336e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f000 f831 	bl	80133e4 <I2C_WaitOnFlagUntilTimeout>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d00d      	beq.n	80133a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013396:	d103      	bne.n	80133a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801339e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80133a0:	2303      	movs	r3, #3
 80133a2:	e017      	b.n	80133d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80133a4:	897b      	ldrh	r3, [r7, #10]
 80133a6:	11db      	asrs	r3, r3, #7
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	f003 0306 	and.w	r3, r3, #6
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	f063 030e 	orn	r3, r3, #14
 80133b4:	b2da      	uxtb	r2, r3
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	4907      	ldr	r1, [pc, #28]	@ (80133e0 <I2C_MasterRequestRead+0x198>)
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f000 f888 	bl	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d001      	beq.n	80133d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80133ce:	2301      	movs	r3, #1
 80133d0:	e000      	b.n	80133d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3718      	adds	r7, #24
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	00010008 	.word	0x00010008
 80133e0:	00010002 	.word	0x00010002

080133e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	603b      	str	r3, [r7, #0]
 80133f0:	4613      	mov	r3, r2
 80133f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80133f4:	e048      	b.n	8013488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fc:	d044      	beq.n	8013488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80133fe:	f7fe fe3b 	bl	8012078 <HAL_GetTick>
 8013402:	4602      	mov	r2, r0
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	683a      	ldr	r2, [r7, #0]
 801340a:	429a      	cmp	r2, r3
 801340c:	d302      	bcc.n	8013414 <I2C_WaitOnFlagUntilTimeout+0x30>
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d139      	bne.n	8013488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	0c1b      	lsrs	r3, r3, #16
 8013418:	b2db      	uxtb	r3, r3
 801341a:	2b01      	cmp	r3, #1
 801341c:	d10d      	bne.n	801343a <I2C_WaitOnFlagUntilTimeout+0x56>
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	695b      	ldr	r3, [r3, #20]
 8013424:	43da      	mvns	r2, r3
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	4013      	ands	r3, r2
 801342a:	b29b      	uxth	r3, r3
 801342c:	2b00      	cmp	r3, #0
 801342e:	bf0c      	ite	eq
 8013430:	2301      	moveq	r3, #1
 8013432:	2300      	movne	r3, #0
 8013434:	b2db      	uxtb	r3, r3
 8013436:	461a      	mov	r2, r3
 8013438:	e00c      	b.n	8013454 <I2C_WaitOnFlagUntilTimeout+0x70>
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	699b      	ldr	r3, [r3, #24]
 8013440:	43da      	mvns	r2, r3
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	4013      	ands	r3, r2
 8013446:	b29b      	uxth	r3, r3
 8013448:	2b00      	cmp	r3, #0
 801344a:	bf0c      	ite	eq
 801344c:	2301      	moveq	r3, #1
 801344e:	2300      	movne	r3, #0
 8013450:	b2db      	uxtb	r3, r3
 8013452:	461a      	mov	r2, r3
 8013454:	79fb      	ldrb	r3, [r7, #7]
 8013456:	429a      	cmp	r2, r3
 8013458:	d116      	bne.n	8013488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	2200      	movs	r2, #0
 801345e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2220      	movs	r2, #32
 8013464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2200      	movs	r2, #0
 801346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013474:	f043 0220 	orr.w	r2, r3, #32
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2200      	movs	r2, #0
 8013480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8013484:	2301      	movs	r3, #1
 8013486:	e023      	b.n	80134d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	0c1b      	lsrs	r3, r3, #16
 801348c:	b2db      	uxtb	r3, r3
 801348e:	2b01      	cmp	r3, #1
 8013490:	d10d      	bne.n	80134ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	695b      	ldr	r3, [r3, #20]
 8013498:	43da      	mvns	r2, r3
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	4013      	ands	r3, r2
 801349e:	b29b      	uxth	r3, r3
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	bf0c      	ite	eq
 80134a4:	2301      	moveq	r3, #1
 80134a6:	2300      	movne	r3, #0
 80134a8:	b2db      	uxtb	r3, r3
 80134aa:	461a      	mov	r2, r3
 80134ac:	e00c      	b.n	80134c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	43da      	mvns	r2, r3
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	4013      	ands	r3, r2
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	2b00      	cmp	r3, #0
 80134be:	bf0c      	ite	eq
 80134c0:	2301      	moveq	r3, #1
 80134c2:	2300      	movne	r3, #0
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	461a      	mov	r2, r3
 80134c8:	79fb      	ldrb	r3, [r7, #7]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d093      	beq.n	80133f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3710      	adds	r7, #16
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b084      	sub	sp, #16
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
 80134e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80134e6:	e071      	b.n	80135cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	695b      	ldr	r3, [r3, #20]
 80134ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80134f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80134f6:	d123      	bne.n	8013540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8013510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2200      	movs	r2, #0
 8013516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2220      	movs	r2, #32
 801351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2200      	movs	r2, #0
 8013524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801352c:	f043 0204 	orr.w	r2, r3, #4
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2200      	movs	r2, #0
 8013538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 801353c:	2301      	movs	r3, #1
 801353e:	e067      	b.n	8013610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013546:	d041      	beq.n	80135cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013548:	f7fe fd96 	bl	8012078 <HAL_GetTick>
 801354c:	4602      	mov	r2, r0
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	429a      	cmp	r2, r3
 8013556:	d302      	bcc.n	801355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d136      	bne.n	80135cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	0c1b      	lsrs	r3, r3, #16
 8013562:	b2db      	uxtb	r3, r3
 8013564:	2b01      	cmp	r3, #1
 8013566:	d10c      	bne.n	8013582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	43da      	mvns	r2, r3
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	4013      	ands	r3, r2
 8013574:	b29b      	uxth	r3, r3
 8013576:	2b00      	cmp	r3, #0
 8013578:	bf14      	ite	ne
 801357a:	2301      	movne	r3, #1
 801357c:	2300      	moveq	r3, #0
 801357e:	b2db      	uxtb	r3, r3
 8013580:	e00b      	b.n	801359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	699b      	ldr	r3, [r3, #24]
 8013588:	43da      	mvns	r2, r3
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	4013      	ands	r3, r2
 801358e:	b29b      	uxth	r3, r3
 8013590:	2b00      	cmp	r3, #0
 8013592:	bf14      	ite	ne
 8013594:	2301      	movne	r3, #1
 8013596:	2300      	moveq	r3, #0
 8013598:	b2db      	uxtb	r3, r3
 801359a:	2b00      	cmp	r3, #0
 801359c:	d016      	beq.n	80135cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2200      	movs	r2, #0
 80135a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2220      	movs	r2, #32
 80135a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135b8:	f043 0220 	orr.w	r2, r3, #32
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80135c8:	2301      	movs	r3, #1
 80135ca:	e021      	b.n	8013610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	0c1b      	lsrs	r3, r3, #16
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d10c      	bne.n	80135f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	695b      	ldr	r3, [r3, #20]
 80135dc:	43da      	mvns	r2, r3
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	4013      	ands	r3, r2
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	bf14      	ite	ne
 80135e8:	2301      	movne	r3, #1
 80135ea:	2300      	moveq	r3, #0
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	e00b      	b.n	8013608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	699b      	ldr	r3, [r3, #24]
 80135f6:	43da      	mvns	r2, r3
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	4013      	ands	r3, r2
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	2b00      	cmp	r3, #0
 8013600:	bf14      	ite	ne
 8013602:	2301      	movne	r3, #1
 8013604:	2300      	moveq	r3, #0
 8013606:	b2db      	uxtb	r3, r3
 8013608:	2b00      	cmp	r3, #0
 801360a:	f47f af6d 	bne.w	80134e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 801360e:	2300      	movs	r3, #0
}
 8013610:	4618      	mov	r0, r3
 8013612:	3710      	adds	r7, #16
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013624:	e034      	b.n	8013690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f000 f8e3 	bl	80137f2 <I2C_IsAcknowledgeFailed>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d001      	beq.n	8013636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013632:	2301      	movs	r3, #1
 8013634:	e034      	b.n	80136a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801363c:	d028      	beq.n	8013690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801363e:	f7fe fd1b 	bl	8012078 <HAL_GetTick>
 8013642:	4602      	mov	r2, r0
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	429a      	cmp	r2, r3
 801364c:	d302      	bcc.n	8013654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d11d      	bne.n	8013690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	695b      	ldr	r3, [r3, #20]
 801365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801365e:	2b80      	cmp	r3, #128	@ 0x80
 8013660:	d016      	beq.n	8013690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2200      	movs	r2, #0
 8013666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2220      	movs	r2, #32
 801366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2200      	movs	r2, #0
 8013674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367c:	f043 0220 	orr.w	r2, r3, #32
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 801368c:	2301      	movs	r3, #1
 801368e:	e007      	b.n	80136a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	695b      	ldr	r3, [r3, #20]
 8013696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801369a:	2b80      	cmp	r3, #128	@ 0x80
 801369c:	d1c3      	bne.n	8013626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801369e:	2300      	movs	r3, #0
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3710      	adds	r7, #16
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80136b4:	e034      	b.n	8013720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80136b6:	68f8      	ldr	r0, [r7, #12]
 80136b8:	f000 f89b 	bl	80137f2 <I2C_IsAcknowledgeFailed>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d001      	beq.n	80136c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80136c2:	2301      	movs	r3, #1
 80136c4:	e034      	b.n	8013730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136cc:	d028      	beq.n	8013720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80136ce:	f7fe fcd3 	bl	8012078 <HAL_GetTick>
 80136d2:	4602      	mov	r2, r0
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	68ba      	ldr	r2, [r7, #8]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d302      	bcc.n	80136e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d11d      	bne.n	8013720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	695b      	ldr	r3, [r3, #20]
 80136ea:	f003 0304 	and.w	r3, r3, #4
 80136ee:	2b04      	cmp	r3, #4
 80136f0:	d016      	beq.n	8013720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	2200      	movs	r2, #0
 80136f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2220      	movs	r2, #32
 80136fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2200      	movs	r2, #0
 8013704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801370c:	f043 0220 	orr.w	r2, r3, #32
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2200      	movs	r2, #0
 8013718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 801371c:	2301      	movs	r3, #1
 801371e:	e007      	b.n	8013730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	695b      	ldr	r3, [r3, #20]
 8013726:	f003 0304 	and.w	r3, r3, #4
 801372a:	2b04      	cmp	r3, #4
 801372c:	d1c3      	bne.n	80136b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801372e:	2300      	movs	r3, #0
}
 8013730:	4618      	mov	r0, r3
 8013732:	3710      	adds	r7, #16
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013744:	e049      	b.n	80137da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	695b      	ldr	r3, [r3, #20]
 801374c:	f003 0310 	and.w	r3, r3, #16
 8013750:	2b10      	cmp	r3, #16
 8013752:	d119      	bne.n	8013788 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f06f 0210 	mvn.w	r2, #16
 801375c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2200      	movs	r2, #0
 8013762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2220      	movs	r2, #32
 8013768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2200      	movs	r2, #0
 8013770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	2200      	movs	r2, #0
 8013780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8013784:	2301      	movs	r3, #1
 8013786:	e030      	b.n	80137ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013788:	f7fe fc76 	bl	8012078 <HAL_GetTick>
 801378c:	4602      	mov	r2, r0
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	1ad3      	subs	r3, r2, r3
 8013792:	68ba      	ldr	r2, [r7, #8]
 8013794:	429a      	cmp	r2, r3
 8013796:	d302      	bcc.n	801379e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d11d      	bne.n	80137da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	695b      	ldr	r3, [r3, #20]
 80137a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137a8:	2b40      	cmp	r3, #64	@ 0x40
 80137aa:	d016      	beq.n	80137da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2200      	movs	r2, #0
 80137b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	2220      	movs	r2, #32
 80137b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2200      	movs	r2, #0
 80137be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137c6:	f043 0220 	orr.w	r2, r3, #32
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2200      	movs	r2, #0
 80137d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80137d6:	2301      	movs	r3, #1
 80137d8:	e007      	b.n	80137ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	695b      	ldr	r3, [r3, #20]
 80137e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137e4:	2b40      	cmp	r3, #64	@ 0x40
 80137e6:	d1ae      	bne.n	8013746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80137e8:	2300      	movs	r3, #0
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80137f2:	b480      	push	{r7}
 80137f4:	b083      	sub	sp, #12
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	695b      	ldr	r3, [r3, #20]
 8013800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013808:	d11b      	bne.n	8013842 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8013812:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2200      	movs	r2, #0
 8013818:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2220      	movs	r2, #32
 801381e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2200      	movs	r2, #0
 8013826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801382e:	f043 0204 	orr.w	r2, r3, #4
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2200      	movs	r2, #0
 801383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 801383e:	2301      	movs	r3, #1
 8013840:	e000      	b.n	8013844 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013860:	2301      	movs	r3, #1
 8013862:	e0cc      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013864:	4b68      	ldr	r3, [pc, #416]	@ (8013a08 <HAL_RCC_ClockConfig+0x1b8>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f003 030f 	and.w	r3, r3, #15
 801386c:	683a      	ldr	r2, [r7, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	d90c      	bls.n	801388c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013872:	4b65      	ldr	r3, [pc, #404]	@ (8013a08 <HAL_RCC_ClockConfig+0x1b8>)
 8013874:	683a      	ldr	r2, [r7, #0]
 8013876:	b2d2      	uxtb	r2, r2
 8013878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801387a:	4b63      	ldr	r3, [pc, #396]	@ (8013a08 <HAL_RCC_ClockConfig+0x1b8>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	f003 030f 	and.w	r3, r3, #15
 8013882:	683a      	ldr	r2, [r7, #0]
 8013884:	429a      	cmp	r2, r3
 8013886:	d001      	beq.n	801388c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013888:	2301      	movs	r3, #1
 801388a:	e0b8      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f003 0302 	and.w	r3, r3, #2
 8013894:	2b00      	cmp	r3, #0
 8013896:	d020      	beq.n	80138da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f003 0304 	and.w	r3, r3, #4
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d005      	beq.n	80138b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80138a4:	4b59      	ldr	r3, [pc, #356]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	4a58      	ldr	r2, [pc, #352]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80138ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f003 0308 	and.w	r3, r3, #8
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d005      	beq.n	80138c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80138bc:	4b53      	ldr	r3, [pc, #332]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138be:	689b      	ldr	r3, [r3, #8]
 80138c0:	4a52      	ldr	r2, [pc, #328]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80138c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80138c8:	4b50      	ldr	r3, [pc, #320]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138ca:	689b      	ldr	r3, [r3, #8]
 80138cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	689b      	ldr	r3, [r3, #8]
 80138d4:	494d      	ldr	r1, [pc, #308]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138d6:	4313      	orrs	r3, r2
 80138d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	f003 0301 	and.w	r3, r3, #1
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d044      	beq.n	8013970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d107      	bne.n	80138fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80138ee:	4b47      	ldr	r3, [pc, #284]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d119      	bne.n	801392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80138fa:	2301      	movs	r3, #1
 80138fc:	e07f      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	2b02      	cmp	r3, #2
 8013904:	d003      	beq.n	801390e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801390a:	2b03      	cmp	r3, #3
 801390c:	d107      	bne.n	801391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801390e:	4b3f      	ldr	r3, [pc, #252]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013916:	2b00      	cmp	r3, #0
 8013918:	d109      	bne.n	801392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801391a:	2301      	movs	r3, #1
 801391c:	e06f      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801391e:	4b3b      	ldr	r3, [pc, #236]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f003 0302 	and.w	r3, r3, #2
 8013926:	2b00      	cmp	r3, #0
 8013928:	d101      	bne.n	801392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801392a:	2301      	movs	r3, #1
 801392c:	e067      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801392e:	4b37      	ldr	r3, [pc, #220]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 8013930:	689b      	ldr	r3, [r3, #8]
 8013932:	f023 0203 	bic.w	r2, r3, #3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	4934      	ldr	r1, [pc, #208]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 801393c:	4313      	orrs	r3, r2
 801393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013940:	f7fe fb9a 	bl	8012078 <HAL_GetTick>
 8013944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013946:	e00a      	b.n	801395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013948:	f7fe fb96 	bl	8012078 <HAL_GetTick>
 801394c:	4602      	mov	r2, r0
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013956:	4293      	cmp	r3, r2
 8013958:	d901      	bls.n	801395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801395a:	2303      	movs	r3, #3
 801395c:	e04f      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801395e:	4b2b      	ldr	r3, [pc, #172]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	f003 020c 	and.w	r2, r3, #12
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	429a      	cmp	r2, r3
 801396e:	d1eb      	bne.n	8013948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013970:	4b25      	ldr	r3, [pc, #148]	@ (8013a08 <HAL_RCC_ClockConfig+0x1b8>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f003 030f 	and.w	r3, r3, #15
 8013978:	683a      	ldr	r2, [r7, #0]
 801397a:	429a      	cmp	r2, r3
 801397c:	d20c      	bcs.n	8013998 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801397e:	4b22      	ldr	r3, [pc, #136]	@ (8013a08 <HAL_RCC_ClockConfig+0x1b8>)
 8013980:	683a      	ldr	r2, [r7, #0]
 8013982:	b2d2      	uxtb	r2, r2
 8013984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013986:	4b20      	ldr	r3, [pc, #128]	@ (8013a08 <HAL_RCC_ClockConfig+0x1b8>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f003 030f 	and.w	r3, r3, #15
 801398e:	683a      	ldr	r2, [r7, #0]
 8013990:	429a      	cmp	r2, r3
 8013992:	d001      	beq.n	8013998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013994:	2301      	movs	r3, #1
 8013996:	e032      	b.n	80139fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f003 0304 	and.w	r3, r3, #4
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d008      	beq.n	80139b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80139a4:	4b19      	ldr	r3, [pc, #100]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80139a6:	689b      	ldr	r3, [r3, #8]
 80139a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	4916      	ldr	r1, [pc, #88]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80139b2:	4313      	orrs	r3, r2
 80139b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0308 	and.w	r3, r3, #8
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d009      	beq.n	80139d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80139c2:	4b12      	ldr	r3, [pc, #72]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	691b      	ldr	r3, [r3, #16]
 80139ce:	00db      	lsls	r3, r3, #3
 80139d0:	490e      	ldr	r1, [pc, #56]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80139d2:	4313      	orrs	r3, r2
 80139d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80139d6:	f000 f855 	bl	8013a84 <HAL_RCC_GetSysClockFreq>
 80139da:	4602      	mov	r2, r0
 80139dc:	4b0b      	ldr	r3, [pc, #44]	@ (8013a0c <HAL_RCC_ClockConfig+0x1bc>)
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	091b      	lsrs	r3, r3, #4
 80139e2:	f003 030f 	and.w	r3, r3, #15
 80139e6:	490a      	ldr	r1, [pc, #40]	@ (8013a10 <HAL_RCC_ClockConfig+0x1c0>)
 80139e8:	5ccb      	ldrb	r3, [r1, r3]
 80139ea:	fa22 f303 	lsr.w	r3, r2, r3
 80139ee:	4a09      	ldr	r2, [pc, #36]	@ (8013a14 <HAL_RCC_ClockConfig+0x1c4>)
 80139f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80139f2:	4b09      	ldr	r3, [pc, #36]	@ (8013a18 <HAL_RCC_ClockConfig+0x1c8>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fe fafa 	bl	8011ff0 <HAL_InitTick>

  return HAL_OK;
 80139fc:	2300      	movs	r3, #0
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	40023c00 	.word	0x40023c00
 8013a0c:	40023800 	.word	0x40023800
 8013a10:	080176d8 	.word	0x080176d8
 8013a14:	20000000 	.word	0x20000000
 8013a18:	20000060 	.word	0x20000060

08013a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013a20:	4b03      	ldr	r3, [pc, #12]	@ (8013a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8013a22:	681b      	ldr	r3, [r3, #0]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	20000000 	.word	0x20000000

08013a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013a38:	f7ff fff0 	bl	8013a1c <HAL_RCC_GetHCLKFreq>
 8013a3c:	4602      	mov	r2, r0
 8013a3e:	4b05      	ldr	r3, [pc, #20]	@ (8013a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013a40:	689b      	ldr	r3, [r3, #8]
 8013a42:	0a9b      	lsrs	r3, r3, #10
 8013a44:	f003 0307 	and.w	r3, r3, #7
 8013a48:	4903      	ldr	r1, [pc, #12]	@ (8013a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013a4a:	5ccb      	ldrb	r3, [r1, r3]
 8013a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	40023800 	.word	0x40023800
 8013a58:	080176e8 	.word	0x080176e8

08013a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8013a60:	f7ff ffdc 	bl	8013a1c <HAL_RCC_GetHCLKFreq>
 8013a64:	4602      	mov	r2, r0
 8013a66:	4b05      	ldr	r3, [pc, #20]	@ (8013a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	0b5b      	lsrs	r3, r3, #13
 8013a6c:	f003 0307 	and.w	r3, r3, #7
 8013a70:	4903      	ldr	r1, [pc, #12]	@ (8013a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013a72:	5ccb      	ldrb	r3, [r1, r3]
 8013a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	40023800 	.word	0x40023800
 8013a80:	080176e8 	.word	0x080176e8

08013a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a88:	b0ae      	sub	sp, #184	@ 0xb8
 8013a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8013a92:	2300      	movs	r3, #0
 8013a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013aaa:	4bcb      	ldr	r3, [pc, #812]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013aac:	689b      	ldr	r3, [r3, #8]
 8013aae:	f003 030c 	and.w	r3, r3, #12
 8013ab2:	2b0c      	cmp	r3, #12
 8013ab4:	f200 8206 	bhi.w	8013ec4 <HAL_RCC_GetSysClockFreq+0x440>
 8013ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8013ac0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8013aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013abe:	bf00      	nop
 8013ac0:	08013af5 	.word	0x08013af5
 8013ac4:	08013ec5 	.word	0x08013ec5
 8013ac8:	08013ec5 	.word	0x08013ec5
 8013acc:	08013ec5 	.word	0x08013ec5
 8013ad0:	08013afd 	.word	0x08013afd
 8013ad4:	08013ec5 	.word	0x08013ec5
 8013ad8:	08013ec5 	.word	0x08013ec5
 8013adc:	08013ec5 	.word	0x08013ec5
 8013ae0:	08013b05 	.word	0x08013b05
 8013ae4:	08013ec5 	.word	0x08013ec5
 8013ae8:	08013ec5 	.word	0x08013ec5
 8013aec:	08013ec5 	.word	0x08013ec5
 8013af0:	08013cf5 	.word	0x08013cf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013af4:	4bb9      	ldr	r3, [pc, #740]	@ (8013ddc <HAL_RCC_GetSysClockFreq+0x358>)
 8013af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8013afa:	e1e7      	b.n	8013ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013afc:	4bb8      	ldr	r3, [pc, #736]	@ (8013de0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8013afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8013b02:	e1e3      	b.n	8013ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013b04:	4bb4      	ldr	r3, [pc, #720]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013b10:	4bb1      	ldr	r3, [pc, #708]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d071      	beq.n	8013c00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013b1c:	4bae      	ldr	r3, [pc, #696]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	099b      	lsrs	r3, r3, #6
 8013b22:	2200      	movs	r2, #0
 8013b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013b28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8013b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013b38:	2300      	movs	r3, #0
 8013b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8013b42:	4622      	mov	r2, r4
 8013b44:	462b      	mov	r3, r5
 8013b46:	f04f 0000 	mov.w	r0, #0
 8013b4a:	f04f 0100 	mov.w	r1, #0
 8013b4e:	0159      	lsls	r1, r3, #5
 8013b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013b54:	0150      	lsls	r0, r2, #5
 8013b56:	4602      	mov	r2, r0
 8013b58:	460b      	mov	r3, r1
 8013b5a:	4621      	mov	r1, r4
 8013b5c:	1a51      	subs	r1, r2, r1
 8013b5e:	6439      	str	r1, [r7, #64]	@ 0x40
 8013b60:	4629      	mov	r1, r5
 8013b62:	eb63 0301 	sbc.w	r3, r3, r1
 8013b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b68:	f04f 0200 	mov.w	r2, #0
 8013b6c:	f04f 0300 	mov.w	r3, #0
 8013b70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8013b74:	4649      	mov	r1, r9
 8013b76:	018b      	lsls	r3, r1, #6
 8013b78:	4641      	mov	r1, r8
 8013b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013b7e:	4641      	mov	r1, r8
 8013b80:	018a      	lsls	r2, r1, #6
 8013b82:	4641      	mov	r1, r8
 8013b84:	1a51      	subs	r1, r2, r1
 8013b86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8013b88:	4649      	mov	r1, r9
 8013b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8013b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b90:	f04f 0200 	mov.w	r2, #0
 8013b94:	f04f 0300 	mov.w	r3, #0
 8013b98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8013b9c:	4649      	mov	r1, r9
 8013b9e:	00cb      	lsls	r3, r1, #3
 8013ba0:	4641      	mov	r1, r8
 8013ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013ba6:	4641      	mov	r1, r8
 8013ba8:	00ca      	lsls	r2, r1, #3
 8013baa:	4610      	mov	r0, r2
 8013bac:	4619      	mov	r1, r3
 8013bae:	4603      	mov	r3, r0
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	189b      	adds	r3, r3, r2
 8013bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	460a      	mov	r2, r1
 8013bba:	eb42 0303 	adc.w	r3, r2, r3
 8013bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bc0:	f04f 0200 	mov.w	r2, #0
 8013bc4:	f04f 0300 	mov.w	r3, #0
 8013bc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8013bcc:	4629      	mov	r1, r5
 8013bce:	024b      	lsls	r3, r1, #9
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8013bd6:	4621      	mov	r1, r4
 8013bd8:	024a      	lsls	r2, r1, #9
 8013bda:	4610      	mov	r0, r2
 8013bdc:	4619      	mov	r1, r3
 8013bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013be2:	2200      	movs	r2, #0
 8013be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013bec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8013bf0:	f7ed f84a 	bl	8000c88 <__aeabi_uldivmod>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	460b      	mov	r3, r1
 8013bf8:	4613      	mov	r3, r2
 8013bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013bfe:	e067      	b.n	8013cd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013c00:	4b75      	ldr	r3, [pc, #468]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013c02:	685b      	ldr	r3, [r3, #4]
 8013c04:	099b      	lsrs	r3, r3, #6
 8013c06:	2200      	movs	r2, #0
 8013c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013c0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8013c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013c1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8013c22:	4622      	mov	r2, r4
 8013c24:	462b      	mov	r3, r5
 8013c26:	f04f 0000 	mov.w	r0, #0
 8013c2a:	f04f 0100 	mov.w	r1, #0
 8013c2e:	0159      	lsls	r1, r3, #5
 8013c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013c34:	0150      	lsls	r0, r2, #5
 8013c36:	4602      	mov	r2, r0
 8013c38:	460b      	mov	r3, r1
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	1a51      	subs	r1, r2, r1
 8013c3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8013c40:	4629      	mov	r1, r5
 8013c42:	eb63 0301 	sbc.w	r3, r3, r1
 8013c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c48:	f04f 0200 	mov.w	r2, #0
 8013c4c:	f04f 0300 	mov.w	r3, #0
 8013c50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8013c54:	4649      	mov	r1, r9
 8013c56:	018b      	lsls	r3, r1, #6
 8013c58:	4641      	mov	r1, r8
 8013c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013c5e:	4641      	mov	r1, r8
 8013c60:	018a      	lsls	r2, r1, #6
 8013c62:	4641      	mov	r1, r8
 8013c64:	ebb2 0a01 	subs.w	sl, r2, r1
 8013c68:	4649      	mov	r1, r9
 8013c6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8013c6e:	f04f 0200 	mov.w	r2, #0
 8013c72:	f04f 0300 	mov.w	r3, #0
 8013c76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8013c7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8013c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013c82:	4692      	mov	sl, r2
 8013c84:	469b      	mov	fp, r3
 8013c86:	4623      	mov	r3, r4
 8013c88:	eb1a 0303 	adds.w	r3, sl, r3
 8013c8c:	623b      	str	r3, [r7, #32]
 8013c8e:	462b      	mov	r3, r5
 8013c90:	eb4b 0303 	adc.w	r3, fp, r3
 8013c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c96:	f04f 0200 	mov.w	r2, #0
 8013c9a:	f04f 0300 	mov.w	r3, #0
 8013c9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	028b      	lsls	r3, r1, #10
 8013ca6:	4621      	mov	r1, r4
 8013ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013cac:	4621      	mov	r1, r4
 8013cae:	028a      	lsls	r2, r1, #10
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013cb8:	2200      	movs	r2, #0
 8013cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8013cbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8013cbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8013cc2:	f7ec ffe1 	bl	8000c88 <__aeabi_uldivmod>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	4613      	mov	r3, r2
 8013ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8013cd0:	4b41      	ldr	r3, [pc, #260]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	0c1b      	lsrs	r3, r3, #16
 8013cd6:	f003 0303 	and.w	r3, r3, #3
 8013cda:	3301      	adds	r3, #1
 8013cdc:	005b      	lsls	r3, r3, #1
 8013cde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8013ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8013ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8013cf2:	e0eb      	b.n	8013ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013cf4:	4b38      	ldr	r3, [pc, #224]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013d00:	4b35      	ldr	r3, [pc, #212]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d06b      	beq.n	8013de4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013d0c:	4b32      	ldr	r3, [pc, #200]	@ (8013dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	099b      	lsrs	r3, r3, #6
 8013d12:	2200      	movs	r2, #0
 8013d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013d16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8013d20:	2300      	movs	r3, #0
 8013d22:	667b      	str	r3, [r7, #100]	@ 0x64
 8013d24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8013d28:	4622      	mov	r2, r4
 8013d2a:	462b      	mov	r3, r5
 8013d2c:	f04f 0000 	mov.w	r0, #0
 8013d30:	f04f 0100 	mov.w	r1, #0
 8013d34:	0159      	lsls	r1, r3, #5
 8013d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013d3a:	0150      	lsls	r0, r2, #5
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	460b      	mov	r3, r1
 8013d40:	4621      	mov	r1, r4
 8013d42:	1a51      	subs	r1, r2, r1
 8013d44:	61b9      	str	r1, [r7, #24]
 8013d46:	4629      	mov	r1, r5
 8013d48:	eb63 0301 	sbc.w	r3, r3, r1
 8013d4c:	61fb      	str	r3, [r7, #28]
 8013d4e:	f04f 0200 	mov.w	r2, #0
 8013d52:	f04f 0300 	mov.w	r3, #0
 8013d56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8013d5a:	4659      	mov	r1, fp
 8013d5c:	018b      	lsls	r3, r1, #6
 8013d5e:	4651      	mov	r1, sl
 8013d60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013d64:	4651      	mov	r1, sl
 8013d66:	018a      	lsls	r2, r1, #6
 8013d68:	4651      	mov	r1, sl
 8013d6a:	ebb2 0801 	subs.w	r8, r2, r1
 8013d6e:	4659      	mov	r1, fp
 8013d70:	eb63 0901 	sbc.w	r9, r3, r1
 8013d74:	f04f 0200 	mov.w	r2, #0
 8013d78:	f04f 0300 	mov.w	r3, #0
 8013d7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013d80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013d84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013d88:	4690      	mov	r8, r2
 8013d8a:	4699      	mov	r9, r3
 8013d8c:	4623      	mov	r3, r4
 8013d8e:	eb18 0303 	adds.w	r3, r8, r3
 8013d92:	613b      	str	r3, [r7, #16]
 8013d94:	462b      	mov	r3, r5
 8013d96:	eb49 0303 	adc.w	r3, r9, r3
 8013d9a:	617b      	str	r3, [r7, #20]
 8013d9c:	f04f 0200 	mov.w	r2, #0
 8013da0:	f04f 0300 	mov.w	r3, #0
 8013da4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8013da8:	4629      	mov	r1, r5
 8013daa:	024b      	lsls	r3, r1, #9
 8013dac:	4621      	mov	r1, r4
 8013dae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8013db2:	4621      	mov	r1, r4
 8013db4:	024a      	lsls	r2, r1, #9
 8013db6:	4610      	mov	r0, r2
 8013db8:	4619      	mov	r1, r3
 8013dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013dc2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8013dc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8013dc8:	f7ec ff5e 	bl	8000c88 <__aeabi_uldivmod>
 8013dcc:	4602      	mov	r2, r0
 8013dce:	460b      	mov	r3, r1
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013dd6:	e065      	b.n	8013ea4 <HAL_RCC_GetSysClockFreq+0x420>
 8013dd8:	40023800 	.word	0x40023800
 8013ddc:	00f42400 	.word	0x00f42400
 8013de0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013de4:	4b3d      	ldr	r3, [pc, #244]	@ (8013edc <HAL_RCC_GetSysClockFreq+0x458>)
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	099b      	lsrs	r3, r3, #6
 8013dea:	2200      	movs	r2, #0
 8013dec:	4618      	mov	r0, r3
 8013dee:	4611      	mov	r1, r2
 8013df0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8013df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8013df6:	2300      	movs	r3, #0
 8013df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8013dfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8013dfe:	4642      	mov	r2, r8
 8013e00:	464b      	mov	r3, r9
 8013e02:	f04f 0000 	mov.w	r0, #0
 8013e06:	f04f 0100 	mov.w	r1, #0
 8013e0a:	0159      	lsls	r1, r3, #5
 8013e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013e10:	0150      	lsls	r0, r2, #5
 8013e12:	4602      	mov	r2, r0
 8013e14:	460b      	mov	r3, r1
 8013e16:	4641      	mov	r1, r8
 8013e18:	1a51      	subs	r1, r2, r1
 8013e1a:	60b9      	str	r1, [r7, #8]
 8013e1c:	4649      	mov	r1, r9
 8013e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8013e22:	60fb      	str	r3, [r7, #12]
 8013e24:	f04f 0200 	mov.w	r2, #0
 8013e28:	f04f 0300 	mov.w	r3, #0
 8013e2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8013e30:	4659      	mov	r1, fp
 8013e32:	018b      	lsls	r3, r1, #6
 8013e34:	4651      	mov	r1, sl
 8013e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013e3a:	4651      	mov	r1, sl
 8013e3c:	018a      	lsls	r2, r1, #6
 8013e3e:	4651      	mov	r1, sl
 8013e40:	1a54      	subs	r4, r2, r1
 8013e42:	4659      	mov	r1, fp
 8013e44:	eb63 0501 	sbc.w	r5, r3, r1
 8013e48:	f04f 0200 	mov.w	r2, #0
 8013e4c:	f04f 0300 	mov.w	r3, #0
 8013e50:	00eb      	lsls	r3, r5, #3
 8013e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013e56:	00e2      	lsls	r2, r4, #3
 8013e58:	4614      	mov	r4, r2
 8013e5a:	461d      	mov	r5, r3
 8013e5c:	4643      	mov	r3, r8
 8013e5e:	18e3      	adds	r3, r4, r3
 8013e60:	603b      	str	r3, [r7, #0]
 8013e62:	464b      	mov	r3, r9
 8013e64:	eb45 0303 	adc.w	r3, r5, r3
 8013e68:	607b      	str	r3, [r7, #4]
 8013e6a:	f04f 0200 	mov.w	r2, #0
 8013e6e:	f04f 0300 	mov.w	r3, #0
 8013e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013e76:	4629      	mov	r1, r5
 8013e78:	028b      	lsls	r3, r1, #10
 8013e7a:	4621      	mov	r1, r4
 8013e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013e80:	4621      	mov	r1, r4
 8013e82:	028a      	lsls	r2, r1, #10
 8013e84:	4610      	mov	r0, r2
 8013e86:	4619      	mov	r1, r3
 8013e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013e92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8013e96:	f7ec fef7 	bl	8000c88 <__aeabi_uldivmod>
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	4613      	mov	r3, r2
 8013ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8013ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8013edc <HAL_RCC_GetSysClockFreq+0x458>)
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	0f1b      	lsrs	r3, r3, #28
 8013eaa:	f003 0307 	and.w	r3, r3, #7
 8013eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8013eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8013eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8013ec2:	e003      	b.n	8013ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013ec4:	4b06      	ldr	r3, [pc, #24]	@ (8013ee0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8013ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8013eca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	37b8      	adds	r7, #184	@ 0xb8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013eda:	bf00      	nop
 8013edc:	40023800 	.word	0x40023800
 8013ee0:	00f42400 	.word	0x00f42400

08013ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b086      	sub	sp, #24
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e28d      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	f003 0301 	and.w	r3, r3, #1
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	f000 8083 	beq.w	801400a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8013f04:	4b94      	ldr	r3, [pc, #592]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f06:	689b      	ldr	r3, [r3, #8]
 8013f08:	f003 030c 	and.w	r3, r3, #12
 8013f0c:	2b04      	cmp	r3, #4
 8013f0e:	d019      	beq.n	8013f44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8013f10:	4b91      	ldr	r3, [pc, #580]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	f003 030c 	and.w	r3, r3, #12
        || \
 8013f18:	2b08      	cmp	r3, #8
 8013f1a:	d106      	bne.n	8013f2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8013f1c:	4b8e      	ldr	r3, [pc, #568]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013f28:	d00c      	beq.n	8013f44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f2c:	689b      	ldr	r3, [r3, #8]
 8013f2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8013f32:	2b0c      	cmp	r3, #12
 8013f34:	d112      	bne.n	8013f5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013f36:	4b88      	ldr	r3, [pc, #544]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013f42:	d10b      	bne.n	8013f5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013f44:	4b84      	ldr	r3, [pc, #528]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d05b      	beq.n	8014008 <HAL_RCC_OscConfig+0x124>
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d157      	bne.n	8014008 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e25a      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f64:	d106      	bne.n	8013f74 <HAL_RCC_OscConfig+0x90>
 8013f66:	4b7c      	ldr	r3, [pc, #496]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	4a7b      	ldr	r2, [pc, #492]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013f70:	6013      	str	r3, [r2, #0]
 8013f72:	e01d      	b.n	8013fb0 <HAL_RCC_OscConfig+0xcc>
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013f7c:	d10c      	bne.n	8013f98 <HAL_RCC_OscConfig+0xb4>
 8013f7e:	4b76      	ldr	r3, [pc, #472]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	4a75      	ldr	r2, [pc, #468]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013f88:	6013      	str	r3, [r2, #0]
 8013f8a:	4b73      	ldr	r3, [pc, #460]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4a72      	ldr	r2, [pc, #456]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013f94:	6013      	str	r3, [r2, #0]
 8013f96:	e00b      	b.n	8013fb0 <HAL_RCC_OscConfig+0xcc>
 8013f98:	4b6f      	ldr	r3, [pc, #444]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013fa2:	6013      	str	r3, [r2, #0]
 8013fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d013      	beq.n	8013fe0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013fb8:	f7fe f85e 	bl	8012078 <HAL_GetTick>
 8013fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013fbe:	e008      	b.n	8013fd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013fc0:	f7fe f85a 	bl	8012078 <HAL_GetTick>
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	1ad3      	subs	r3, r2, r3
 8013fca:	2b64      	cmp	r3, #100	@ 0x64
 8013fcc:	d901      	bls.n	8013fd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8013fce:	2303      	movs	r3, #3
 8013fd0:	e21f      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013fd2:	4b61      	ldr	r3, [pc, #388]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d0f0      	beq.n	8013fc0 <HAL_RCC_OscConfig+0xdc>
 8013fde:	e014      	b.n	801400a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013fe0:	f7fe f84a 	bl	8012078 <HAL_GetTick>
 8013fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013fe6:	e008      	b.n	8013ffa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013fe8:	f7fe f846 	bl	8012078 <HAL_GetTick>
 8013fec:	4602      	mov	r2, r0
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	2b64      	cmp	r3, #100	@ 0x64
 8013ff4:	d901      	bls.n	8013ffa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8013ff6:	2303      	movs	r3, #3
 8013ff8:	e20b      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013ffa:	4b57      	ldr	r3, [pc, #348]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1f0      	bne.n	8013fe8 <HAL_RCC_OscConfig+0x104>
 8014006:	e000      	b.n	801400a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	f003 0302 	and.w	r3, r3, #2
 8014012:	2b00      	cmp	r3, #0
 8014014:	d06f      	beq.n	80140f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8014016:	4b50      	ldr	r3, [pc, #320]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	f003 030c 	and.w	r3, r3, #12
 801401e:	2b00      	cmp	r3, #0
 8014020:	d017      	beq.n	8014052 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8014022:	4b4d      	ldr	r3, [pc, #308]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8014024:	689b      	ldr	r3, [r3, #8]
 8014026:	f003 030c 	and.w	r3, r3, #12
        || \
 801402a:	2b08      	cmp	r3, #8
 801402c:	d105      	bne.n	801403a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801402e:	4b4a      	ldr	r3, [pc, #296]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014036:	2b00      	cmp	r3, #0
 8014038:	d00b      	beq.n	8014052 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801403a:	4b47      	ldr	r3, [pc, #284]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 801403c:	689b      	ldr	r3, [r3, #8]
 801403e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8014042:	2b0c      	cmp	r3, #12
 8014044:	d11c      	bne.n	8014080 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014046:	4b44      	ldr	r3, [pc, #272]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801404e:	2b00      	cmp	r3, #0
 8014050:	d116      	bne.n	8014080 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014052:	4b41      	ldr	r3, [pc, #260]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f003 0302 	and.w	r3, r3, #2
 801405a:	2b00      	cmp	r3, #0
 801405c:	d005      	beq.n	801406a <HAL_RCC_OscConfig+0x186>
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	2b01      	cmp	r3, #1
 8014064:	d001      	beq.n	801406a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8014066:	2301      	movs	r3, #1
 8014068:	e1d3      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801406a:	4b3b      	ldr	r3, [pc, #236]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	691b      	ldr	r3, [r3, #16]
 8014076:	00db      	lsls	r3, r3, #3
 8014078:	4937      	ldr	r1, [pc, #220]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 801407a:	4313      	orrs	r3, r2
 801407c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801407e:	e03a      	b.n	80140f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d020      	beq.n	80140ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014088:	4b34      	ldr	r3, [pc, #208]	@ (801415c <HAL_RCC_OscConfig+0x278>)
 801408a:	2201      	movs	r2, #1
 801408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801408e:	f7fd fff3 	bl	8012078 <HAL_GetTick>
 8014092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014094:	e008      	b.n	80140a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014096:	f7fd ffef 	bl	8012078 <HAL_GetTick>
 801409a:	4602      	mov	r2, r0
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	2b02      	cmp	r3, #2
 80140a2:	d901      	bls.n	80140a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80140a4:	2303      	movs	r3, #3
 80140a6:	e1b4      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80140a8:	4b2b      	ldr	r3, [pc, #172]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f003 0302 	and.w	r3, r3, #2
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d0f0      	beq.n	8014096 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80140b4:	4b28      	ldr	r3, [pc, #160]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	691b      	ldr	r3, [r3, #16]
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	4925      	ldr	r1, [pc, #148]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 80140c4:	4313      	orrs	r3, r2
 80140c6:	600b      	str	r3, [r1, #0]
 80140c8:	e015      	b.n	80140f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80140ca:	4b24      	ldr	r3, [pc, #144]	@ (801415c <HAL_RCC_OscConfig+0x278>)
 80140cc:	2200      	movs	r2, #0
 80140ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80140d0:	f7fd ffd2 	bl	8012078 <HAL_GetTick>
 80140d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80140d6:	e008      	b.n	80140ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80140d8:	f7fd ffce 	bl	8012078 <HAL_GetTick>
 80140dc:	4602      	mov	r2, r0
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	d901      	bls.n	80140ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80140e6:	2303      	movs	r3, #3
 80140e8:	e193      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80140ea:	4b1b      	ldr	r3, [pc, #108]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	f003 0302 	and.w	r3, r3, #2
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d1f0      	bne.n	80140d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f003 0308 	and.w	r3, r3, #8
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d036      	beq.n	8014170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	695b      	ldr	r3, [r3, #20]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d016      	beq.n	8014138 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801410a:	4b15      	ldr	r3, [pc, #84]	@ (8014160 <HAL_RCC_OscConfig+0x27c>)
 801410c:	2201      	movs	r2, #1
 801410e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014110:	f7fd ffb2 	bl	8012078 <HAL_GetTick>
 8014114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014116:	e008      	b.n	801412a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014118:	f7fd ffae 	bl	8012078 <HAL_GetTick>
 801411c:	4602      	mov	r2, r0
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	2b02      	cmp	r3, #2
 8014124:	d901      	bls.n	801412a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8014126:	2303      	movs	r3, #3
 8014128:	e173      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801412a:	4b0b      	ldr	r3, [pc, #44]	@ (8014158 <HAL_RCC_OscConfig+0x274>)
 801412c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801412e:	f003 0302 	and.w	r3, r3, #2
 8014132:	2b00      	cmp	r3, #0
 8014134:	d0f0      	beq.n	8014118 <HAL_RCC_OscConfig+0x234>
 8014136:	e01b      	b.n	8014170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014138:	4b09      	ldr	r3, [pc, #36]	@ (8014160 <HAL_RCC_OscConfig+0x27c>)
 801413a:	2200      	movs	r2, #0
 801413c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801413e:	f7fd ff9b 	bl	8012078 <HAL_GetTick>
 8014142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014144:	e00e      	b.n	8014164 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014146:	f7fd ff97 	bl	8012078 <HAL_GetTick>
 801414a:	4602      	mov	r2, r0
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	1ad3      	subs	r3, r2, r3
 8014150:	2b02      	cmp	r3, #2
 8014152:	d907      	bls.n	8014164 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8014154:	2303      	movs	r3, #3
 8014156:	e15c      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
 8014158:	40023800 	.word	0x40023800
 801415c:	42470000 	.word	0x42470000
 8014160:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014164:	4b8a      	ldr	r3, [pc, #552]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014168:	f003 0302 	and.w	r3, r3, #2
 801416c:	2b00      	cmp	r3, #0
 801416e:	d1ea      	bne.n	8014146 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f003 0304 	and.w	r3, r3, #4
 8014178:	2b00      	cmp	r3, #0
 801417a:	f000 8097 	beq.w	80142ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801417e:	2300      	movs	r3, #0
 8014180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014182:	4b83      	ldr	r3, [pc, #524]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801418a:	2b00      	cmp	r3, #0
 801418c:	d10f      	bne.n	80141ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801418e:	2300      	movs	r3, #0
 8014190:	60bb      	str	r3, [r7, #8]
 8014192:	4b7f      	ldr	r3, [pc, #508]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014196:	4a7e      	ldr	r2, [pc, #504]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801419c:	6413      	str	r3, [r2, #64]	@ 0x40
 801419e:	4b7c      	ldr	r3, [pc, #496]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80141a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80141a6:	60bb      	str	r3, [r7, #8]
 80141a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80141aa:	2301      	movs	r3, #1
 80141ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80141ae:	4b79      	ldr	r3, [pc, #484]	@ (8014394 <HAL_RCC_OscConfig+0x4b0>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d118      	bne.n	80141ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80141ba:	4b76      	ldr	r3, [pc, #472]	@ (8014394 <HAL_RCC_OscConfig+0x4b0>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	4a75      	ldr	r2, [pc, #468]	@ (8014394 <HAL_RCC_OscConfig+0x4b0>)
 80141c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80141c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80141c6:	f7fd ff57 	bl	8012078 <HAL_GetTick>
 80141ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80141cc:	e008      	b.n	80141e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80141ce:	f7fd ff53 	bl	8012078 <HAL_GetTick>
 80141d2:	4602      	mov	r2, r0
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d901      	bls.n	80141e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80141dc:	2303      	movs	r3, #3
 80141de:	e118      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80141e0:	4b6c      	ldr	r3, [pc, #432]	@ (8014394 <HAL_RCC_OscConfig+0x4b0>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d0f0      	beq.n	80141ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	689b      	ldr	r3, [r3, #8]
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d106      	bne.n	8014202 <HAL_RCC_OscConfig+0x31e>
 80141f4:	4b66      	ldr	r3, [pc, #408]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80141f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141f8:	4a65      	ldr	r2, [pc, #404]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80141fa:	f043 0301 	orr.w	r3, r3, #1
 80141fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8014200:	e01c      	b.n	801423c <HAL_RCC_OscConfig+0x358>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	689b      	ldr	r3, [r3, #8]
 8014206:	2b05      	cmp	r3, #5
 8014208:	d10c      	bne.n	8014224 <HAL_RCC_OscConfig+0x340>
 801420a:	4b61      	ldr	r3, [pc, #388]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 801420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801420e:	4a60      	ldr	r2, [pc, #384]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014210:	f043 0304 	orr.w	r3, r3, #4
 8014214:	6713      	str	r3, [r2, #112]	@ 0x70
 8014216:	4b5e      	ldr	r3, [pc, #376]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801421a:	4a5d      	ldr	r2, [pc, #372]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 801421c:	f043 0301 	orr.w	r3, r3, #1
 8014220:	6713      	str	r3, [r2, #112]	@ 0x70
 8014222:	e00b      	b.n	801423c <HAL_RCC_OscConfig+0x358>
 8014224:	4b5a      	ldr	r3, [pc, #360]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014228:	4a59      	ldr	r2, [pc, #356]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 801422a:	f023 0301 	bic.w	r3, r3, #1
 801422e:	6713      	str	r3, [r2, #112]	@ 0x70
 8014230:	4b57      	ldr	r3, [pc, #348]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014234:	4a56      	ldr	r2, [pc, #344]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014236:	f023 0304 	bic.w	r3, r3, #4
 801423a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d015      	beq.n	8014270 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014244:	f7fd ff18 	bl	8012078 <HAL_GetTick>
 8014248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801424a:	e00a      	b.n	8014262 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801424c:	f7fd ff14 	bl	8012078 <HAL_GetTick>
 8014250:	4602      	mov	r2, r0
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	1ad3      	subs	r3, r2, r3
 8014256:	f241 3288 	movw	r2, #5000	@ 0x1388
 801425a:	4293      	cmp	r3, r2
 801425c:	d901      	bls.n	8014262 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801425e:	2303      	movs	r3, #3
 8014260:	e0d7      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014262:	4b4b      	ldr	r3, [pc, #300]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014266:	f003 0302 	and.w	r3, r3, #2
 801426a:	2b00      	cmp	r3, #0
 801426c:	d0ee      	beq.n	801424c <HAL_RCC_OscConfig+0x368>
 801426e:	e014      	b.n	801429a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014270:	f7fd ff02 	bl	8012078 <HAL_GetTick>
 8014274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014276:	e00a      	b.n	801428e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014278:	f7fd fefe 	bl	8012078 <HAL_GetTick>
 801427c:	4602      	mov	r2, r0
 801427e:	693b      	ldr	r3, [r7, #16]
 8014280:	1ad3      	subs	r3, r2, r3
 8014282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014286:	4293      	cmp	r3, r2
 8014288:	d901      	bls.n	801428e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801428a:	2303      	movs	r3, #3
 801428c:	e0c1      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801428e:	4b40      	ldr	r3, [pc, #256]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014292:	f003 0302 	and.w	r3, r3, #2
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1ee      	bne.n	8014278 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801429a:	7dfb      	ldrb	r3, [r7, #23]
 801429c:	2b01      	cmp	r3, #1
 801429e:	d105      	bne.n	80142ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80142a0:	4b3b      	ldr	r3, [pc, #236]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80142a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142a4:	4a3a      	ldr	r2, [pc, #232]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80142a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80142aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	699b      	ldr	r3, [r3, #24]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	f000 80ad 	beq.w	8014410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80142b6:	4b36      	ldr	r3, [pc, #216]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80142b8:	689b      	ldr	r3, [r3, #8]
 80142ba:	f003 030c 	and.w	r3, r3, #12
 80142be:	2b08      	cmp	r3, #8
 80142c0:	d060      	beq.n	8014384 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	699b      	ldr	r3, [r3, #24]
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d145      	bne.n	8014356 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80142ca:	4b33      	ldr	r3, [pc, #204]	@ (8014398 <HAL_RCC_OscConfig+0x4b4>)
 80142cc:	2200      	movs	r2, #0
 80142ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142d0:	f7fd fed2 	bl	8012078 <HAL_GetTick>
 80142d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80142d6:	e008      	b.n	80142ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80142d8:	f7fd fece 	bl	8012078 <HAL_GetTick>
 80142dc:	4602      	mov	r2, r0
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	2b02      	cmp	r3, #2
 80142e4:	d901      	bls.n	80142ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80142e6:	2303      	movs	r3, #3
 80142e8:	e093      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80142ea:	4b29      	ldr	r3, [pc, #164]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d1f0      	bne.n	80142d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	69da      	ldr	r2, [r3, #28]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6a1b      	ldr	r3, [r3, #32]
 80142fe:	431a      	orrs	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014304:	019b      	lsls	r3, r3, #6
 8014306:	431a      	orrs	r2, r3
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801430c:	085b      	lsrs	r3, r3, #1
 801430e:	3b01      	subs	r3, #1
 8014310:	041b      	lsls	r3, r3, #16
 8014312:	431a      	orrs	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014318:	061b      	lsls	r3, r3, #24
 801431a:	431a      	orrs	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014320:	071b      	lsls	r3, r3, #28
 8014322:	491b      	ldr	r1, [pc, #108]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014324:	4313      	orrs	r3, r2
 8014326:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014328:	4b1b      	ldr	r3, [pc, #108]	@ (8014398 <HAL_RCC_OscConfig+0x4b4>)
 801432a:	2201      	movs	r2, #1
 801432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801432e:	f7fd fea3 	bl	8012078 <HAL_GetTick>
 8014332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014334:	e008      	b.n	8014348 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014336:	f7fd fe9f 	bl	8012078 <HAL_GetTick>
 801433a:	4602      	mov	r2, r0
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	1ad3      	subs	r3, r2, r3
 8014340:	2b02      	cmp	r3, #2
 8014342:	d901      	bls.n	8014348 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8014344:	2303      	movs	r3, #3
 8014346:	e064      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014348:	4b11      	ldr	r3, [pc, #68]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014350:	2b00      	cmp	r3, #0
 8014352:	d0f0      	beq.n	8014336 <HAL_RCC_OscConfig+0x452>
 8014354:	e05c      	b.n	8014410 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014356:	4b10      	ldr	r3, [pc, #64]	@ (8014398 <HAL_RCC_OscConfig+0x4b4>)
 8014358:	2200      	movs	r2, #0
 801435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801435c:	f7fd fe8c 	bl	8012078 <HAL_GetTick>
 8014360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014362:	e008      	b.n	8014376 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014364:	f7fd fe88 	bl	8012078 <HAL_GetTick>
 8014368:	4602      	mov	r2, r0
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	2b02      	cmp	r3, #2
 8014370:	d901      	bls.n	8014376 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8014372:	2303      	movs	r3, #3
 8014374:	e04d      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014376:	4b06      	ldr	r3, [pc, #24]	@ (8014390 <HAL_RCC_OscConfig+0x4ac>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801437e:	2b00      	cmp	r3, #0
 8014380:	d1f0      	bne.n	8014364 <HAL_RCC_OscConfig+0x480>
 8014382:	e045      	b.n	8014410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	699b      	ldr	r3, [r3, #24]
 8014388:	2b01      	cmp	r3, #1
 801438a:	d107      	bne.n	801439c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801438c:	2301      	movs	r3, #1
 801438e:	e040      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
 8014390:	40023800 	.word	0x40023800
 8014394:	40007000 	.word	0x40007000
 8014398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801439c:	4b1f      	ldr	r3, [pc, #124]	@ (801441c <HAL_RCC_OscConfig+0x538>)
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	699b      	ldr	r3, [r3, #24]
 80143a6:	2b01      	cmp	r3, #1
 80143a8:	d030      	beq.n	801440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d129      	bne.n	801440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d122      	bne.n	801440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80143cc:	4013      	ands	r3, r2
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80143d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d119      	bne.n	801440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e2:	085b      	lsrs	r3, r3, #1
 80143e4:	3b01      	subs	r3, #1
 80143e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d10f      	bne.n	801440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d107      	bne.n	801440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014406:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014408:	429a      	cmp	r2, r3
 801440a:	d001      	beq.n	8014410 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801440c:	2301      	movs	r3, #1
 801440e:	e000      	b.n	8014412 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8014410:	2300      	movs	r3, #0
}
 8014412:	4618      	mov	r0, r3
 8014414:	3718      	adds	r7, #24
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	40023800 	.word	0x40023800

08014420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d101      	bne.n	8014432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801442e:	2301      	movs	r3, #1
 8014430:	e042      	b.n	80144b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014438:	b2db      	uxtb	r3, r3
 801443a:	2b00      	cmp	r3, #0
 801443c:	d106      	bne.n	801444c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2200      	movs	r2, #0
 8014442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f7ed f962 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2224      	movs	r2, #36	@ 0x24
 8014450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	68da      	ldr	r2, [r3, #12]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8014462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f000 f973 	bl	8014750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	691a      	ldr	r2, [r3, #16]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	695a      	ldr	r2, [r3, #20]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	68da      	ldr	r2, [r3, #12]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2220      	movs	r2, #32
 80144a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2220      	movs	r2, #32
 80144ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b08a      	sub	sp, #40	@ 0x28
 80144c4:	af02      	add	r7, sp, #8
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	603b      	str	r3, [r7, #0]
 80144cc:	4613      	mov	r3, r2
 80144ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80144d0:	2300      	movs	r3, #0
 80144d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	2b20      	cmp	r3, #32
 80144de:	d175      	bne.n	80145cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d002      	beq.n	80144ec <HAL_UART_Transmit+0x2c>
 80144e6:	88fb      	ldrh	r3, [r7, #6]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d101      	bne.n	80144f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e06e      	b.n	80145ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2200      	movs	r2, #0
 80144f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2221      	movs	r2, #33	@ 0x21
 80144fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80144fe:	f7fd fdbb 	bl	8012078 <HAL_GetTick>
 8014502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	88fa      	ldrh	r2, [r7, #6]
 8014508:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	88fa      	ldrh	r2, [r7, #6]
 801450e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	689b      	ldr	r3, [r3, #8]
 8014514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014518:	d108      	bne.n	801452c <HAL_UART_Transmit+0x6c>
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	691b      	ldr	r3, [r3, #16]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d104      	bne.n	801452c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014522:	2300      	movs	r3, #0
 8014524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	61bb      	str	r3, [r7, #24]
 801452a:	e003      	b.n	8014534 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014530:	2300      	movs	r3, #0
 8014532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014534:	e02e      	b.n	8014594 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	9300      	str	r3, [sp, #0]
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	2200      	movs	r2, #0
 801453e:	2180      	movs	r1, #128	@ 0x80
 8014540:	68f8      	ldr	r0, [r7, #12]
 8014542:	f000 f848 	bl	80145d6 <UART_WaitOnFlagUntilTimeout>
 8014546:	4603      	mov	r3, r0
 8014548:	2b00      	cmp	r3, #0
 801454a:	d005      	beq.n	8014558 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2220      	movs	r2, #32
 8014550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8014554:	2303      	movs	r3, #3
 8014556:	e03a      	b.n	80145ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d10b      	bne.n	8014576 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801455e:	69bb      	ldr	r3, [r7, #24]
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	461a      	mov	r2, r3
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801456c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801456e:	69bb      	ldr	r3, [r7, #24]
 8014570:	3302      	adds	r3, #2
 8014572:	61bb      	str	r3, [r7, #24]
 8014574:	e007      	b.n	8014586 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014576:	69fb      	ldr	r3, [r7, #28]
 8014578:	781a      	ldrb	r2, [r3, #0]
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	3301      	adds	r3, #1
 8014584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801458a:	b29b      	uxth	r3, r3
 801458c:	3b01      	subs	r3, #1
 801458e:	b29a      	uxth	r2, r3
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014598:	b29b      	uxth	r3, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	d1cb      	bne.n	8014536 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	9300      	str	r3, [sp, #0]
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	2200      	movs	r2, #0
 80145a6:	2140      	movs	r1, #64	@ 0x40
 80145a8:	68f8      	ldr	r0, [r7, #12]
 80145aa:	f000 f814 	bl	80145d6 <UART_WaitOnFlagUntilTimeout>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d005      	beq.n	80145c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2220      	movs	r2, #32
 80145b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80145bc:	2303      	movs	r3, #3
 80145be:	e006      	b.n	80145ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2220      	movs	r2, #32
 80145c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80145c8:	2300      	movs	r3, #0
 80145ca:	e000      	b.n	80145ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80145cc:	2302      	movs	r3, #2
  }
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3720      	adds	r7, #32
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}

080145d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80145d6:	b580      	push	{r7, lr}
 80145d8:	b086      	sub	sp, #24
 80145da:	af00      	add	r7, sp, #0
 80145dc:	60f8      	str	r0, [r7, #12]
 80145de:	60b9      	str	r1, [r7, #8]
 80145e0:	603b      	str	r3, [r7, #0]
 80145e2:	4613      	mov	r3, r2
 80145e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80145e6:	e03b      	b.n	8014660 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80145e8:	6a3b      	ldr	r3, [r7, #32]
 80145ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145ee:	d037      	beq.n	8014660 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80145f0:	f7fd fd42 	bl	8012078 <HAL_GetTick>
 80145f4:	4602      	mov	r2, r0
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	6a3a      	ldr	r2, [r7, #32]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d302      	bcc.n	8014606 <UART_WaitOnFlagUntilTimeout+0x30>
 8014600:	6a3b      	ldr	r3, [r7, #32]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d101      	bne.n	801460a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014606:	2303      	movs	r3, #3
 8014608:	e03a      	b.n	8014680 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	f003 0304 	and.w	r3, r3, #4
 8014614:	2b00      	cmp	r3, #0
 8014616:	d023      	beq.n	8014660 <UART_WaitOnFlagUntilTimeout+0x8a>
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	2b80      	cmp	r3, #128	@ 0x80
 801461c:	d020      	beq.n	8014660 <UART_WaitOnFlagUntilTimeout+0x8a>
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	2b40      	cmp	r3, #64	@ 0x40
 8014622:	d01d      	beq.n	8014660 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	f003 0308 	and.w	r3, r3, #8
 801462e:	2b08      	cmp	r3, #8
 8014630:	d116      	bne.n	8014660 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8014632:	2300      	movs	r3, #0
 8014634:	617b      	str	r3, [r7, #20]
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	617b      	str	r3, [r7, #20]
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	617b      	str	r3, [r7, #20]
 8014646:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f000 f81d 	bl	8014688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2208      	movs	r2, #8
 8014652:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2200      	movs	r2, #0
 8014658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801465c:	2301      	movs	r3, #1
 801465e:	e00f      	b.n	8014680 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	681a      	ldr	r2, [r3, #0]
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	4013      	ands	r3, r2
 801466a:	68ba      	ldr	r2, [r7, #8]
 801466c:	429a      	cmp	r2, r3
 801466e:	bf0c      	ite	eq
 8014670:	2301      	moveq	r3, #1
 8014672:	2300      	movne	r3, #0
 8014674:	b2db      	uxtb	r3, r3
 8014676:	461a      	mov	r2, r3
 8014678:	79fb      	ldrb	r3, [r7, #7]
 801467a:	429a      	cmp	r2, r3
 801467c:	d0b4      	beq.n	80145e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801467e:	2300      	movs	r3, #0
}
 8014680:	4618      	mov	r0, r3
 8014682:	3718      	adds	r7, #24
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}

08014688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014688:	b480      	push	{r7}
 801468a:	b095      	sub	sp, #84	@ 0x54
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	330c      	adds	r3, #12
 8014696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801469a:	e853 3f00 	ldrex	r3, [r3]
 801469e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80146a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80146a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	330c      	adds	r3, #12
 80146ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80146b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80146b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80146b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80146b8:	e841 2300 	strex	r3, r2, [r1]
 80146bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80146be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d1e5      	bne.n	8014690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	3314      	adds	r3, #20
 80146ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146cc:	6a3b      	ldr	r3, [r7, #32]
 80146ce:	e853 3f00 	ldrex	r3, [r3]
 80146d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	f023 0301 	bic.w	r3, r3, #1
 80146da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	3314      	adds	r3, #20
 80146e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80146e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80146e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80146ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80146ec:	e841 2300 	strex	r3, r2, [r1]
 80146f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80146f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d1e5      	bne.n	80146c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d119      	bne.n	8014734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	330c      	adds	r3, #12
 8014706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	e853 3f00 	ldrex	r3, [r3]
 801470e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	f023 0310 	bic.w	r3, r3, #16
 8014716:	647b      	str	r3, [r7, #68]	@ 0x44
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	330c      	adds	r3, #12
 801471e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014720:	61ba      	str	r2, [r7, #24]
 8014722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014724:	6979      	ldr	r1, [r7, #20]
 8014726:	69ba      	ldr	r2, [r7, #24]
 8014728:	e841 2300 	strex	r3, r2, [r1]
 801472c:	613b      	str	r3, [r7, #16]
   return(result);
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d1e5      	bne.n	8014700 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2220      	movs	r2, #32
 8014738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2200      	movs	r2, #0
 8014740:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8014742:	bf00      	nop
 8014744:	3754      	adds	r7, #84	@ 0x54
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
	...

08014750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014754:	b0c0      	sub	sp, #256	@ 0x100
 8014756:	af00      	add	r7, sp, #0
 8014758:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8014768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801476c:	68d9      	ldr	r1, [r3, #12]
 801476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	ea40 0301 	orr.w	r3, r0, r1
 8014778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801477e:	689a      	ldr	r2, [r3, #8]
 8014780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014784:	691b      	ldr	r3, [r3, #16]
 8014786:	431a      	orrs	r2, r3
 8014788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801478c:	695b      	ldr	r3, [r3, #20]
 801478e:	431a      	orrs	r2, r3
 8014790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014794:	69db      	ldr	r3, [r3, #28]
 8014796:	4313      	orrs	r3, r2
 8014798:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80147a8:	f021 010c 	bic.w	r1, r1, #12
 80147ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80147b6:	430b      	orrs	r3, r1
 80147b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80147ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	695b      	ldr	r3, [r3, #20]
 80147c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80147c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147ca:	6999      	ldr	r1, [r3, #24]
 80147cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147d0:	681a      	ldr	r2, [r3, #0]
 80147d2:	ea40 0301 	orr.w	r3, r0, r1
 80147d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80147d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	4b8f      	ldr	r3, [pc, #572]	@ (8014a1c <UART_SetConfig+0x2cc>)
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d005      	beq.n	80147f0 <UART_SetConfig+0xa0>
 80147e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80147e8:	681a      	ldr	r2, [r3, #0]
 80147ea:	4b8d      	ldr	r3, [pc, #564]	@ (8014a20 <UART_SetConfig+0x2d0>)
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d104      	bne.n	80147fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80147f0:	f7ff f934 	bl	8013a5c <HAL_RCC_GetPCLK2Freq>
 80147f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80147f8:	e003      	b.n	8014802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80147fa:	f7ff f91b 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 80147fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014806:	69db      	ldr	r3, [r3, #28]
 8014808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801480c:	f040 810c 	bne.w	8014a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014814:	2200      	movs	r2, #0
 8014816:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801481a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801481e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8014822:	4622      	mov	r2, r4
 8014824:	462b      	mov	r3, r5
 8014826:	1891      	adds	r1, r2, r2
 8014828:	65b9      	str	r1, [r7, #88]	@ 0x58
 801482a:	415b      	adcs	r3, r3
 801482c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801482e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8014832:	4621      	mov	r1, r4
 8014834:	eb12 0801 	adds.w	r8, r2, r1
 8014838:	4629      	mov	r1, r5
 801483a:	eb43 0901 	adc.w	r9, r3, r1
 801483e:	f04f 0200 	mov.w	r2, #0
 8014842:	f04f 0300 	mov.w	r3, #0
 8014846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801484a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801484e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014852:	4690      	mov	r8, r2
 8014854:	4699      	mov	r9, r3
 8014856:	4623      	mov	r3, r4
 8014858:	eb18 0303 	adds.w	r3, r8, r3
 801485c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014860:	462b      	mov	r3, r5
 8014862:	eb49 0303 	adc.w	r3, r9, r3
 8014866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014876:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801487a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801487e:	460b      	mov	r3, r1
 8014880:	18db      	adds	r3, r3, r3
 8014882:	653b      	str	r3, [r7, #80]	@ 0x50
 8014884:	4613      	mov	r3, r2
 8014886:	eb42 0303 	adc.w	r3, r2, r3
 801488a:	657b      	str	r3, [r7, #84]	@ 0x54
 801488c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8014890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8014894:	f7ec f9f8 	bl	8000c88 <__aeabi_uldivmod>
 8014898:	4602      	mov	r2, r0
 801489a:	460b      	mov	r3, r1
 801489c:	4b61      	ldr	r3, [pc, #388]	@ (8014a24 <UART_SetConfig+0x2d4>)
 801489e:	fba3 2302 	umull	r2, r3, r3, r2
 80148a2:	095b      	lsrs	r3, r3, #5
 80148a4:	011c      	lsls	r4, r3, #4
 80148a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80148aa:	2200      	movs	r2, #0
 80148ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80148b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80148b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80148b8:	4642      	mov	r2, r8
 80148ba:	464b      	mov	r3, r9
 80148bc:	1891      	adds	r1, r2, r2
 80148be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80148c0:	415b      	adcs	r3, r3
 80148c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80148c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80148c8:	4641      	mov	r1, r8
 80148ca:	eb12 0a01 	adds.w	sl, r2, r1
 80148ce:	4649      	mov	r1, r9
 80148d0:	eb43 0b01 	adc.w	fp, r3, r1
 80148d4:	f04f 0200 	mov.w	r2, #0
 80148d8:	f04f 0300 	mov.w	r3, #0
 80148dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80148e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80148e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80148e8:	4692      	mov	sl, r2
 80148ea:	469b      	mov	fp, r3
 80148ec:	4643      	mov	r3, r8
 80148ee:	eb1a 0303 	adds.w	r3, sl, r3
 80148f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80148f6:	464b      	mov	r3, r9
 80148f8:	eb4b 0303 	adc.w	r3, fp, r3
 80148fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8014900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	2200      	movs	r2, #0
 8014908:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801490c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8014910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8014914:	460b      	mov	r3, r1
 8014916:	18db      	adds	r3, r3, r3
 8014918:	643b      	str	r3, [r7, #64]	@ 0x40
 801491a:	4613      	mov	r3, r2
 801491c:	eb42 0303 	adc.w	r3, r2, r3
 8014920:	647b      	str	r3, [r7, #68]	@ 0x44
 8014922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8014926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801492a:	f7ec f9ad 	bl	8000c88 <__aeabi_uldivmod>
 801492e:	4602      	mov	r2, r0
 8014930:	460b      	mov	r3, r1
 8014932:	4611      	mov	r1, r2
 8014934:	4b3b      	ldr	r3, [pc, #236]	@ (8014a24 <UART_SetConfig+0x2d4>)
 8014936:	fba3 2301 	umull	r2, r3, r3, r1
 801493a:	095b      	lsrs	r3, r3, #5
 801493c:	2264      	movs	r2, #100	@ 0x64
 801493e:	fb02 f303 	mul.w	r3, r2, r3
 8014942:	1acb      	subs	r3, r1, r3
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801494a:	4b36      	ldr	r3, [pc, #216]	@ (8014a24 <UART_SetConfig+0x2d4>)
 801494c:	fba3 2302 	umull	r2, r3, r3, r2
 8014950:	095b      	lsrs	r3, r3, #5
 8014952:	005b      	lsls	r3, r3, #1
 8014954:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8014958:	441c      	add	r4, r3
 801495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801495e:	2200      	movs	r2, #0
 8014960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014964:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8014968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801496c:	4642      	mov	r2, r8
 801496e:	464b      	mov	r3, r9
 8014970:	1891      	adds	r1, r2, r2
 8014972:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014974:	415b      	adcs	r3, r3
 8014976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801497c:	4641      	mov	r1, r8
 801497e:	1851      	adds	r1, r2, r1
 8014980:	6339      	str	r1, [r7, #48]	@ 0x30
 8014982:	4649      	mov	r1, r9
 8014984:	414b      	adcs	r3, r1
 8014986:	637b      	str	r3, [r7, #52]	@ 0x34
 8014988:	f04f 0200 	mov.w	r2, #0
 801498c:	f04f 0300 	mov.w	r3, #0
 8014990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8014994:	4659      	mov	r1, fp
 8014996:	00cb      	lsls	r3, r1, #3
 8014998:	4651      	mov	r1, sl
 801499a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801499e:	4651      	mov	r1, sl
 80149a0:	00ca      	lsls	r2, r1, #3
 80149a2:	4610      	mov	r0, r2
 80149a4:	4619      	mov	r1, r3
 80149a6:	4603      	mov	r3, r0
 80149a8:	4642      	mov	r2, r8
 80149aa:	189b      	adds	r3, r3, r2
 80149ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80149b0:	464b      	mov	r3, r9
 80149b2:	460a      	mov	r2, r1
 80149b4:	eb42 0303 	adc.w	r3, r2, r3
 80149b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80149bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	2200      	movs	r2, #0
 80149c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80149c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80149cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80149d0:	460b      	mov	r3, r1
 80149d2:	18db      	adds	r3, r3, r3
 80149d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80149d6:	4613      	mov	r3, r2
 80149d8:	eb42 0303 	adc.w	r3, r2, r3
 80149dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80149de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80149e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80149e6:	f7ec f94f 	bl	8000c88 <__aeabi_uldivmod>
 80149ea:	4602      	mov	r2, r0
 80149ec:	460b      	mov	r3, r1
 80149ee:	4b0d      	ldr	r3, [pc, #52]	@ (8014a24 <UART_SetConfig+0x2d4>)
 80149f0:	fba3 1302 	umull	r1, r3, r3, r2
 80149f4:	095b      	lsrs	r3, r3, #5
 80149f6:	2164      	movs	r1, #100	@ 0x64
 80149f8:	fb01 f303 	mul.w	r3, r1, r3
 80149fc:	1ad3      	subs	r3, r2, r3
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	3332      	adds	r3, #50	@ 0x32
 8014a02:	4a08      	ldr	r2, [pc, #32]	@ (8014a24 <UART_SetConfig+0x2d4>)
 8014a04:	fba2 2303 	umull	r2, r3, r2, r3
 8014a08:	095b      	lsrs	r3, r3, #5
 8014a0a:	f003 0207 	and.w	r2, r3, #7
 8014a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4422      	add	r2, r4
 8014a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014a18:	e106      	b.n	8014c28 <UART_SetConfig+0x4d8>
 8014a1a:	bf00      	nop
 8014a1c:	40011000 	.word	0x40011000
 8014a20:	40011400 	.word	0x40011400
 8014a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8014a32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8014a3a:	4642      	mov	r2, r8
 8014a3c:	464b      	mov	r3, r9
 8014a3e:	1891      	adds	r1, r2, r2
 8014a40:	6239      	str	r1, [r7, #32]
 8014a42:	415b      	adcs	r3, r3
 8014a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014a4a:	4641      	mov	r1, r8
 8014a4c:	1854      	adds	r4, r2, r1
 8014a4e:	4649      	mov	r1, r9
 8014a50:	eb43 0501 	adc.w	r5, r3, r1
 8014a54:	f04f 0200 	mov.w	r2, #0
 8014a58:	f04f 0300 	mov.w	r3, #0
 8014a5c:	00eb      	lsls	r3, r5, #3
 8014a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014a62:	00e2      	lsls	r2, r4, #3
 8014a64:	4614      	mov	r4, r2
 8014a66:	461d      	mov	r5, r3
 8014a68:	4643      	mov	r3, r8
 8014a6a:	18e3      	adds	r3, r4, r3
 8014a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014a70:	464b      	mov	r3, r9
 8014a72:	eb45 0303 	adc.w	r3, r5, r3
 8014a76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014a7e:	685b      	ldr	r3, [r3, #4]
 8014a80:	2200      	movs	r2, #0
 8014a82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014a86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8014a8a:	f04f 0200 	mov.w	r2, #0
 8014a8e:	f04f 0300 	mov.w	r3, #0
 8014a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8014a96:	4629      	mov	r1, r5
 8014a98:	008b      	lsls	r3, r1, #2
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014aa0:	4621      	mov	r1, r4
 8014aa2:	008a      	lsls	r2, r1, #2
 8014aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8014aa8:	f7ec f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	4b60      	ldr	r3, [pc, #384]	@ (8014c34 <UART_SetConfig+0x4e4>)
 8014ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8014ab6:	095b      	lsrs	r3, r3, #5
 8014ab8:	011c      	lsls	r4, r3, #4
 8014aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014abe:	2200      	movs	r2, #0
 8014ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014ac4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8014acc:	4642      	mov	r2, r8
 8014ace:	464b      	mov	r3, r9
 8014ad0:	1891      	adds	r1, r2, r2
 8014ad2:	61b9      	str	r1, [r7, #24]
 8014ad4:	415b      	adcs	r3, r3
 8014ad6:	61fb      	str	r3, [r7, #28]
 8014ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014adc:	4641      	mov	r1, r8
 8014ade:	1851      	adds	r1, r2, r1
 8014ae0:	6139      	str	r1, [r7, #16]
 8014ae2:	4649      	mov	r1, r9
 8014ae4:	414b      	adcs	r3, r1
 8014ae6:	617b      	str	r3, [r7, #20]
 8014ae8:	f04f 0200 	mov.w	r2, #0
 8014aec:	f04f 0300 	mov.w	r3, #0
 8014af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014af4:	4659      	mov	r1, fp
 8014af6:	00cb      	lsls	r3, r1, #3
 8014af8:	4651      	mov	r1, sl
 8014afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014afe:	4651      	mov	r1, sl
 8014b00:	00ca      	lsls	r2, r1, #3
 8014b02:	4610      	mov	r0, r2
 8014b04:	4619      	mov	r1, r3
 8014b06:	4603      	mov	r3, r0
 8014b08:	4642      	mov	r2, r8
 8014b0a:	189b      	adds	r3, r3, r2
 8014b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014b10:	464b      	mov	r3, r9
 8014b12:	460a      	mov	r2, r1
 8014b14:	eb42 0303 	adc.w	r3, r2, r3
 8014b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014b20:	685b      	ldr	r3, [r3, #4]
 8014b22:	2200      	movs	r2, #0
 8014b24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014b26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8014b28:	f04f 0200 	mov.w	r2, #0
 8014b2c:	f04f 0300 	mov.w	r3, #0
 8014b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8014b34:	4649      	mov	r1, r9
 8014b36:	008b      	lsls	r3, r1, #2
 8014b38:	4641      	mov	r1, r8
 8014b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014b3e:	4641      	mov	r1, r8
 8014b40:	008a      	lsls	r2, r1, #2
 8014b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014b46:	f7ec f89f 	bl	8000c88 <__aeabi_uldivmod>
 8014b4a:	4602      	mov	r2, r0
 8014b4c:	460b      	mov	r3, r1
 8014b4e:	4611      	mov	r1, r2
 8014b50:	4b38      	ldr	r3, [pc, #224]	@ (8014c34 <UART_SetConfig+0x4e4>)
 8014b52:	fba3 2301 	umull	r2, r3, r3, r1
 8014b56:	095b      	lsrs	r3, r3, #5
 8014b58:	2264      	movs	r2, #100	@ 0x64
 8014b5a:	fb02 f303 	mul.w	r3, r2, r3
 8014b5e:	1acb      	subs	r3, r1, r3
 8014b60:	011b      	lsls	r3, r3, #4
 8014b62:	3332      	adds	r3, #50	@ 0x32
 8014b64:	4a33      	ldr	r2, [pc, #204]	@ (8014c34 <UART_SetConfig+0x4e4>)
 8014b66:	fba2 2303 	umull	r2, r3, r2, r3
 8014b6a:	095b      	lsrs	r3, r3, #5
 8014b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014b70:	441c      	add	r4, r3
 8014b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014b76:	2200      	movs	r2, #0
 8014b78:	673b      	str	r3, [r7, #112]	@ 0x70
 8014b7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8014b7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8014b80:	4642      	mov	r2, r8
 8014b82:	464b      	mov	r3, r9
 8014b84:	1891      	adds	r1, r2, r2
 8014b86:	60b9      	str	r1, [r7, #8]
 8014b88:	415b      	adcs	r3, r3
 8014b8a:	60fb      	str	r3, [r7, #12]
 8014b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014b90:	4641      	mov	r1, r8
 8014b92:	1851      	adds	r1, r2, r1
 8014b94:	6039      	str	r1, [r7, #0]
 8014b96:	4649      	mov	r1, r9
 8014b98:	414b      	adcs	r3, r1
 8014b9a:	607b      	str	r3, [r7, #4]
 8014b9c:	f04f 0200 	mov.w	r2, #0
 8014ba0:	f04f 0300 	mov.w	r3, #0
 8014ba4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014ba8:	4659      	mov	r1, fp
 8014baa:	00cb      	lsls	r3, r1, #3
 8014bac:	4651      	mov	r1, sl
 8014bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014bb2:	4651      	mov	r1, sl
 8014bb4:	00ca      	lsls	r2, r1, #3
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	4619      	mov	r1, r3
 8014bba:	4603      	mov	r3, r0
 8014bbc:	4642      	mov	r2, r8
 8014bbe:	189b      	adds	r3, r3, r2
 8014bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014bc2:	464b      	mov	r3, r9
 8014bc4:	460a      	mov	r2, r1
 8014bc6:	eb42 0303 	adc.w	r3, r2, r3
 8014bca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8014bd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8014bd8:	f04f 0200 	mov.w	r2, #0
 8014bdc:	f04f 0300 	mov.w	r3, #0
 8014be0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8014be4:	4649      	mov	r1, r9
 8014be6:	008b      	lsls	r3, r1, #2
 8014be8:	4641      	mov	r1, r8
 8014bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014bee:	4641      	mov	r1, r8
 8014bf0:	008a      	lsls	r2, r1, #2
 8014bf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8014bf6:	f7ec f847 	bl	8000c88 <__aeabi_uldivmod>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8014c34 <UART_SetConfig+0x4e4>)
 8014c00:	fba3 1302 	umull	r1, r3, r3, r2
 8014c04:	095b      	lsrs	r3, r3, #5
 8014c06:	2164      	movs	r1, #100	@ 0x64
 8014c08:	fb01 f303 	mul.w	r3, r1, r3
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	011b      	lsls	r3, r3, #4
 8014c10:	3332      	adds	r3, #50	@ 0x32
 8014c12:	4a08      	ldr	r2, [pc, #32]	@ (8014c34 <UART_SetConfig+0x4e4>)
 8014c14:	fba2 2303 	umull	r2, r3, r2, r3
 8014c18:	095b      	lsrs	r3, r3, #5
 8014c1a:	f003 020f 	and.w	r2, r3, #15
 8014c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4422      	add	r2, r4
 8014c26:	609a      	str	r2, [r3, #8]
}
 8014c28:	bf00      	nop
 8014c2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014c34:	51eb851f 	.word	0x51eb851f

08014c38 <__cvt>:
 8014c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c3c:	ec57 6b10 	vmov	r6, r7, d0
 8014c40:	2f00      	cmp	r7, #0
 8014c42:	460c      	mov	r4, r1
 8014c44:	4619      	mov	r1, r3
 8014c46:	463b      	mov	r3, r7
 8014c48:	bfbb      	ittet	lt
 8014c4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014c4e:	461f      	movlt	r7, r3
 8014c50:	2300      	movge	r3, #0
 8014c52:	232d      	movlt	r3, #45	@ 0x2d
 8014c54:	700b      	strb	r3, [r1, #0]
 8014c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014c5c:	4691      	mov	r9, r2
 8014c5e:	f023 0820 	bic.w	r8, r3, #32
 8014c62:	bfbc      	itt	lt
 8014c64:	4632      	movlt	r2, r6
 8014c66:	4616      	movlt	r6, r2
 8014c68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014c6c:	d005      	beq.n	8014c7a <__cvt+0x42>
 8014c6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014c72:	d100      	bne.n	8014c76 <__cvt+0x3e>
 8014c74:	3401      	adds	r4, #1
 8014c76:	2102      	movs	r1, #2
 8014c78:	e000      	b.n	8014c7c <__cvt+0x44>
 8014c7a:	2103      	movs	r1, #3
 8014c7c:	ab03      	add	r3, sp, #12
 8014c7e:	9301      	str	r3, [sp, #4]
 8014c80:	ab02      	add	r3, sp, #8
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	ec47 6b10 	vmov	d0, r6, r7
 8014c88:	4653      	mov	r3, sl
 8014c8a:	4622      	mov	r2, r4
 8014c8c:	f000 ff60 	bl	8015b50 <_dtoa_r>
 8014c90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014c94:	4605      	mov	r5, r0
 8014c96:	d119      	bne.n	8014ccc <__cvt+0x94>
 8014c98:	f019 0f01 	tst.w	r9, #1
 8014c9c:	d00e      	beq.n	8014cbc <__cvt+0x84>
 8014c9e:	eb00 0904 	add.w	r9, r0, r4
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	4639      	mov	r1, r7
 8014caa:	f7eb ff2d 	bl	8000b08 <__aeabi_dcmpeq>
 8014cae:	b108      	cbz	r0, 8014cb4 <__cvt+0x7c>
 8014cb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8014cb4:	2230      	movs	r2, #48	@ 0x30
 8014cb6:	9b03      	ldr	r3, [sp, #12]
 8014cb8:	454b      	cmp	r3, r9
 8014cba:	d31e      	bcc.n	8014cfa <__cvt+0xc2>
 8014cbc:	9b03      	ldr	r3, [sp, #12]
 8014cbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014cc0:	1b5b      	subs	r3, r3, r5
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	6013      	str	r3, [r2, #0]
 8014cc6:	b004      	add	sp, #16
 8014cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ccc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014cd0:	eb00 0904 	add.w	r9, r0, r4
 8014cd4:	d1e5      	bne.n	8014ca2 <__cvt+0x6a>
 8014cd6:	7803      	ldrb	r3, [r0, #0]
 8014cd8:	2b30      	cmp	r3, #48	@ 0x30
 8014cda:	d10a      	bne.n	8014cf2 <__cvt+0xba>
 8014cdc:	2200      	movs	r2, #0
 8014cde:	2300      	movs	r3, #0
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	4639      	mov	r1, r7
 8014ce4:	f7eb ff10 	bl	8000b08 <__aeabi_dcmpeq>
 8014ce8:	b918      	cbnz	r0, 8014cf2 <__cvt+0xba>
 8014cea:	f1c4 0401 	rsb	r4, r4, #1
 8014cee:	f8ca 4000 	str.w	r4, [sl]
 8014cf2:	f8da 3000 	ldr.w	r3, [sl]
 8014cf6:	4499      	add	r9, r3
 8014cf8:	e7d3      	b.n	8014ca2 <__cvt+0x6a>
 8014cfa:	1c59      	adds	r1, r3, #1
 8014cfc:	9103      	str	r1, [sp, #12]
 8014cfe:	701a      	strb	r2, [r3, #0]
 8014d00:	e7d9      	b.n	8014cb6 <__cvt+0x7e>

08014d02 <__exponent>:
 8014d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d04:	2900      	cmp	r1, #0
 8014d06:	bfba      	itte	lt
 8014d08:	4249      	neglt	r1, r1
 8014d0a:	232d      	movlt	r3, #45	@ 0x2d
 8014d0c:	232b      	movge	r3, #43	@ 0x2b
 8014d0e:	2909      	cmp	r1, #9
 8014d10:	7002      	strb	r2, [r0, #0]
 8014d12:	7043      	strb	r3, [r0, #1]
 8014d14:	dd29      	ble.n	8014d6a <__exponent+0x68>
 8014d16:	f10d 0307 	add.w	r3, sp, #7
 8014d1a:	461d      	mov	r5, r3
 8014d1c:	270a      	movs	r7, #10
 8014d1e:	461a      	mov	r2, r3
 8014d20:	fbb1 f6f7 	udiv	r6, r1, r7
 8014d24:	fb07 1416 	mls	r4, r7, r6, r1
 8014d28:	3430      	adds	r4, #48	@ 0x30
 8014d2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014d2e:	460c      	mov	r4, r1
 8014d30:	2c63      	cmp	r4, #99	@ 0x63
 8014d32:	f103 33ff 	add.w	r3, r3, #4294967295
 8014d36:	4631      	mov	r1, r6
 8014d38:	dcf1      	bgt.n	8014d1e <__exponent+0x1c>
 8014d3a:	3130      	adds	r1, #48	@ 0x30
 8014d3c:	1e94      	subs	r4, r2, #2
 8014d3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014d42:	1c41      	adds	r1, r0, #1
 8014d44:	4623      	mov	r3, r4
 8014d46:	42ab      	cmp	r3, r5
 8014d48:	d30a      	bcc.n	8014d60 <__exponent+0x5e>
 8014d4a:	f10d 0309 	add.w	r3, sp, #9
 8014d4e:	1a9b      	subs	r3, r3, r2
 8014d50:	42ac      	cmp	r4, r5
 8014d52:	bf88      	it	hi
 8014d54:	2300      	movhi	r3, #0
 8014d56:	3302      	adds	r3, #2
 8014d58:	4403      	add	r3, r0
 8014d5a:	1a18      	subs	r0, r3, r0
 8014d5c:	b003      	add	sp, #12
 8014d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014d64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014d68:	e7ed      	b.n	8014d46 <__exponent+0x44>
 8014d6a:	2330      	movs	r3, #48	@ 0x30
 8014d6c:	3130      	adds	r1, #48	@ 0x30
 8014d6e:	7083      	strb	r3, [r0, #2]
 8014d70:	70c1      	strb	r1, [r0, #3]
 8014d72:	1d03      	adds	r3, r0, #4
 8014d74:	e7f1      	b.n	8014d5a <__exponent+0x58>
	...

08014d78 <_printf_float>:
 8014d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7c:	b08d      	sub	sp, #52	@ 0x34
 8014d7e:	460c      	mov	r4, r1
 8014d80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014d84:	4616      	mov	r6, r2
 8014d86:	461f      	mov	r7, r3
 8014d88:	4605      	mov	r5, r0
 8014d8a:	f000 fdd1 	bl	8015930 <_localeconv_r>
 8014d8e:	6803      	ldr	r3, [r0, #0]
 8014d90:	9304      	str	r3, [sp, #16]
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7eb fa8c 	bl	80002b0 <strlen>
 8014d98:	2300      	movs	r3, #0
 8014d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8014da0:	9005      	str	r0, [sp, #20]
 8014da2:	3307      	adds	r3, #7
 8014da4:	f023 0307 	bic.w	r3, r3, #7
 8014da8:	f103 0208 	add.w	r2, r3, #8
 8014dac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014db0:	f8d4 b000 	ldr.w	fp, [r4]
 8014db4:	f8c8 2000 	str.w	r2, [r8]
 8014db8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014dbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014dc0:	9307      	str	r3, [sp, #28]
 8014dc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8014dc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dce:	4b9c      	ldr	r3, [pc, #624]	@ (8015040 <_printf_float+0x2c8>)
 8014dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8014dd4:	f7eb feca 	bl	8000b6c <__aeabi_dcmpun>
 8014dd8:	bb70      	cbnz	r0, 8014e38 <_printf_float+0xc0>
 8014dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dde:	4b98      	ldr	r3, [pc, #608]	@ (8015040 <_printf_float+0x2c8>)
 8014de0:	f04f 32ff 	mov.w	r2, #4294967295
 8014de4:	f7eb fea4 	bl	8000b30 <__aeabi_dcmple>
 8014de8:	bb30      	cbnz	r0, 8014e38 <_printf_float+0xc0>
 8014dea:	2200      	movs	r2, #0
 8014dec:	2300      	movs	r3, #0
 8014dee:	4640      	mov	r0, r8
 8014df0:	4649      	mov	r1, r9
 8014df2:	f7eb fe93 	bl	8000b1c <__aeabi_dcmplt>
 8014df6:	b110      	cbz	r0, 8014dfe <_printf_float+0x86>
 8014df8:	232d      	movs	r3, #45	@ 0x2d
 8014dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014dfe:	4a91      	ldr	r2, [pc, #580]	@ (8015044 <_printf_float+0x2cc>)
 8014e00:	4b91      	ldr	r3, [pc, #580]	@ (8015048 <_printf_float+0x2d0>)
 8014e02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014e06:	bf8c      	ite	hi
 8014e08:	4690      	movhi	r8, r2
 8014e0a:	4698      	movls	r8, r3
 8014e0c:	2303      	movs	r3, #3
 8014e0e:	6123      	str	r3, [r4, #16]
 8014e10:	f02b 0304 	bic.w	r3, fp, #4
 8014e14:	6023      	str	r3, [r4, #0]
 8014e16:	f04f 0900 	mov.w	r9, #0
 8014e1a:	9700      	str	r7, [sp, #0]
 8014e1c:	4633      	mov	r3, r6
 8014e1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014e20:	4621      	mov	r1, r4
 8014e22:	4628      	mov	r0, r5
 8014e24:	f000 f9d2 	bl	80151cc <_printf_common>
 8014e28:	3001      	adds	r0, #1
 8014e2a:	f040 808d 	bne.w	8014f48 <_printf_float+0x1d0>
 8014e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e32:	b00d      	add	sp, #52	@ 0x34
 8014e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e38:	4642      	mov	r2, r8
 8014e3a:	464b      	mov	r3, r9
 8014e3c:	4640      	mov	r0, r8
 8014e3e:	4649      	mov	r1, r9
 8014e40:	f7eb fe94 	bl	8000b6c <__aeabi_dcmpun>
 8014e44:	b140      	cbz	r0, 8014e58 <_printf_float+0xe0>
 8014e46:	464b      	mov	r3, r9
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	bfbc      	itt	lt
 8014e4c:	232d      	movlt	r3, #45	@ 0x2d
 8014e4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014e52:	4a7e      	ldr	r2, [pc, #504]	@ (801504c <_printf_float+0x2d4>)
 8014e54:	4b7e      	ldr	r3, [pc, #504]	@ (8015050 <_printf_float+0x2d8>)
 8014e56:	e7d4      	b.n	8014e02 <_printf_float+0x8a>
 8014e58:	6863      	ldr	r3, [r4, #4]
 8014e5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014e5e:	9206      	str	r2, [sp, #24]
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	d13b      	bne.n	8014edc <_printf_float+0x164>
 8014e64:	2306      	movs	r3, #6
 8014e66:	6063      	str	r3, [r4, #4]
 8014e68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	6022      	str	r2, [r4, #0]
 8014e70:	9303      	str	r3, [sp, #12]
 8014e72:	ab0a      	add	r3, sp, #40	@ 0x28
 8014e74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014e78:	ab09      	add	r3, sp, #36	@ 0x24
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	6861      	ldr	r1, [r4, #4]
 8014e7e:	ec49 8b10 	vmov	d0, r8, r9
 8014e82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014e86:	4628      	mov	r0, r5
 8014e88:	f7ff fed6 	bl	8014c38 <__cvt>
 8014e8c:	9b06      	ldr	r3, [sp, #24]
 8014e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014e90:	2b47      	cmp	r3, #71	@ 0x47
 8014e92:	4680      	mov	r8, r0
 8014e94:	d129      	bne.n	8014eea <_printf_float+0x172>
 8014e96:	1cc8      	adds	r0, r1, #3
 8014e98:	db02      	blt.n	8014ea0 <_printf_float+0x128>
 8014e9a:	6863      	ldr	r3, [r4, #4]
 8014e9c:	4299      	cmp	r1, r3
 8014e9e:	dd41      	ble.n	8014f24 <_printf_float+0x1ac>
 8014ea0:	f1aa 0a02 	sub.w	sl, sl, #2
 8014ea4:	fa5f fa8a 	uxtb.w	sl, sl
 8014ea8:	3901      	subs	r1, #1
 8014eaa:	4652      	mov	r2, sl
 8014eac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014eb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8014eb2:	f7ff ff26 	bl	8014d02 <__exponent>
 8014eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014eb8:	1813      	adds	r3, r2, r0
 8014eba:	2a01      	cmp	r2, #1
 8014ebc:	4681      	mov	r9, r0
 8014ebe:	6123      	str	r3, [r4, #16]
 8014ec0:	dc02      	bgt.n	8014ec8 <_printf_float+0x150>
 8014ec2:	6822      	ldr	r2, [r4, #0]
 8014ec4:	07d2      	lsls	r2, r2, #31
 8014ec6:	d501      	bpl.n	8014ecc <_printf_float+0x154>
 8014ec8:	3301      	adds	r3, #1
 8014eca:	6123      	str	r3, [r4, #16]
 8014ecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d0a2      	beq.n	8014e1a <_printf_float+0xa2>
 8014ed4:	232d      	movs	r3, #45	@ 0x2d
 8014ed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014eda:	e79e      	b.n	8014e1a <_printf_float+0xa2>
 8014edc:	9a06      	ldr	r2, [sp, #24]
 8014ede:	2a47      	cmp	r2, #71	@ 0x47
 8014ee0:	d1c2      	bne.n	8014e68 <_printf_float+0xf0>
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d1c0      	bne.n	8014e68 <_printf_float+0xf0>
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	e7bd      	b.n	8014e66 <_printf_float+0xee>
 8014eea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014eee:	d9db      	bls.n	8014ea8 <_printf_float+0x130>
 8014ef0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014ef4:	d118      	bne.n	8014f28 <_printf_float+0x1b0>
 8014ef6:	2900      	cmp	r1, #0
 8014ef8:	6863      	ldr	r3, [r4, #4]
 8014efa:	dd0b      	ble.n	8014f14 <_printf_float+0x19c>
 8014efc:	6121      	str	r1, [r4, #16]
 8014efe:	b913      	cbnz	r3, 8014f06 <_printf_float+0x18e>
 8014f00:	6822      	ldr	r2, [r4, #0]
 8014f02:	07d0      	lsls	r0, r2, #31
 8014f04:	d502      	bpl.n	8014f0c <_printf_float+0x194>
 8014f06:	3301      	adds	r3, #1
 8014f08:	440b      	add	r3, r1
 8014f0a:	6123      	str	r3, [r4, #16]
 8014f0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014f0e:	f04f 0900 	mov.w	r9, #0
 8014f12:	e7db      	b.n	8014ecc <_printf_float+0x154>
 8014f14:	b913      	cbnz	r3, 8014f1c <_printf_float+0x1a4>
 8014f16:	6822      	ldr	r2, [r4, #0]
 8014f18:	07d2      	lsls	r2, r2, #31
 8014f1a:	d501      	bpl.n	8014f20 <_printf_float+0x1a8>
 8014f1c:	3302      	adds	r3, #2
 8014f1e:	e7f4      	b.n	8014f0a <_printf_float+0x192>
 8014f20:	2301      	movs	r3, #1
 8014f22:	e7f2      	b.n	8014f0a <_printf_float+0x192>
 8014f24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f2a:	4299      	cmp	r1, r3
 8014f2c:	db05      	blt.n	8014f3a <_printf_float+0x1c2>
 8014f2e:	6823      	ldr	r3, [r4, #0]
 8014f30:	6121      	str	r1, [r4, #16]
 8014f32:	07d8      	lsls	r0, r3, #31
 8014f34:	d5ea      	bpl.n	8014f0c <_printf_float+0x194>
 8014f36:	1c4b      	adds	r3, r1, #1
 8014f38:	e7e7      	b.n	8014f0a <_printf_float+0x192>
 8014f3a:	2900      	cmp	r1, #0
 8014f3c:	bfd4      	ite	le
 8014f3e:	f1c1 0202 	rsble	r2, r1, #2
 8014f42:	2201      	movgt	r2, #1
 8014f44:	4413      	add	r3, r2
 8014f46:	e7e0      	b.n	8014f0a <_printf_float+0x192>
 8014f48:	6823      	ldr	r3, [r4, #0]
 8014f4a:	055a      	lsls	r2, r3, #21
 8014f4c:	d407      	bmi.n	8014f5e <_printf_float+0x1e6>
 8014f4e:	6923      	ldr	r3, [r4, #16]
 8014f50:	4642      	mov	r2, r8
 8014f52:	4631      	mov	r1, r6
 8014f54:	4628      	mov	r0, r5
 8014f56:	47b8      	blx	r7
 8014f58:	3001      	adds	r0, #1
 8014f5a:	d12b      	bne.n	8014fb4 <_printf_float+0x23c>
 8014f5c:	e767      	b.n	8014e2e <_printf_float+0xb6>
 8014f5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014f62:	f240 80dd 	bls.w	8015120 <_printf_float+0x3a8>
 8014f66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	f7eb fdcb 	bl	8000b08 <__aeabi_dcmpeq>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	d033      	beq.n	8014fde <_printf_float+0x266>
 8014f76:	4a37      	ldr	r2, [pc, #220]	@ (8015054 <_printf_float+0x2dc>)
 8014f78:	2301      	movs	r3, #1
 8014f7a:	4631      	mov	r1, r6
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	47b8      	blx	r7
 8014f80:	3001      	adds	r0, #1
 8014f82:	f43f af54 	beq.w	8014e2e <_printf_float+0xb6>
 8014f86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014f8a:	4543      	cmp	r3, r8
 8014f8c:	db02      	blt.n	8014f94 <_printf_float+0x21c>
 8014f8e:	6823      	ldr	r3, [r4, #0]
 8014f90:	07d8      	lsls	r0, r3, #31
 8014f92:	d50f      	bpl.n	8014fb4 <_printf_float+0x23c>
 8014f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f98:	4631      	mov	r1, r6
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	47b8      	blx	r7
 8014f9e:	3001      	adds	r0, #1
 8014fa0:	f43f af45 	beq.w	8014e2e <_printf_float+0xb6>
 8014fa4:	f04f 0900 	mov.w	r9, #0
 8014fa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fac:	f104 0a1a 	add.w	sl, r4, #26
 8014fb0:	45c8      	cmp	r8, r9
 8014fb2:	dc09      	bgt.n	8014fc8 <_printf_float+0x250>
 8014fb4:	6823      	ldr	r3, [r4, #0]
 8014fb6:	079b      	lsls	r3, r3, #30
 8014fb8:	f100 8103 	bmi.w	80151c2 <_printf_float+0x44a>
 8014fbc:	68e0      	ldr	r0, [r4, #12]
 8014fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014fc0:	4298      	cmp	r0, r3
 8014fc2:	bfb8      	it	lt
 8014fc4:	4618      	movlt	r0, r3
 8014fc6:	e734      	b.n	8014e32 <_printf_float+0xba>
 8014fc8:	2301      	movs	r3, #1
 8014fca:	4652      	mov	r2, sl
 8014fcc:	4631      	mov	r1, r6
 8014fce:	4628      	mov	r0, r5
 8014fd0:	47b8      	blx	r7
 8014fd2:	3001      	adds	r0, #1
 8014fd4:	f43f af2b 	beq.w	8014e2e <_printf_float+0xb6>
 8014fd8:	f109 0901 	add.w	r9, r9, #1
 8014fdc:	e7e8      	b.n	8014fb0 <_printf_float+0x238>
 8014fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	dc39      	bgt.n	8015058 <_printf_float+0x2e0>
 8014fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8015054 <_printf_float+0x2dc>)
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	4631      	mov	r1, r6
 8014fea:	4628      	mov	r0, r5
 8014fec:	47b8      	blx	r7
 8014fee:	3001      	adds	r0, #1
 8014ff0:	f43f af1d 	beq.w	8014e2e <_printf_float+0xb6>
 8014ff4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014ff8:	ea59 0303 	orrs.w	r3, r9, r3
 8014ffc:	d102      	bne.n	8015004 <_printf_float+0x28c>
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	07d9      	lsls	r1, r3, #31
 8015002:	d5d7      	bpl.n	8014fb4 <_printf_float+0x23c>
 8015004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015008:	4631      	mov	r1, r6
 801500a:	4628      	mov	r0, r5
 801500c:	47b8      	blx	r7
 801500e:	3001      	adds	r0, #1
 8015010:	f43f af0d 	beq.w	8014e2e <_printf_float+0xb6>
 8015014:	f04f 0a00 	mov.w	sl, #0
 8015018:	f104 0b1a 	add.w	fp, r4, #26
 801501c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801501e:	425b      	negs	r3, r3
 8015020:	4553      	cmp	r3, sl
 8015022:	dc01      	bgt.n	8015028 <_printf_float+0x2b0>
 8015024:	464b      	mov	r3, r9
 8015026:	e793      	b.n	8014f50 <_printf_float+0x1d8>
 8015028:	2301      	movs	r3, #1
 801502a:	465a      	mov	r2, fp
 801502c:	4631      	mov	r1, r6
 801502e:	4628      	mov	r0, r5
 8015030:	47b8      	blx	r7
 8015032:	3001      	adds	r0, #1
 8015034:	f43f aefb 	beq.w	8014e2e <_printf_float+0xb6>
 8015038:	f10a 0a01 	add.w	sl, sl, #1
 801503c:	e7ee      	b.n	801501c <_printf_float+0x2a4>
 801503e:	bf00      	nop
 8015040:	7fefffff 	.word	0x7fefffff
 8015044:	080176f4 	.word	0x080176f4
 8015048:	080176f0 	.word	0x080176f0
 801504c:	080176fc 	.word	0x080176fc
 8015050:	080176f8 	.word	0x080176f8
 8015054:	08017700 	.word	0x08017700
 8015058:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801505a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801505e:	4553      	cmp	r3, sl
 8015060:	bfa8      	it	ge
 8015062:	4653      	movge	r3, sl
 8015064:	2b00      	cmp	r3, #0
 8015066:	4699      	mov	r9, r3
 8015068:	dc36      	bgt.n	80150d8 <_printf_float+0x360>
 801506a:	f04f 0b00 	mov.w	fp, #0
 801506e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015072:	f104 021a 	add.w	r2, r4, #26
 8015076:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015078:	9306      	str	r3, [sp, #24]
 801507a:	eba3 0309 	sub.w	r3, r3, r9
 801507e:	455b      	cmp	r3, fp
 8015080:	dc31      	bgt.n	80150e6 <_printf_float+0x36e>
 8015082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015084:	459a      	cmp	sl, r3
 8015086:	dc3a      	bgt.n	80150fe <_printf_float+0x386>
 8015088:	6823      	ldr	r3, [r4, #0]
 801508a:	07da      	lsls	r2, r3, #31
 801508c:	d437      	bmi.n	80150fe <_printf_float+0x386>
 801508e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015090:	ebaa 0903 	sub.w	r9, sl, r3
 8015094:	9b06      	ldr	r3, [sp, #24]
 8015096:	ebaa 0303 	sub.w	r3, sl, r3
 801509a:	4599      	cmp	r9, r3
 801509c:	bfa8      	it	ge
 801509e:	4699      	movge	r9, r3
 80150a0:	f1b9 0f00 	cmp.w	r9, #0
 80150a4:	dc33      	bgt.n	801510e <_printf_float+0x396>
 80150a6:	f04f 0800 	mov.w	r8, #0
 80150aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ae:	f104 0b1a 	add.w	fp, r4, #26
 80150b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150b4:	ebaa 0303 	sub.w	r3, sl, r3
 80150b8:	eba3 0309 	sub.w	r3, r3, r9
 80150bc:	4543      	cmp	r3, r8
 80150be:	f77f af79 	ble.w	8014fb4 <_printf_float+0x23c>
 80150c2:	2301      	movs	r3, #1
 80150c4:	465a      	mov	r2, fp
 80150c6:	4631      	mov	r1, r6
 80150c8:	4628      	mov	r0, r5
 80150ca:	47b8      	blx	r7
 80150cc:	3001      	adds	r0, #1
 80150ce:	f43f aeae 	beq.w	8014e2e <_printf_float+0xb6>
 80150d2:	f108 0801 	add.w	r8, r8, #1
 80150d6:	e7ec      	b.n	80150b2 <_printf_float+0x33a>
 80150d8:	4642      	mov	r2, r8
 80150da:	4631      	mov	r1, r6
 80150dc:	4628      	mov	r0, r5
 80150de:	47b8      	blx	r7
 80150e0:	3001      	adds	r0, #1
 80150e2:	d1c2      	bne.n	801506a <_printf_float+0x2f2>
 80150e4:	e6a3      	b.n	8014e2e <_printf_float+0xb6>
 80150e6:	2301      	movs	r3, #1
 80150e8:	4631      	mov	r1, r6
 80150ea:	4628      	mov	r0, r5
 80150ec:	9206      	str	r2, [sp, #24]
 80150ee:	47b8      	blx	r7
 80150f0:	3001      	adds	r0, #1
 80150f2:	f43f ae9c 	beq.w	8014e2e <_printf_float+0xb6>
 80150f6:	9a06      	ldr	r2, [sp, #24]
 80150f8:	f10b 0b01 	add.w	fp, fp, #1
 80150fc:	e7bb      	b.n	8015076 <_printf_float+0x2fe>
 80150fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015102:	4631      	mov	r1, r6
 8015104:	4628      	mov	r0, r5
 8015106:	47b8      	blx	r7
 8015108:	3001      	adds	r0, #1
 801510a:	d1c0      	bne.n	801508e <_printf_float+0x316>
 801510c:	e68f      	b.n	8014e2e <_printf_float+0xb6>
 801510e:	9a06      	ldr	r2, [sp, #24]
 8015110:	464b      	mov	r3, r9
 8015112:	4442      	add	r2, r8
 8015114:	4631      	mov	r1, r6
 8015116:	4628      	mov	r0, r5
 8015118:	47b8      	blx	r7
 801511a:	3001      	adds	r0, #1
 801511c:	d1c3      	bne.n	80150a6 <_printf_float+0x32e>
 801511e:	e686      	b.n	8014e2e <_printf_float+0xb6>
 8015120:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015124:	f1ba 0f01 	cmp.w	sl, #1
 8015128:	dc01      	bgt.n	801512e <_printf_float+0x3b6>
 801512a:	07db      	lsls	r3, r3, #31
 801512c:	d536      	bpl.n	801519c <_printf_float+0x424>
 801512e:	2301      	movs	r3, #1
 8015130:	4642      	mov	r2, r8
 8015132:	4631      	mov	r1, r6
 8015134:	4628      	mov	r0, r5
 8015136:	47b8      	blx	r7
 8015138:	3001      	adds	r0, #1
 801513a:	f43f ae78 	beq.w	8014e2e <_printf_float+0xb6>
 801513e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015142:	4631      	mov	r1, r6
 8015144:	4628      	mov	r0, r5
 8015146:	47b8      	blx	r7
 8015148:	3001      	adds	r0, #1
 801514a:	f43f ae70 	beq.w	8014e2e <_printf_float+0xb6>
 801514e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015152:	2200      	movs	r2, #0
 8015154:	2300      	movs	r3, #0
 8015156:	f10a 3aff 	add.w	sl, sl, #4294967295
 801515a:	f7eb fcd5 	bl	8000b08 <__aeabi_dcmpeq>
 801515e:	b9c0      	cbnz	r0, 8015192 <_printf_float+0x41a>
 8015160:	4653      	mov	r3, sl
 8015162:	f108 0201 	add.w	r2, r8, #1
 8015166:	4631      	mov	r1, r6
 8015168:	4628      	mov	r0, r5
 801516a:	47b8      	blx	r7
 801516c:	3001      	adds	r0, #1
 801516e:	d10c      	bne.n	801518a <_printf_float+0x412>
 8015170:	e65d      	b.n	8014e2e <_printf_float+0xb6>
 8015172:	2301      	movs	r3, #1
 8015174:	465a      	mov	r2, fp
 8015176:	4631      	mov	r1, r6
 8015178:	4628      	mov	r0, r5
 801517a:	47b8      	blx	r7
 801517c:	3001      	adds	r0, #1
 801517e:	f43f ae56 	beq.w	8014e2e <_printf_float+0xb6>
 8015182:	f108 0801 	add.w	r8, r8, #1
 8015186:	45d0      	cmp	r8, sl
 8015188:	dbf3      	blt.n	8015172 <_printf_float+0x3fa>
 801518a:	464b      	mov	r3, r9
 801518c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015190:	e6df      	b.n	8014f52 <_printf_float+0x1da>
 8015192:	f04f 0800 	mov.w	r8, #0
 8015196:	f104 0b1a 	add.w	fp, r4, #26
 801519a:	e7f4      	b.n	8015186 <_printf_float+0x40e>
 801519c:	2301      	movs	r3, #1
 801519e:	4642      	mov	r2, r8
 80151a0:	e7e1      	b.n	8015166 <_printf_float+0x3ee>
 80151a2:	2301      	movs	r3, #1
 80151a4:	464a      	mov	r2, r9
 80151a6:	4631      	mov	r1, r6
 80151a8:	4628      	mov	r0, r5
 80151aa:	47b8      	blx	r7
 80151ac:	3001      	adds	r0, #1
 80151ae:	f43f ae3e 	beq.w	8014e2e <_printf_float+0xb6>
 80151b2:	f108 0801 	add.w	r8, r8, #1
 80151b6:	68e3      	ldr	r3, [r4, #12]
 80151b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80151ba:	1a5b      	subs	r3, r3, r1
 80151bc:	4543      	cmp	r3, r8
 80151be:	dcf0      	bgt.n	80151a2 <_printf_float+0x42a>
 80151c0:	e6fc      	b.n	8014fbc <_printf_float+0x244>
 80151c2:	f04f 0800 	mov.w	r8, #0
 80151c6:	f104 0919 	add.w	r9, r4, #25
 80151ca:	e7f4      	b.n	80151b6 <_printf_float+0x43e>

080151cc <_printf_common>:
 80151cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151d0:	4616      	mov	r6, r2
 80151d2:	4698      	mov	r8, r3
 80151d4:	688a      	ldr	r2, [r1, #8]
 80151d6:	690b      	ldr	r3, [r1, #16]
 80151d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80151dc:	4293      	cmp	r3, r2
 80151de:	bfb8      	it	lt
 80151e0:	4613      	movlt	r3, r2
 80151e2:	6033      	str	r3, [r6, #0]
 80151e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80151e8:	4607      	mov	r7, r0
 80151ea:	460c      	mov	r4, r1
 80151ec:	b10a      	cbz	r2, 80151f2 <_printf_common+0x26>
 80151ee:	3301      	adds	r3, #1
 80151f0:	6033      	str	r3, [r6, #0]
 80151f2:	6823      	ldr	r3, [r4, #0]
 80151f4:	0699      	lsls	r1, r3, #26
 80151f6:	bf42      	ittt	mi
 80151f8:	6833      	ldrmi	r3, [r6, #0]
 80151fa:	3302      	addmi	r3, #2
 80151fc:	6033      	strmi	r3, [r6, #0]
 80151fe:	6825      	ldr	r5, [r4, #0]
 8015200:	f015 0506 	ands.w	r5, r5, #6
 8015204:	d106      	bne.n	8015214 <_printf_common+0x48>
 8015206:	f104 0a19 	add.w	sl, r4, #25
 801520a:	68e3      	ldr	r3, [r4, #12]
 801520c:	6832      	ldr	r2, [r6, #0]
 801520e:	1a9b      	subs	r3, r3, r2
 8015210:	42ab      	cmp	r3, r5
 8015212:	dc26      	bgt.n	8015262 <_printf_common+0x96>
 8015214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015218:	6822      	ldr	r2, [r4, #0]
 801521a:	3b00      	subs	r3, #0
 801521c:	bf18      	it	ne
 801521e:	2301      	movne	r3, #1
 8015220:	0692      	lsls	r2, r2, #26
 8015222:	d42b      	bmi.n	801527c <_printf_common+0xb0>
 8015224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015228:	4641      	mov	r1, r8
 801522a:	4638      	mov	r0, r7
 801522c:	47c8      	blx	r9
 801522e:	3001      	adds	r0, #1
 8015230:	d01e      	beq.n	8015270 <_printf_common+0xa4>
 8015232:	6823      	ldr	r3, [r4, #0]
 8015234:	6922      	ldr	r2, [r4, #16]
 8015236:	f003 0306 	and.w	r3, r3, #6
 801523a:	2b04      	cmp	r3, #4
 801523c:	bf02      	ittt	eq
 801523e:	68e5      	ldreq	r5, [r4, #12]
 8015240:	6833      	ldreq	r3, [r6, #0]
 8015242:	1aed      	subeq	r5, r5, r3
 8015244:	68a3      	ldr	r3, [r4, #8]
 8015246:	bf0c      	ite	eq
 8015248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801524c:	2500      	movne	r5, #0
 801524e:	4293      	cmp	r3, r2
 8015250:	bfc4      	itt	gt
 8015252:	1a9b      	subgt	r3, r3, r2
 8015254:	18ed      	addgt	r5, r5, r3
 8015256:	2600      	movs	r6, #0
 8015258:	341a      	adds	r4, #26
 801525a:	42b5      	cmp	r5, r6
 801525c:	d11a      	bne.n	8015294 <_printf_common+0xc8>
 801525e:	2000      	movs	r0, #0
 8015260:	e008      	b.n	8015274 <_printf_common+0xa8>
 8015262:	2301      	movs	r3, #1
 8015264:	4652      	mov	r2, sl
 8015266:	4641      	mov	r1, r8
 8015268:	4638      	mov	r0, r7
 801526a:	47c8      	blx	r9
 801526c:	3001      	adds	r0, #1
 801526e:	d103      	bne.n	8015278 <_printf_common+0xac>
 8015270:	f04f 30ff 	mov.w	r0, #4294967295
 8015274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015278:	3501      	adds	r5, #1
 801527a:	e7c6      	b.n	801520a <_printf_common+0x3e>
 801527c:	18e1      	adds	r1, r4, r3
 801527e:	1c5a      	adds	r2, r3, #1
 8015280:	2030      	movs	r0, #48	@ 0x30
 8015282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015286:	4422      	add	r2, r4
 8015288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801528c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015290:	3302      	adds	r3, #2
 8015292:	e7c7      	b.n	8015224 <_printf_common+0x58>
 8015294:	2301      	movs	r3, #1
 8015296:	4622      	mov	r2, r4
 8015298:	4641      	mov	r1, r8
 801529a:	4638      	mov	r0, r7
 801529c:	47c8      	blx	r9
 801529e:	3001      	adds	r0, #1
 80152a0:	d0e6      	beq.n	8015270 <_printf_common+0xa4>
 80152a2:	3601      	adds	r6, #1
 80152a4:	e7d9      	b.n	801525a <_printf_common+0x8e>
	...

080152a8 <_printf_i>:
 80152a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152ac:	7e0f      	ldrb	r7, [r1, #24]
 80152ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80152b0:	2f78      	cmp	r7, #120	@ 0x78
 80152b2:	4691      	mov	r9, r2
 80152b4:	4680      	mov	r8, r0
 80152b6:	460c      	mov	r4, r1
 80152b8:	469a      	mov	sl, r3
 80152ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80152be:	d807      	bhi.n	80152d0 <_printf_i+0x28>
 80152c0:	2f62      	cmp	r7, #98	@ 0x62
 80152c2:	d80a      	bhi.n	80152da <_printf_i+0x32>
 80152c4:	2f00      	cmp	r7, #0
 80152c6:	f000 80d1 	beq.w	801546c <_printf_i+0x1c4>
 80152ca:	2f58      	cmp	r7, #88	@ 0x58
 80152cc:	f000 80b8 	beq.w	8015440 <_printf_i+0x198>
 80152d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80152d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80152d8:	e03a      	b.n	8015350 <_printf_i+0xa8>
 80152da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80152de:	2b15      	cmp	r3, #21
 80152e0:	d8f6      	bhi.n	80152d0 <_printf_i+0x28>
 80152e2:	a101      	add	r1, pc, #4	@ (adr r1, 80152e8 <_printf_i+0x40>)
 80152e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80152e8:	08015341 	.word	0x08015341
 80152ec:	08015355 	.word	0x08015355
 80152f0:	080152d1 	.word	0x080152d1
 80152f4:	080152d1 	.word	0x080152d1
 80152f8:	080152d1 	.word	0x080152d1
 80152fc:	080152d1 	.word	0x080152d1
 8015300:	08015355 	.word	0x08015355
 8015304:	080152d1 	.word	0x080152d1
 8015308:	080152d1 	.word	0x080152d1
 801530c:	080152d1 	.word	0x080152d1
 8015310:	080152d1 	.word	0x080152d1
 8015314:	08015453 	.word	0x08015453
 8015318:	0801537f 	.word	0x0801537f
 801531c:	0801540d 	.word	0x0801540d
 8015320:	080152d1 	.word	0x080152d1
 8015324:	080152d1 	.word	0x080152d1
 8015328:	08015475 	.word	0x08015475
 801532c:	080152d1 	.word	0x080152d1
 8015330:	0801537f 	.word	0x0801537f
 8015334:	080152d1 	.word	0x080152d1
 8015338:	080152d1 	.word	0x080152d1
 801533c:	08015415 	.word	0x08015415
 8015340:	6833      	ldr	r3, [r6, #0]
 8015342:	1d1a      	adds	r2, r3, #4
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	6032      	str	r2, [r6, #0]
 8015348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801534c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015350:	2301      	movs	r3, #1
 8015352:	e09c      	b.n	801548e <_printf_i+0x1e6>
 8015354:	6833      	ldr	r3, [r6, #0]
 8015356:	6820      	ldr	r0, [r4, #0]
 8015358:	1d19      	adds	r1, r3, #4
 801535a:	6031      	str	r1, [r6, #0]
 801535c:	0606      	lsls	r6, r0, #24
 801535e:	d501      	bpl.n	8015364 <_printf_i+0xbc>
 8015360:	681d      	ldr	r5, [r3, #0]
 8015362:	e003      	b.n	801536c <_printf_i+0xc4>
 8015364:	0645      	lsls	r5, r0, #25
 8015366:	d5fb      	bpl.n	8015360 <_printf_i+0xb8>
 8015368:	f9b3 5000 	ldrsh.w	r5, [r3]
 801536c:	2d00      	cmp	r5, #0
 801536e:	da03      	bge.n	8015378 <_printf_i+0xd0>
 8015370:	232d      	movs	r3, #45	@ 0x2d
 8015372:	426d      	negs	r5, r5
 8015374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015378:	4858      	ldr	r0, [pc, #352]	@ (80154dc <_printf_i+0x234>)
 801537a:	230a      	movs	r3, #10
 801537c:	e011      	b.n	80153a2 <_printf_i+0xfa>
 801537e:	6821      	ldr	r1, [r4, #0]
 8015380:	6833      	ldr	r3, [r6, #0]
 8015382:	0608      	lsls	r0, r1, #24
 8015384:	f853 5b04 	ldr.w	r5, [r3], #4
 8015388:	d402      	bmi.n	8015390 <_printf_i+0xe8>
 801538a:	0649      	lsls	r1, r1, #25
 801538c:	bf48      	it	mi
 801538e:	b2ad      	uxthmi	r5, r5
 8015390:	2f6f      	cmp	r7, #111	@ 0x6f
 8015392:	4852      	ldr	r0, [pc, #328]	@ (80154dc <_printf_i+0x234>)
 8015394:	6033      	str	r3, [r6, #0]
 8015396:	bf14      	ite	ne
 8015398:	230a      	movne	r3, #10
 801539a:	2308      	moveq	r3, #8
 801539c:	2100      	movs	r1, #0
 801539e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80153a2:	6866      	ldr	r6, [r4, #4]
 80153a4:	60a6      	str	r6, [r4, #8]
 80153a6:	2e00      	cmp	r6, #0
 80153a8:	db05      	blt.n	80153b6 <_printf_i+0x10e>
 80153aa:	6821      	ldr	r1, [r4, #0]
 80153ac:	432e      	orrs	r6, r5
 80153ae:	f021 0104 	bic.w	r1, r1, #4
 80153b2:	6021      	str	r1, [r4, #0]
 80153b4:	d04b      	beq.n	801544e <_printf_i+0x1a6>
 80153b6:	4616      	mov	r6, r2
 80153b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80153bc:	fb03 5711 	mls	r7, r3, r1, r5
 80153c0:	5dc7      	ldrb	r7, [r0, r7]
 80153c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80153c6:	462f      	mov	r7, r5
 80153c8:	42bb      	cmp	r3, r7
 80153ca:	460d      	mov	r5, r1
 80153cc:	d9f4      	bls.n	80153b8 <_printf_i+0x110>
 80153ce:	2b08      	cmp	r3, #8
 80153d0:	d10b      	bne.n	80153ea <_printf_i+0x142>
 80153d2:	6823      	ldr	r3, [r4, #0]
 80153d4:	07df      	lsls	r7, r3, #31
 80153d6:	d508      	bpl.n	80153ea <_printf_i+0x142>
 80153d8:	6923      	ldr	r3, [r4, #16]
 80153da:	6861      	ldr	r1, [r4, #4]
 80153dc:	4299      	cmp	r1, r3
 80153de:	bfde      	ittt	le
 80153e0:	2330      	movle	r3, #48	@ 0x30
 80153e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80153e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80153ea:	1b92      	subs	r2, r2, r6
 80153ec:	6122      	str	r2, [r4, #16]
 80153ee:	f8cd a000 	str.w	sl, [sp]
 80153f2:	464b      	mov	r3, r9
 80153f4:	aa03      	add	r2, sp, #12
 80153f6:	4621      	mov	r1, r4
 80153f8:	4640      	mov	r0, r8
 80153fa:	f7ff fee7 	bl	80151cc <_printf_common>
 80153fe:	3001      	adds	r0, #1
 8015400:	d14a      	bne.n	8015498 <_printf_i+0x1f0>
 8015402:	f04f 30ff 	mov.w	r0, #4294967295
 8015406:	b004      	add	sp, #16
 8015408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	f043 0320 	orr.w	r3, r3, #32
 8015412:	6023      	str	r3, [r4, #0]
 8015414:	4832      	ldr	r0, [pc, #200]	@ (80154e0 <_printf_i+0x238>)
 8015416:	2778      	movs	r7, #120	@ 0x78
 8015418:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801541c:	6823      	ldr	r3, [r4, #0]
 801541e:	6831      	ldr	r1, [r6, #0]
 8015420:	061f      	lsls	r7, r3, #24
 8015422:	f851 5b04 	ldr.w	r5, [r1], #4
 8015426:	d402      	bmi.n	801542e <_printf_i+0x186>
 8015428:	065f      	lsls	r7, r3, #25
 801542a:	bf48      	it	mi
 801542c:	b2ad      	uxthmi	r5, r5
 801542e:	6031      	str	r1, [r6, #0]
 8015430:	07d9      	lsls	r1, r3, #31
 8015432:	bf44      	itt	mi
 8015434:	f043 0320 	orrmi.w	r3, r3, #32
 8015438:	6023      	strmi	r3, [r4, #0]
 801543a:	b11d      	cbz	r5, 8015444 <_printf_i+0x19c>
 801543c:	2310      	movs	r3, #16
 801543e:	e7ad      	b.n	801539c <_printf_i+0xf4>
 8015440:	4826      	ldr	r0, [pc, #152]	@ (80154dc <_printf_i+0x234>)
 8015442:	e7e9      	b.n	8015418 <_printf_i+0x170>
 8015444:	6823      	ldr	r3, [r4, #0]
 8015446:	f023 0320 	bic.w	r3, r3, #32
 801544a:	6023      	str	r3, [r4, #0]
 801544c:	e7f6      	b.n	801543c <_printf_i+0x194>
 801544e:	4616      	mov	r6, r2
 8015450:	e7bd      	b.n	80153ce <_printf_i+0x126>
 8015452:	6833      	ldr	r3, [r6, #0]
 8015454:	6825      	ldr	r5, [r4, #0]
 8015456:	6961      	ldr	r1, [r4, #20]
 8015458:	1d18      	adds	r0, r3, #4
 801545a:	6030      	str	r0, [r6, #0]
 801545c:	062e      	lsls	r6, r5, #24
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	d501      	bpl.n	8015466 <_printf_i+0x1be>
 8015462:	6019      	str	r1, [r3, #0]
 8015464:	e002      	b.n	801546c <_printf_i+0x1c4>
 8015466:	0668      	lsls	r0, r5, #25
 8015468:	d5fb      	bpl.n	8015462 <_printf_i+0x1ba>
 801546a:	8019      	strh	r1, [r3, #0]
 801546c:	2300      	movs	r3, #0
 801546e:	6123      	str	r3, [r4, #16]
 8015470:	4616      	mov	r6, r2
 8015472:	e7bc      	b.n	80153ee <_printf_i+0x146>
 8015474:	6833      	ldr	r3, [r6, #0]
 8015476:	1d1a      	adds	r2, r3, #4
 8015478:	6032      	str	r2, [r6, #0]
 801547a:	681e      	ldr	r6, [r3, #0]
 801547c:	6862      	ldr	r2, [r4, #4]
 801547e:	2100      	movs	r1, #0
 8015480:	4630      	mov	r0, r6
 8015482:	f7ea fec5 	bl	8000210 <memchr>
 8015486:	b108      	cbz	r0, 801548c <_printf_i+0x1e4>
 8015488:	1b80      	subs	r0, r0, r6
 801548a:	6060      	str	r0, [r4, #4]
 801548c:	6863      	ldr	r3, [r4, #4]
 801548e:	6123      	str	r3, [r4, #16]
 8015490:	2300      	movs	r3, #0
 8015492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015496:	e7aa      	b.n	80153ee <_printf_i+0x146>
 8015498:	6923      	ldr	r3, [r4, #16]
 801549a:	4632      	mov	r2, r6
 801549c:	4649      	mov	r1, r9
 801549e:	4640      	mov	r0, r8
 80154a0:	47d0      	blx	sl
 80154a2:	3001      	adds	r0, #1
 80154a4:	d0ad      	beq.n	8015402 <_printf_i+0x15a>
 80154a6:	6823      	ldr	r3, [r4, #0]
 80154a8:	079b      	lsls	r3, r3, #30
 80154aa:	d413      	bmi.n	80154d4 <_printf_i+0x22c>
 80154ac:	68e0      	ldr	r0, [r4, #12]
 80154ae:	9b03      	ldr	r3, [sp, #12]
 80154b0:	4298      	cmp	r0, r3
 80154b2:	bfb8      	it	lt
 80154b4:	4618      	movlt	r0, r3
 80154b6:	e7a6      	b.n	8015406 <_printf_i+0x15e>
 80154b8:	2301      	movs	r3, #1
 80154ba:	4632      	mov	r2, r6
 80154bc:	4649      	mov	r1, r9
 80154be:	4640      	mov	r0, r8
 80154c0:	47d0      	blx	sl
 80154c2:	3001      	adds	r0, #1
 80154c4:	d09d      	beq.n	8015402 <_printf_i+0x15a>
 80154c6:	3501      	adds	r5, #1
 80154c8:	68e3      	ldr	r3, [r4, #12]
 80154ca:	9903      	ldr	r1, [sp, #12]
 80154cc:	1a5b      	subs	r3, r3, r1
 80154ce:	42ab      	cmp	r3, r5
 80154d0:	dcf2      	bgt.n	80154b8 <_printf_i+0x210>
 80154d2:	e7eb      	b.n	80154ac <_printf_i+0x204>
 80154d4:	2500      	movs	r5, #0
 80154d6:	f104 0619 	add.w	r6, r4, #25
 80154da:	e7f5      	b.n	80154c8 <_printf_i+0x220>
 80154dc:	08017702 	.word	0x08017702
 80154e0:	08017713 	.word	0x08017713

080154e4 <std>:
 80154e4:	2300      	movs	r3, #0
 80154e6:	b510      	push	{r4, lr}
 80154e8:	4604      	mov	r4, r0
 80154ea:	e9c0 3300 	strd	r3, r3, [r0]
 80154ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80154f2:	6083      	str	r3, [r0, #8]
 80154f4:	8181      	strh	r1, [r0, #12]
 80154f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80154f8:	81c2      	strh	r2, [r0, #14]
 80154fa:	6183      	str	r3, [r0, #24]
 80154fc:	4619      	mov	r1, r3
 80154fe:	2208      	movs	r2, #8
 8015500:	305c      	adds	r0, #92	@ 0x5c
 8015502:	f000 f9f9 	bl	80158f8 <memset>
 8015506:	4b0d      	ldr	r3, [pc, #52]	@ (801553c <std+0x58>)
 8015508:	6263      	str	r3, [r4, #36]	@ 0x24
 801550a:	4b0d      	ldr	r3, [pc, #52]	@ (8015540 <std+0x5c>)
 801550c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801550e:	4b0d      	ldr	r3, [pc, #52]	@ (8015544 <std+0x60>)
 8015510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015512:	4b0d      	ldr	r3, [pc, #52]	@ (8015548 <std+0x64>)
 8015514:	6323      	str	r3, [r4, #48]	@ 0x30
 8015516:	4b0d      	ldr	r3, [pc, #52]	@ (801554c <std+0x68>)
 8015518:	6224      	str	r4, [r4, #32]
 801551a:	429c      	cmp	r4, r3
 801551c:	d006      	beq.n	801552c <std+0x48>
 801551e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015522:	4294      	cmp	r4, r2
 8015524:	d002      	beq.n	801552c <std+0x48>
 8015526:	33d0      	adds	r3, #208	@ 0xd0
 8015528:	429c      	cmp	r4, r3
 801552a:	d105      	bne.n	8015538 <std+0x54>
 801552c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015534:	f000 ba70 	b.w	8015a18 <__retarget_lock_init_recursive>
 8015538:	bd10      	pop	{r4, pc}
 801553a:	bf00      	nop
 801553c:	08015749 	.word	0x08015749
 8015540:	0801576b 	.word	0x0801576b
 8015544:	080157a3 	.word	0x080157a3
 8015548:	080157c7 	.word	0x080157c7
 801554c:	2000298c 	.word	0x2000298c

08015550 <stdio_exit_handler>:
 8015550:	4a02      	ldr	r2, [pc, #8]	@ (801555c <stdio_exit_handler+0xc>)
 8015552:	4903      	ldr	r1, [pc, #12]	@ (8015560 <stdio_exit_handler+0x10>)
 8015554:	4803      	ldr	r0, [pc, #12]	@ (8015564 <stdio_exit_handler+0x14>)
 8015556:	f000 b869 	b.w	801562c <_fwalk_sglue>
 801555a:	bf00      	nop
 801555c:	20000068 	.word	0x20000068
 8015560:	08017371 	.word	0x08017371
 8015564:	20000078 	.word	0x20000078

08015568 <cleanup_stdio>:
 8015568:	6841      	ldr	r1, [r0, #4]
 801556a:	4b0c      	ldr	r3, [pc, #48]	@ (801559c <cleanup_stdio+0x34>)
 801556c:	4299      	cmp	r1, r3
 801556e:	b510      	push	{r4, lr}
 8015570:	4604      	mov	r4, r0
 8015572:	d001      	beq.n	8015578 <cleanup_stdio+0x10>
 8015574:	f001 fefc 	bl	8017370 <_fflush_r>
 8015578:	68a1      	ldr	r1, [r4, #8]
 801557a:	4b09      	ldr	r3, [pc, #36]	@ (80155a0 <cleanup_stdio+0x38>)
 801557c:	4299      	cmp	r1, r3
 801557e:	d002      	beq.n	8015586 <cleanup_stdio+0x1e>
 8015580:	4620      	mov	r0, r4
 8015582:	f001 fef5 	bl	8017370 <_fflush_r>
 8015586:	68e1      	ldr	r1, [r4, #12]
 8015588:	4b06      	ldr	r3, [pc, #24]	@ (80155a4 <cleanup_stdio+0x3c>)
 801558a:	4299      	cmp	r1, r3
 801558c:	d004      	beq.n	8015598 <cleanup_stdio+0x30>
 801558e:	4620      	mov	r0, r4
 8015590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015594:	f001 beec 	b.w	8017370 <_fflush_r>
 8015598:	bd10      	pop	{r4, pc}
 801559a:	bf00      	nop
 801559c:	2000298c 	.word	0x2000298c
 80155a0:	200029f4 	.word	0x200029f4
 80155a4:	20002a5c 	.word	0x20002a5c

080155a8 <global_stdio_init.part.0>:
 80155a8:	b510      	push	{r4, lr}
 80155aa:	4b0b      	ldr	r3, [pc, #44]	@ (80155d8 <global_stdio_init.part.0+0x30>)
 80155ac:	4c0b      	ldr	r4, [pc, #44]	@ (80155dc <global_stdio_init.part.0+0x34>)
 80155ae:	4a0c      	ldr	r2, [pc, #48]	@ (80155e0 <global_stdio_init.part.0+0x38>)
 80155b0:	601a      	str	r2, [r3, #0]
 80155b2:	4620      	mov	r0, r4
 80155b4:	2200      	movs	r2, #0
 80155b6:	2104      	movs	r1, #4
 80155b8:	f7ff ff94 	bl	80154e4 <std>
 80155bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80155c0:	2201      	movs	r2, #1
 80155c2:	2109      	movs	r1, #9
 80155c4:	f7ff ff8e 	bl	80154e4 <std>
 80155c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80155cc:	2202      	movs	r2, #2
 80155ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155d2:	2112      	movs	r1, #18
 80155d4:	f7ff bf86 	b.w	80154e4 <std>
 80155d8:	20002ac4 	.word	0x20002ac4
 80155dc:	2000298c 	.word	0x2000298c
 80155e0:	08015551 	.word	0x08015551

080155e4 <__sfp_lock_acquire>:
 80155e4:	4801      	ldr	r0, [pc, #4]	@ (80155ec <__sfp_lock_acquire+0x8>)
 80155e6:	f000 ba18 	b.w	8015a1a <__retarget_lock_acquire_recursive>
 80155ea:	bf00      	nop
 80155ec:	20002acd 	.word	0x20002acd

080155f0 <__sfp_lock_release>:
 80155f0:	4801      	ldr	r0, [pc, #4]	@ (80155f8 <__sfp_lock_release+0x8>)
 80155f2:	f000 ba13 	b.w	8015a1c <__retarget_lock_release_recursive>
 80155f6:	bf00      	nop
 80155f8:	20002acd 	.word	0x20002acd

080155fc <__sinit>:
 80155fc:	b510      	push	{r4, lr}
 80155fe:	4604      	mov	r4, r0
 8015600:	f7ff fff0 	bl	80155e4 <__sfp_lock_acquire>
 8015604:	6a23      	ldr	r3, [r4, #32]
 8015606:	b11b      	cbz	r3, 8015610 <__sinit+0x14>
 8015608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801560c:	f7ff bff0 	b.w	80155f0 <__sfp_lock_release>
 8015610:	4b04      	ldr	r3, [pc, #16]	@ (8015624 <__sinit+0x28>)
 8015612:	6223      	str	r3, [r4, #32]
 8015614:	4b04      	ldr	r3, [pc, #16]	@ (8015628 <__sinit+0x2c>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1f5      	bne.n	8015608 <__sinit+0xc>
 801561c:	f7ff ffc4 	bl	80155a8 <global_stdio_init.part.0>
 8015620:	e7f2      	b.n	8015608 <__sinit+0xc>
 8015622:	bf00      	nop
 8015624:	08015569 	.word	0x08015569
 8015628:	20002ac4 	.word	0x20002ac4

0801562c <_fwalk_sglue>:
 801562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015630:	4607      	mov	r7, r0
 8015632:	4688      	mov	r8, r1
 8015634:	4614      	mov	r4, r2
 8015636:	2600      	movs	r6, #0
 8015638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801563c:	f1b9 0901 	subs.w	r9, r9, #1
 8015640:	d505      	bpl.n	801564e <_fwalk_sglue+0x22>
 8015642:	6824      	ldr	r4, [r4, #0]
 8015644:	2c00      	cmp	r4, #0
 8015646:	d1f7      	bne.n	8015638 <_fwalk_sglue+0xc>
 8015648:	4630      	mov	r0, r6
 801564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801564e:	89ab      	ldrh	r3, [r5, #12]
 8015650:	2b01      	cmp	r3, #1
 8015652:	d907      	bls.n	8015664 <_fwalk_sglue+0x38>
 8015654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015658:	3301      	adds	r3, #1
 801565a:	d003      	beq.n	8015664 <_fwalk_sglue+0x38>
 801565c:	4629      	mov	r1, r5
 801565e:	4638      	mov	r0, r7
 8015660:	47c0      	blx	r8
 8015662:	4306      	orrs	r6, r0
 8015664:	3568      	adds	r5, #104	@ 0x68
 8015666:	e7e9      	b.n	801563c <_fwalk_sglue+0x10>

08015668 <iprintf>:
 8015668:	b40f      	push	{r0, r1, r2, r3}
 801566a:	b507      	push	{r0, r1, r2, lr}
 801566c:	4906      	ldr	r1, [pc, #24]	@ (8015688 <iprintf+0x20>)
 801566e:	ab04      	add	r3, sp, #16
 8015670:	6808      	ldr	r0, [r1, #0]
 8015672:	f853 2b04 	ldr.w	r2, [r3], #4
 8015676:	6881      	ldr	r1, [r0, #8]
 8015678:	9301      	str	r3, [sp, #4]
 801567a:	f001 fcdd 	bl	8017038 <_vfiprintf_r>
 801567e:	b003      	add	sp, #12
 8015680:	f85d eb04 	ldr.w	lr, [sp], #4
 8015684:	b004      	add	sp, #16
 8015686:	4770      	bx	lr
 8015688:	20000074 	.word	0x20000074

0801568c <_puts_r>:
 801568c:	6a03      	ldr	r3, [r0, #32]
 801568e:	b570      	push	{r4, r5, r6, lr}
 8015690:	6884      	ldr	r4, [r0, #8]
 8015692:	4605      	mov	r5, r0
 8015694:	460e      	mov	r6, r1
 8015696:	b90b      	cbnz	r3, 801569c <_puts_r+0x10>
 8015698:	f7ff ffb0 	bl	80155fc <__sinit>
 801569c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801569e:	07db      	lsls	r3, r3, #31
 80156a0:	d405      	bmi.n	80156ae <_puts_r+0x22>
 80156a2:	89a3      	ldrh	r3, [r4, #12]
 80156a4:	0598      	lsls	r0, r3, #22
 80156a6:	d402      	bmi.n	80156ae <_puts_r+0x22>
 80156a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156aa:	f000 f9b6 	bl	8015a1a <__retarget_lock_acquire_recursive>
 80156ae:	89a3      	ldrh	r3, [r4, #12]
 80156b0:	0719      	lsls	r1, r3, #28
 80156b2:	d502      	bpl.n	80156ba <_puts_r+0x2e>
 80156b4:	6923      	ldr	r3, [r4, #16]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d135      	bne.n	8015726 <_puts_r+0x9a>
 80156ba:	4621      	mov	r1, r4
 80156bc:	4628      	mov	r0, r5
 80156be:	f000 f8c5 	bl	801584c <__swsetup_r>
 80156c2:	b380      	cbz	r0, 8015726 <_puts_r+0x9a>
 80156c4:	f04f 35ff 	mov.w	r5, #4294967295
 80156c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80156ca:	07da      	lsls	r2, r3, #31
 80156cc:	d405      	bmi.n	80156da <_puts_r+0x4e>
 80156ce:	89a3      	ldrh	r3, [r4, #12]
 80156d0:	059b      	lsls	r3, r3, #22
 80156d2:	d402      	bmi.n	80156da <_puts_r+0x4e>
 80156d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156d6:	f000 f9a1 	bl	8015a1c <__retarget_lock_release_recursive>
 80156da:	4628      	mov	r0, r5
 80156dc:	bd70      	pop	{r4, r5, r6, pc}
 80156de:	2b00      	cmp	r3, #0
 80156e0:	da04      	bge.n	80156ec <_puts_r+0x60>
 80156e2:	69a2      	ldr	r2, [r4, #24]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	dc17      	bgt.n	8015718 <_puts_r+0x8c>
 80156e8:	290a      	cmp	r1, #10
 80156ea:	d015      	beq.n	8015718 <_puts_r+0x8c>
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	1c5a      	adds	r2, r3, #1
 80156f0:	6022      	str	r2, [r4, #0]
 80156f2:	7019      	strb	r1, [r3, #0]
 80156f4:	68a3      	ldr	r3, [r4, #8]
 80156f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80156fa:	3b01      	subs	r3, #1
 80156fc:	60a3      	str	r3, [r4, #8]
 80156fe:	2900      	cmp	r1, #0
 8015700:	d1ed      	bne.n	80156de <_puts_r+0x52>
 8015702:	2b00      	cmp	r3, #0
 8015704:	da11      	bge.n	801572a <_puts_r+0x9e>
 8015706:	4622      	mov	r2, r4
 8015708:	210a      	movs	r1, #10
 801570a:	4628      	mov	r0, r5
 801570c:	f000 f85f 	bl	80157ce <__swbuf_r>
 8015710:	3001      	adds	r0, #1
 8015712:	d0d7      	beq.n	80156c4 <_puts_r+0x38>
 8015714:	250a      	movs	r5, #10
 8015716:	e7d7      	b.n	80156c8 <_puts_r+0x3c>
 8015718:	4622      	mov	r2, r4
 801571a:	4628      	mov	r0, r5
 801571c:	f000 f857 	bl	80157ce <__swbuf_r>
 8015720:	3001      	adds	r0, #1
 8015722:	d1e7      	bne.n	80156f4 <_puts_r+0x68>
 8015724:	e7ce      	b.n	80156c4 <_puts_r+0x38>
 8015726:	3e01      	subs	r6, #1
 8015728:	e7e4      	b.n	80156f4 <_puts_r+0x68>
 801572a:	6823      	ldr	r3, [r4, #0]
 801572c:	1c5a      	adds	r2, r3, #1
 801572e:	6022      	str	r2, [r4, #0]
 8015730:	220a      	movs	r2, #10
 8015732:	701a      	strb	r2, [r3, #0]
 8015734:	e7ee      	b.n	8015714 <_puts_r+0x88>
	...

08015738 <puts>:
 8015738:	4b02      	ldr	r3, [pc, #8]	@ (8015744 <puts+0xc>)
 801573a:	4601      	mov	r1, r0
 801573c:	6818      	ldr	r0, [r3, #0]
 801573e:	f7ff bfa5 	b.w	801568c <_puts_r>
 8015742:	bf00      	nop
 8015744:	20000074 	.word	0x20000074

08015748 <__sread>:
 8015748:	b510      	push	{r4, lr}
 801574a:	460c      	mov	r4, r1
 801574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015750:	f000 f914 	bl	801597c <_read_r>
 8015754:	2800      	cmp	r0, #0
 8015756:	bfab      	itete	ge
 8015758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801575a:	89a3      	ldrhlt	r3, [r4, #12]
 801575c:	181b      	addge	r3, r3, r0
 801575e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015762:	bfac      	ite	ge
 8015764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015766:	81a3      	strhlt	r3, [r4, #12]
 8015768:	bd10      	pop	{r4, pc}

0801576a <__swrite>:
 801576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801576e:	461f      	mov	r7, r3
 8015770:	898b      	ldrh	r3, [r1, #12]
 8015772:	05db      	lsls	r3, r3, #23
 8015774:	4605      	mov	r5, r0
 8015776:	460c      	mov	r4, r1
 8015778:	4616      	mov	r6, r2
 801577a:	d505      	bpl.n	8015788 <__swrite+0x1e>
 801577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015780:	2302      	movs	r3, #2
 8015782:	2200      	movs	r2, #0
 8015784:	f000 f8e8 	bl	8015958 <_lseek_r>
 8015788:	89a3      	ldrh	r3, [r4, #12]
 801578a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801578e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015792:	81a3      	strh	r3, [r4, #12]
 8015794:	4632      	mov	r2, r6
 8015796:	463b      	mov	r3, r7
 8015798:	4628      	mov	r0, r5
 801579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801579e:	f000 b8ff 	b.w	80159a0 <_write_r>

080157a2 <__sseek>:
 80157a2:	b510      	push	{r4, lr}
 80157a4:	460c      	mov	r4, r1
 80157a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157aa:	f000 f8d5 	bl	8015958 <_lseek_r>
 80157ae:	1c43      	adds	r3, r0, #1
 80157b0:	89a3      	ldrh	r3, [r4, #12]
 80157b2:	bf15      	itete	ne
 80157b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80157b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80157ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80157be:	81a3      	strheq	r3, [r4, #12]
 80157c0:	bf18      	it	ne
 80157c2:	81a3      	strhne	r3, [r4, #12]
 80157c4:	bd10      	pop	{r4, pc}

080157c6 <__sclose>:
 80157c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157ca:	f000 b8b5 	b.w	8015938 <_close_r>

080157ce <__swbuf_r>:
 80157ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157d0:	460e      	mov	r6, r1
 80157d2:	4614      	mov	r4, r2
 80157d4:	4605      	mov	r5, r0
 80157d6:	b118      	cbz	r0, 80157e0 <__swbuf_r+0x12>
 80157d8:	6a03      	ldr	r3, [r0, #32]
 80157da:	b90b      	cbnz	r3, 80157e0 <__swbuf_r+0x12>
 80157dc:	f7ff ff0e 	bl	80155fc <__sinit>
 80157e0:	69a3      	ldr	r3, [r4, #24]
 80157e2:	60a3      	str	r3, [r4, #8]
 80157e4:	89a3      	ldrh	r3, [r4, #12]
 80157e6:	071a      	lsls	r2, r3, #28
 80157e8:	d501      	bpl.n	80157ee <__swbuf_r+0x20>
 80157ea:	6923      	ldr	r3, [r4, #16]
 80157ec:	b943      	cbnz	r3, 8015800 <__swbuf_r+0x32>
 80157ee:	4621      	mov	r1, r4
 80157f0:	4628      	mov	r0, r5
 80157f2:	f000 f82b 	bl	801584c <__swsetup_r>
 80157f6:	b118      	cbz	r0, 8015800 <__swbuf_r+0x32>
 80157f8:	f04f 37ff 	mov.w	r7, #4294967295
 80157fc:	4638      	mov	r0, r7
 80157fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015800:	6823      	ldr	r3, [r4, #0]
 8015802:	6922      	ldr	r2, [r4, #16]
 8015804:	1a98      	subs	r0, r3, r2
 8015806:	6963      	ldr	r3, [r4, #20]
 8015808:	b2f6      	uxtb	r6, r6
 801580a:	4283      	cmp	r3, r0
 801580c:	4637      	mov	r7, r6
 801580e:	dc05      	bgt.n	801581c <__swbuf_r+0x4e>
 8015810:	4621      	mov	r1, r4
 8015812:	4628      	mov	r0, r5
 8015814:	f001 fdac 	bl	8017370 <_fflush_r>
 8015818:	2800      	cmp	r0, #0
 801581a:	d1ed      	bne.n	80157f8 <__swbuf_r+0x2a>
 801581c:	68a3      	ldr	r3, [r4, #8]
 801581e:	3b01      	subs	r3, #1
 8015820:	60a3      	str	r3, [r4, #8]
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	1c5a      	adds	r2, r3, #1
 8015826:	6022      	str	r2, [r4, #0]
 8015828:	701e      	strb	r6, [r3, #0]
 801582a:	6962      	ldr	r2, [r4, #20]
 801582c:	1c43      	adds	r3, r0, #1
 801582e:	429a      	cmp	r2, r3
 8015830:	d004      	beq.n	801583c <__swbuf_r+0x6e>
 8015832:	89a3      	ldrh	r3, [r4, #12]
 8015834:	07db      	lsls	r3, r3, #31
 8015836:	d5e1      	bpl.n	80157fc <__swbuf_r+0x2e>
 8015838:	2e0a      	cmp	r6, #10
 801583a:	d1df      	bne.n	80157fc <__swbuf_r+0x2e>
 801583c:	4621      	mov	r1, r4
 801583e:	4628      	mov	r0, r5
 8015840:	f001 fd96 	bl	8017370 <_fflush_r>
 8015844:	2800      	cmp	r0, #0
 8015846:	d0d9      	beq.n	80157fc <__swbuf_r+0x2e>
 8015848:	e7d6      	b.n	80157f8 <__swbuf_r+0x2a>
	...

0801584c <__swsetup_r>:
 801584c:	b538      	push	{r3, r4, r5, lr}
 801584e:	4b29      	ldr	r3, [pc, #164]	@ (80158f4 <__swsetup_r+0xa8>)
 8015850:	4605      	mov	r5, r0
 8015852:	6818      	ldr	r0, [r3, #0]
 8015854:	460c      	mov	r4, r1
 8015856:	b118      	cbz	r0, 8015860 <__swsetup_r+0x14>
 8015858:	6a03      	ldr	r3, [r0, #32]
 801585a:	b90b      	cbnz	r3, 8015860 <__swsetup_r+0x14>
 801585c:	f7ff fece 	bl	80155fc <__sinit>
 8015860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015864:	0719      	lsls	r1, r3, #28
 8015866:	d422      	bmi.n	80158ae <__swsetup_r+0x62>
 8015868:	06da      	lsls	r2, r3, #27
 801586a:	d407      	bmi.n	801587c <__swsetup_r+0x30>
 801586c:	2209      	movs	r2, #9
 801586e:	602a      	str	r2, [r5, #0]
 8015870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015874:	81a3      	strh	r3, [r4, #12]
 8015876:	f04f 30ff 	mov.w	r0, #4294967295
 801587a:	e033      	b.n	80158e4 <__swsetup_r+0x98>
 801587c:	0758      	lsls	r0, r3, #29
 801587e:	d512      	bpl.n	80158a6 <__swsetup_r+0x5a>
 8015880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015882:	b141      	cbz	r1, 8015896 <__swsetup_r+0x4a>
 8015884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015888:	4299      	cmp	r1, r3
 801588a:	d002      	beq.n	8015892 <__swsetup_r+0x46>
 801588c:	4628      	mov	r0, r5
 801588e:	f000 ff2f 	bl	80166f0 <_free_r>
 8015892:	2300      	movs	r3, #0
 8015894:	6363      	str	r3, [r4, #52]	@ 0x34
 8015896:	89a3      	ldrh	r3, [r4, #12]
 8015898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801589c:	81a3      	strh	r3, [r4, #12]
 801589e:	2300      	movs	r3, #0
 80158a0:	6063      	str	r3, [r4, #4]
 80158a2:	6923      	ldr	r3, [r4, #16]
 80158a4:	6023      	str	r3, [r4, #0]
 80158a6:	89a3      	ldrh	r3, [r4, #12]
 80158a8:	f043 0308 	orr.w	r3, r3, #8
 80158ac:	81a3      	strh	r3, [r4, #12]
 80158ae:	6923      	ldr	r3, [r4, #16]
 80158b0:	b94b      	cbnz	r3, 80158c6 <__swsetup_r+0x7a>
 80158b2:	89a3      	ldrh	r3, [r4, #12]
 80158b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80158b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80158bc:	d003      	beq.n	80158c6 <__swsetup_r+0x7a>
 80158be:	4621      	mov	r1, r4
 80158c0:	4628      	mov	r0, r5
 80158c2:	f001 fda3 	bl	801740c <__smakebuf_r>
 80158c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158ca:	f013 0201 	ands.w	r2, r3, #1
 80158ce:	d00a      	beq.n	80158e6 <__swsetup_r+0x9a>
 80158d0:	2200      	movs	r2, #0
 80158d2:	60a2      	str	r2, [r4, #8]
 80158d4:	6962      	ldr	r2, [r4, #20]
 80158d6:	4252      	negs	r2, r2
 80158d8:	61a2      	str	r2, [r4, #24]
 80158da:	6922      	ldr	r2, [r4, #16]
 80158dc:	b942      	cbnz	r2, 80158f0 <__swsetup_r+0xa4>
 80158de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80158e2:	d1c5      	bne.n	8015870 <__swsetup_r+0x24>
 80158e4:	bd38      	pop	{r3, r4, r5, pc}
 80158e6:	0799      	lsls	r1, r3, #30
 80158e8:	bf58      	it	pl
 80158ea:	6962      	ldrpl	r2, [r4, #20]
 80158ec:	60a2      	str	r2, [r4, #8]
 80158ee:	e7f4      	b.n	80158da <__swsetup_r+0x8e>
 80158f0:	2000      	movs	r0, #0
 80158f2:	e7f7      	b.n	80158e4 <__swsetup_r+0x98>
 80158f4:	20000074 	.word	0x20000074

080158f8 <memset>:
 80158f8:	4402      	add	r2, r0
 80158fa:	4603      	mov	r3, r0
 80158fc:	4293      	cmp	r3, r2
 80158fe:	d100      	bne.n	8015902 <memset+0xa>
 8015900:	4770      	bx	lr
 8015902:	f803 1b01 	strb.w	r1, [r3], #1
 8015906:	e7f9      	b.n	80158fc <memset+0x4>

08015908 <strncpy>:
 8015908:	b510      	push	{r4, lr}
 801590a:	3901      	subs	r1, #1
 801590c:	4603      	mov	r3, r0
 801590e:	b132      	cbz	r2, 801591e <strncpy+0x16>
 8015910:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015914:	f803 4b01 	strb.w	r4, [r3], #1
 8015918:	3a01      	subs	r2, #1
 801591a:	2c00      	cmp	r4, #0
 801591c:	d1f7      	bne.n	801590e <strncpy+0x6>
 801591e:	441a      	add	r2, r3
 8015920:	2100      	movs	r1, #0
 8015922:	4293      	cmp	r3, r2
 8015924:	d100      	bne.n	8015928 <strncpy+0x20>
 8015926:	bd10      	pop	{r4, pc}
 8015928:	f803 1b01 	strb.w	r1, [r3], #1
 801592c:	e7f9      	b.n	8015922 <strncpy+0x1a>
	...

08015930 <_localeconv_r>:
 8015930:	4800      	ldr	r0, [pc, #0]	@ (8015934 <_localeconv_r+0x4>)
 8015932:	4770      	bx	lr
 8015934:	200001b4 	.word	0x200001b4

08015938 <_close_r>:
 8015938:	b538      	push	{r3, r4, r5, lr}
 801593a:	4d06      	ldr	r5, [pc, #24]	@ (8015954 <_close_r+0x1c>)
 801593c:	2300      	movs	r3, #0
 801593e:	4604      	mov	r4, r0
 8015940:	4608      	mov	r0, r1
 8015942:	602b      	str	r3, [r5, #0]
 8015944:	f7eb fe3e 	bl	80015c4 <_close>
 8015948:	1c43      	adds	r3, r0, #1
 801594a:	d102      	bne.n	8015952 <_close_r+0x1a>
 801594c:	682b      	ldr	r3, [r5, #0]
 801594e:	b103      	cbz	r3, 8015952 <_close_r+0x1a>
 8015950:	6023      	str	r3, [r4, #0]
 8015952:	bd38      	pop	{r3, r4, r5, pc}
 8015954:	20002ac8 	.word	0x20002ac8

08015958 <_lseek_r>:
 8015958:	b538      	push	{r3, r4, r5, lr}
 801595a:	4d07      	ldr	r5, [pc, #28]	@ (8015978 <_lseek_r+0x20>)
 801595c:	4604      	mov	r4, r0
 801595e:	4608      	mov	r0, r1
 8015960:	4611      	mov	r1, r2
 8015962:	2200      	movs	r2, #0
 8015964:	602a      	str	r2, [r5, #0]
 8015966:	461a      	mov	r2, r3
 8015968:	f7eb fe53 	bl	8001612 <_lseek>
 801596c:	1c43      	adds	r3, r0, #1
 801596e:	d102      	bne.n	8015976 <_lseek_r+0x1e>
 8015970:	682b      	ldr	r3, [r5, #0]
 8015972:	b103      	cbz	r3, 8015976 <_lseek_r+0x1e>
 8015974:	6023      	str	r3, [r4, #0]
 8015976:	bd38      	pop	{r3, r4, r5, pc}
 8015978:	20002ac8 	.word	0x20002ac8

0801597c <_read_r>:
 801597c:	b538      	push	{r3, r4, r5, lr}
 801597e:	4d07      	ldr	r5, [pc, #28]	@ (801599c <_read_r+0x20>)
 8015980:	4604      	mov	r4, r0
 8015982:	4608      	mov	r0, r1
 8015984:	4611      	mov	r1, r2
 8015986:	2200      	movs	r2, #0
 8015988:	602a      	str	r2, [r5, #0]
 801598a:	461a      	mov	r2, r3
 801598c:	f7eb fde1 	bl	8001552 <_read>
 8015990:	1c43      	adds	r3, r0, #1
 8015992:	d102      	bne.n	801599a <_read_r+0x1e>
 8015994:	682b      	ldr	r3, [r5, #0]
 8015996:	b103      	cbz	r3, 801599a <_read_r+0x1e>
 8015998:	6023      	str	r3, [r4, #0]
 801599a:	bd38      	pop	{r3, r4, r5, pc}
 801599c:	20002ac8 	.word	0x20002ac8

080159a0 <_write_r>:
 80159a0:	b538      	push	{r3, r4, r5, lr}
 80159a2:	4d07      	ldr	r5, [pc, #28]	@ (80159c0 <_write_r+0x20>)
 80159a4:	4604      	mov	r4, r0
 80159a6:	4608      	mov	r0, r1
 80159a8:	4611      	mov	r1, r2
 80159aa:	2200      	movs	r2, #0
 80159ac:	602a      	str	r2, [r5, #0]
 80159ae:	461a      	mov	r2, r3
 80159b0:	f7eb fdec 	bl	800158c <_write>
 80159b4:	1c43      	adds	r3, r0, #1
 80159b6:	d102      	bne.n	80159be <_write_r+0x1e>
 80159b8:	682b      	ldr	r3, [r5, #0]
 80159ba:	b103      	cbz	r3, 80159be <_write_r+0x1e>
 80159bc:	6023      	str	r3, [r4, #0]
 80159be:	bd38      	pop	{r3, r4, r5, pc}
 80159c0:	20002ac8 	.word	0x20002ac8

080159c4 <__errno>:
 80159c4:	4b01      	ldr	r3, [pc, #4]	@ (80159cc <__errno+0x8>)
 80159c6:	6818      	ldr	r0, [r3, #0]
 80159c8:	4770      	bx	lr
 80159ca:	bf00      	nop
 80159cc:	20000074 	.word	0x20000074

080159d0 <__libc_init_array>:
 80159d0:	b570      	push	{r4, r5, r6, lr}
 80159d2:	4d0d      	ldr	r5, [pc, #52]	@ (8015a08 <__libc_init_array+0x38>)
 80159d4:	4c0d      	ldr	r4, [pc, #52]	@ (8015a0c <__libc_init_array+0x3c>)
 80159d6:	1b64      	subs	r4, r4, r5
 80159d8:	10a4      	asrs	r4, r4, #2
 80159da:	2600      	movs	r6, #0
 80159dc:	42a6      	cmp	r6, r4
 80159de:	d109      	bne.n	80159f4 <__libc_init_array+0x24>
 80159e0:	4d0b      	ldr	r5, [pc, #44]	@ (8015a10 <__libc_init_array+0x40>)
 80159e2:	4c0c      	ldr	r4, [pc, #48]	@ (8015a14 <__libc_init_array+0x44>)
 80159e4:	f001 fe30 	bl	8017648 <_init>
 80159e8:	1b64      	subs	r4, r4, r5
 80159ea:	10a4      	asrs	r4, r4, #2
 80159ec:	2600      	movs	r6, #0
 80159ee:	42a6      	cmp	r6, r4
 80159f0:	d105      	bne.n	80159fe <__libc_init_array+0x2e>
 80159f2:	bd70      	pop	{r4, r5, r6, pc}
 80159f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80159f8:	4798      	blx	r3
 80159fa:	3601      	adds	r6, #1
 80159fc:	e7ee      	b.n	80159dc <__libc_init_array+0xc>
 80159fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a02:	4798      	blx	r3
 8015a04:	3601      	adds	r6, #1
 8015a06:	e7f2      	b.n	80159ee <__libc_init_array+0x1e>
 8015a08:	08017a6c 	.word	0x08017a6c
 8015a0c:	08017a6c 	.word	0x08017a6c
 8015a10:	08017a6c 	.word	0x08017a6c
 8015a14:	08017a70 	.word	0x08017a70

08015a18 <__retarget_lock_init_recursive>:
 8015a18:	4770      	bx	lr

08015a1a <__retarget_lock_acquire_recursive>:
 8015a1a:	4770      	bx	lr

08015a1c <__retarget_lock_release_recursive>:
 8015a1c:	4770      	bx	lr

08015a1e <memcpy>:
 8015a1e:	440a      	add	r2, r1
 8015a20:	4291      	cmp	r1, r2
 8015a22:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a26:	d100      	bne.n	8015a2a <memcpy+0xc>
 8015a28:	4770      	bx	lr
 8015a2a:	b510      	push	{r4, lr}
 8015a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a34:	4291      	cmp	r1, r2
 8015a36:	d1f9      	bne.n	8015a2c <memcpy+0xe>
 8015a38:	bd10      	pop	{r4, pc}

08015a3a <quorem>:
 8015a3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a3e:	6903      	ldr	r3, [r0, #16]
 8015a40:	690c      	ldr	r4, [r1, #16]
 8015a42:	42a3      	cmp	r3, r4
 8015a44:	4607      	mov	r7, r0
 8015a46:	db7e      	blt.n	8015b46 <quorem+0x10c>
 8015a48:	3c01      	subs	r4, #1
 8015a4a:	f101 0814 	add.w	r8, r1, #20
 8015a4e:	00a3      	lsls	r3, r4, #2
 8015a50:	f100 0514 	add.w	r5, r0, #20
 8015a54:	9300      	str	r3, [sp, #0]
 8015a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a5a:	9301      	str	r3, [sp, #4]
 8015a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a64:	3301      	adds	r3, #1
 8015a66:	429a      	cmp	r2, r3
 8015a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015a70:	d32e      	bcc.n	8015ad0 <quorem+0x96>
 8015a72:	f04f 0a00 	mov.w	sl, #0
 8015a76:	46c4      	mov	ip, r8
 8015a78:	46ae      	mov	lr, r5
 8015a7a:	46d3      	mov	fp, sl
 8015a7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015a80:	b298      	uxth	r0, r3
 8015a82:	fb06 a000 	mla	r0, r6, r0, sl
 8015a86:	0c02      	lsrs	r2, r0, #16
 8015a88:	0c1b      	lsrs	r3, r3, #16
 8015a8a:	fb06 2303 	mla	r3, r6, r3, r2
 8015a8e:	f8de 2000 	ldr.w	r2, [lr]
 8015a92:	b280      	uxth	r0, r0
 8015a94:	b292      	uxth	r2, r2
 8015a96:	1a12      	subs	r2, r2, r0
 8015a98:	445a      	add	r2, fp
 8015a9a:	f8de 0000 	ldr.w	r0, [lr]
 8015a9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015aa8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015aac:	b292      	uxth	r2, r2
 8015aae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015ab2:	45e1      	cmp	r9, ip
 8015ab4:	f84e 2b04 	str.w	r2, [lr], #4
 8015ab8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015abc:	d2de      	bcs.n	8015a7c <quorem+0x42>
 8015abe:	9b00      	ldr	r3, [sp, #0]
 8015ac0:	58eb      	ldr	r3, [r5, r3]
 8015ac2:	b92b      	cbnz	r3, 8015ad0 <quorem+0x96>
 8015ac4:	9b01      	ldr	r3, [sp, #4]
 8015ac6:	3b04      	subs	r3, #4
 8015ac8:	429d      	cmp	r5, r3
 8015aca:	461a      	mov	r2, r3
 8015acc:	d32f      	bcc.n	8015b2e <quorem+0xf4>
 8015ace:	613c      	str	r4, [r7, #16]
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	f001 f97f 	bl	8016dd4 <__mcmp>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	db25      	blt.n	8015b26 <quorem+0xec>
 8015ada:	4629      	mov	r1, r5
 8015adc:	2000      	movs	r0, #0
 8015ade:	f858 2b04 	ldr.w	r2, [r8], #4
 8015ae2:	f8d1 c000 	ldr.w	ip, [r1]
 8015ae6:	fa1f fe82 	uxth.w	lr, r2
 8015aea:	fa1f f38c 	uxth.w	r3, ip
 8015aee:	eba3 030e 	sub.w	r3, r3, lr
 8015af2:	4403      	add	r3, r0
 8015af4:	0c12      	lsrs	r2, r2, #16
 8015af6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015afa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b04:	45c1      	cmp	r9, r8
 8015b06:	f841 3b04 	str.w	r3, [r1], #4
 8015b0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015b0e:	d2e6      	bcs.n	8015ade <quorem+0xa4>
 8015b10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b18:	b922      	cbnz	r2, 8015b24 <quorem+0xea>
 8015b1a:	3b04      	subs	r3, #4
 8015b1c:	429d      	cmp	r5, r3
 8015b1e:	461a      	mov	r2, r3
 8015b20:	d30b      	bcc.n	8015b3a <quorem+0x100>
 8015b22:	613c      	str	r4, [r7, #16]
 8015b24:	3601      	adds	r6, #1
 8015b26:	4630      	mov	r0, r6
 8015b28:	b003      	add	sp, #12
 8015b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2e:	6812      	ldr	r2, [r2, #0]
 8015b30:	3b04      	subs	r3, #4
 8015b32:	2a00      	cmp	r2, #0
 8015b34:	d1cb      	bne.n	8015ace <quorem+0x94>
 8015b36:	3c01      	subs	r4, #1
 8015b38:	e7c6      	b.n	8015ac8 <quorem+0x8e>
 8015b3a:	6812      	ldr	r2, [r2, #0]
 8015b3c:	3b04      	subs	r3, #4
 8015b3e:	2a00      	cmp	r2, #0
 8015b40:	d1ef      	bne.n	8015b22 <quorem+0xe8>
 8015b42:	3c01      	subs	r4, #1
 8015b44:	e7ea      	b.n	8015b1c <quorem+0xe2>
 8015b46:	2000      	movs	r0, #0
 8015b48:	e7ee      	b.n	8015b28 <quorem+0xee>
 8015b4a:	0000      	movs	r0, r0
 8015b4c:	0000      	movs	r0, r0
	...

08015b50 <_dtoa_r>:
 8015b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	69c7      	ldr	r7, [r0, #28]
 8015b56:	b097      	sub	sp, #92	@ 0x5c
 8015b58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015b5c:	ec55 4b10 	vmov	r4, r5, d0
 8015b60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8015b62:	9107      	str	r1, [sp, #28]
 8015b64:	4681      	mov	r9, r0
 8015b66:	920c      	str	r2, [sp, #48]	@ 0x30
 8015b68:	9311      	str	r3, [sp, #68]	@ 0x44
 8015b6a:	b97f      	cbnz	r7, 8015b8c <_dtoa_r+0x3c>
 8015b6c:	2010      	movs	r0, #16
 8015b6e:	f000 fe09 	bl	8016784 <malloc>
 8015b72:	4602      	mov	r2, r0
 8015b74:	f8c9 001c 	str.w	r0, [r9, #28]
 8015b78:	b920      	cbnz	r0, 8015b84 <_dtoa_r+0x34>
 8015b7a:	4ba9      	ldr	r3, [pc, #676]	@ (8015e20 <_dtoa_r+0x2d0>)
 8015b7c:	21ef      	movs	r1, #239	@ 0xef
 8015b7e:	48a9      	ldr	r0, [pc, #676]	@ (8015e24 <_dtoa_r+0x2d4>)
 8015b80:	f001 fcb2 	bl	80174e8 <__assert_func>
 8015b84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015b88:	6007      	str	r7, [r0, #0]
 8015b8a:	60c7      	str	r7, [r0, #12]
 8015b8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015b90:	6819      	ldr	r1, [r3, #0]
 8015b92:	b159      	cbz	r1, 8015bac <_dtoa_r+0x5c>
 8015b94:	685a      	ldr	r2, [r3, #4]
 8015b96:	604a      	str	r2, [r1, #4]
 8015b98:	2301      	movs	r3, #1
 8015b9a:	4093      	lsls	r3, r2
 8015b9c:	608b      	str	r3, [r1, #8]
 8015b9e:	4648      	mov	r0, r9
 8015ba0:	f000 fee6 	bl	8016970 <_Bfree>
 8015ba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	601a      	str	r2, [r3, #0]
 8015bac:	1e2b      	subs	r3, r5, #0
 8015bae:	bfb9      	ittee	lt
 8015bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015bb4:	9305      	strlt	r3, [sp, #20]
 8015bb6:	2300      	movge	r3, #0
 8015bb8:	6033      	strge	r3, [r6, #0]
 8015bba:	9f05      	ldr	r7, [sp, #20]
 8015bbc:	4b9a      	ldr	r3, [pc, #616]	@ (8015e28 <_dtoa_r+0x2d8>)
 8015bbe:	bfbc      	itt	lt
 8015bc0:	2201      	movlt	r2, #1
 8015bc2:	6032      	strlt	r2, [r6, #0]
 8015bc4:	43bb      	bics	r3, r7
 8015bc6:	d112      	bne.n	8015bee <_dtoa_r+0x9e>
 8015bc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015bca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015bce:	6013      	str	r3, [r2, #0]
 8015bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015bd4:	4323      	orrs	r3, r4
 8015bd6:	f000 855a 	beq.w	801668e <_dtoa_r+0xb3e>
 8015bda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015bdc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015e3c <_dtoa_r+0x2ec>
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f000 855c 	beq.w	801669e <_dtoa_r+0xb4e>
 8015be6:	f10a 0303 	add.w	r3, sl, #3
 8015bea:	f000 bd56 	b.w	801669a <_dtoa_r+0xb4a>
 8015bee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	ec51 0b17 	vmov	r0, r1, d7
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8015bfe:	f7ea ff83 	bl	8000b08 <__aeabi_dcmpeq>
 8015c02:	4680      	mov	r8, r0
 8015c04:	b158      	cbz	r0, 8015c1e <_dtoa_r+0xce>
 8015c06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015c08:	2301      	movs	r3, #1
 8015c0a:	6013      	str	r3, [r2, #0]
 8015c0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015c0e:	b113      	cbz	r3, 8015c16 <_dtoa_r+0xc6>
 8015c10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015c12:	4b86      	ldr	r3, [pc, #536]	@ (8015e2c <_dtoa_r+0x2dc>)
 8015c14:	6013      	str	r3, [r2, #0]
 8015c16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015e40 <_dtoa_r+0x2f0>
 8015c1a:	f000 bd40 	b.w	801669e <_dtoa_r+0xb4e>
 8015c1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8015c22:	aa14      	add	r2, sp, #80	@ 0x50
 8015c24:	a915      	add	r1, sp, #84	@ 0x54
 8015c26:	4648      	mov	r0, r9
 8015c28:	f001 f984 	bl	8016f34 <__d2b>
 8015c2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015c30:	9002      	str	r0, [sp, #8]
 8015c32:	2e00      	cmp	r6, #0
 8015c34:	d078      	beq.n	8015d28 <_dtoa_r+0x1d8>
 8015c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015c44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015c48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015c4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015c50:	4619      	mov	r1, r3
 8015c52:	2200      	movs	r2, #0
 8015c54:	4b76      	ldr	r3, [pc, #472]	@ (8015e30 <_dtoa_r+0x2e0>)
 8015c56:	f7ea fb37 	bl	80002c8 <__aeabi_dsub>
 8015c5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8015e08 <_dtoa_r+0x2b8>)
 8015c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c60:	f7ea fcea 	bl	8000638 <__aeabi_dmul>
 8015c64:	a36a      	add	r3, pc, #424	@ (adr r3, 8015e10 <_dtoa_r+0x2c0>)
 8015c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6a:	f7ea fb2f 	bl	80002cc <__adddf3>
 8015c6e:	4604      	mov	r4, r0
 8015c70:	4630      	mov	r0, r6
 8015c72:	460d      	mov	r5, r1
 8015c74:	f7ea fc76 	bl	8000564 <__aeabi_i2d>
 8015c78:	a367      	add	r3, pc, #412	@ (adr r3, 8015e18 <_dtoa_r+0x2c8>)
 8015c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7e:	f7ea fcdb 	bl	8000638 <__aeabi_dmul>
 8015c82:	4602      	mov	r2, r0
 8015c84:	460b      	mov	r3, r1
 8015c86:	4620      	mov	r0, r4
 8015c88:	4629      	mov	r1, r5
 8015c8a:	f7ea fb1f 	bl	80002cc <__adddf3>
 8015c8e:	4604      	mov	r4, r0
 8015c90:	460d      	mov	r5, r1
 8015c92:	f7ea ff81 	bl	8000b98 <__aeabi_d2iz>
 8015c96:	2200      	movs	r2, #0
 8015c98:	4607      	mov	r7, r0
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	4629      	mov	r1, r5
 8015ca0:	f7ea ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8015ca4:	b140      	cbz	r0, 8015cb8 <_dtoa_r+0x168>
 8015ca6:	4638      	mov	r0, r7
 8015ca8:	f7ea fc5c 	bl	8000564 <__aeabi_i2d>
 8015cac:	4622      	mov	r2, r4
 8015cae:	462b      	mov	r3, r5
 8015cb0:	f7ea ff2a 	bl	8000b08 <__aeabi_dcmpeq>
 8015cb4:	b900      	cbnz	r0, 8015cb8 <_dtoa_r+0x168>
 8015cb6:	3f01      	subs	r7, #1
 8015cb8:	2f16      	cmp	r7, #22
 8015cba:	d852      	bhi.n	8015d62 <_dtoa_r+0x212>
 8015cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8015e34 <_dtoa_r+0x2e4>)
 8015cbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015cca:	f7ea ff27 	bl	8000b1c <__aeabi_dcmplt>
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	d049      	beq.n	8015d66 <_dtoa_r+0x216>
 8015cd2:	3f01      	subs	r7, #1
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8015cd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015cda:	1b9b      	subs	r3, r3, r6
 8015cdc:	1e5a      	subs	r2, r3, #1
 8015cde:	bf45      	ittet	mi
 8015ce0:	f1c3 0301 	rsbmi	r3, r3, #1
 8015ce4:	9300      	strmi	r3, [sp, #0]
 8015ce6:	2300      	movpl	r3, #0
 8015ce8:	2300      	movmi	r3, #0
 8015cea:	9206      	str	r2, [sp, #24]
 8015cec:	bf54      	ite	pl
 8015cee:	9300      	strpl	r3, [sp, #0]
 8015cf0:	9306      	strmi	r3, [sp, #24]
 8015cf2:	2f00      	cmp	r7, #0
 8015cf4:	db39      	blt.n	8015d6a <_dtoa_r+0x21a>
 8015cf6:	9b06      	ldr	r3, [sp, #24]
 8015cf8:	970d      	str	r7, [sp, #52]	@ 0x34
 8015cfa:	443b      	add	r3, r7
 8015cfc:	9306      	str	r3, [sp, #24]
 8015cfe:	2300      	movs	r3, #0
 8015d00:	9308      	str	r3, [sp, #32]
 8015d02:	9b07      	ldr	r3, [sp, #28]
 8015d04:	2b09      	cmp	r3, #9
 8015d06:	d863      	bhi.n	8015dd0 <_dtoa_r+0x280>
 8015d08:	2b05      	cmp	r3, #5
 8015d0a:	bfc4      	itt	gt
 8015d0c:	3b04      	subgt	r3, #4
 8015d0e:	9307      	strgt	r3, [sp, #28]
 8015d10:	9b07      	ldr	r3, [sp, #28]
 8015d12:	f1a3 0302 	sub.w	r3, r3, #2
 8015d16:	bfcc      	ite	gt
 8015d18:	2400      	movgt	r4, #0
 8015d1a:	2401      	movle	r4, #1
 8015d1c:	2b03      	cmp	r3, #3
 8015d1e:	d863      	bhi.n	8015de8 <_dtoa_r+0x298>
 8015d20:	e8df f003 	tbb	[pc, r3]
 8015d24:	2b375452 	.word	0x2b375452
 8015d28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015d2c:	441e      	add	r6, r3
 8015d2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015d32:	2b20      	cmp	r3, #32
 8015d34:	bfc1      	itttt	gt
 8015d36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015d3a:	409f      	lslgt	r7, r3
 8015d3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015d40:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015d44:	bfd6      	itet	le
 8015d46:	f1c3 0320 	rsble	r3, r3, #32
 8015d4a:	ea47 0003 	orrgt.w	r0, r7, r3
 8015d4e:	fa04 f003 	lslle.w	r0, r4, r3
 8015d52:	f7ea fbf7 	bl	8000544 <__aeabi_ui2d>
 8015d56:	2201      	movs	r2, #1
 8015d58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015d5c:	3e01      	subs	r6, #1
 8015d5e:	9212      	str	r2, [sp, #72]	@ 0x48
 8015d60:	e776      	b.n	8015c50 <_dtoa_r+0x100>
 8015d62:	2301      	movs	r3, #1
 8015d64:	e7b7      	b.n	8015cd6 <_dtoa_r+0x186>
 8015d66:	9010      	str	r0, [sp, #64]	@ 0x40
 8015d68:	e7b6      	b.n	8015cd8 <_dtoa_r+0x188>
 8015d6a:	9b00      	ldr	r3, [sp, #0]
 8015d6c:	1bdb      	subs	r3, r3, r7
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	427b      	negs	r3, r7
 8015d72:	9308      	str	r3, [sp, #32]
 8015d74:	2300      	movs	r3, #0
 8015d76:	930d      	str	r3, [sp, #52]	@ 0x34
 8015d78:	e7c3      	b.n	8015d02 <_dtoa_r+0x1b2>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d80:	eb07 0b03 	add.w	fp, r7, r3
 8015d84:	f10b 0301 	add.w	r3, fp, #1
 8015d88:	2b01      	cmp	r3, #1
 8015d8a:	9303      	str	r3, [sp, #12]
 8015d8c:	bfb8      	it	lt
 8015d8e:	2301      	movlt	r3, #1
 8015d90:	e006      	b.n	8015da0 <_dtoa_r+0x250>
 8015d92:	2301      	movs	r3, #1
 8015d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dd28      	ble.n	8015dee <_dtoa_r+0x29e>
 8015d9c:	469b      	mov	fp, r3
 8015d9e:	9303      	str	r3, [sp, #12]
 8015da0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8015da4:	2100      	movs	r1, #0
 8015da6:	2204      	movs	r2, #4
 8015da8:	f102 0514 	add.w	r5, r2, #20
 8015dac:	429d      	cmp	r5, r3
 8015dae:	d926      	bls.n	8015dfe <_dtoa_r+0x2ae>
 8015db0:	6041      	str	r1, [r0, #4]
 8015db2:	4648      	mov	r0, r9
 8015db4:	f000 fd9c 	bl	80168f0 <_Balloc>
 8015db8:	4682      	mov	sl, r0
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d142      	bne.n	8015e44 <_dtoa_r+0x2f4>
 8015dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8015e38 <_dtoa_r+0x2e8>)
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8015dc6:	e6da      	b.n	8015b7e <_dtoa_r+0x2e>
 8015dc8:	2300      	movs	r3, #0
 8015dca:	e7e3      	b.n	8015d94 <_dtoa_r+0x244>
 8015dcc:	2300      	movs	r3, #0
 8015dce:	e7d5      	b.n	8015d7c <_dtoa_r+0x22c>
 8015dd0:	2401      	movs	r4, #1
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	9307      	str	r3, [sp, #28]
 8015dd6:	9409      	str	r4, [sp, #36]	@ 0x24
 8015dd8:	f04f 3bff 	mov.w	fp, #4294967295
 8015ddc:	2200      	movs	r2, #0
 8015dde:	f8cd b00c 	str.w	fp, [sp, #12]
 8015de2:	2312      	movs	r3, #18
 8015de4:	920c      	str	r2, [sp, #48]	@ 0x30
 8015de6:	e7db      	b.n	8015da0 <_dtoa_r+0x250>
 8015de8:	2301      	movs	r3, #1
 8015dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8015dec:	e7f4      	b.n	8015dd8 <_dtoa_r+0x288>
 8015dee:	f04f 0b01 	mov.w	fp, #1
 8015df2:	f8cd b00c 	str.w	fp, [sp, #12]
 8015df6:	465b      	mov	r3, fp
 8015df8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015dfc:	e7d0      	b.n	8015da0 <_dtoa_r+0x250>
 8015dfe:	3101      	adds	r1, #1
 8015e00:	0052      	lsls	r2, r2, #1
 8015e02:	e7d1      	b.n	8015da8 <_dtoa_r+0x258>
 8015e04:	f3af 8000 	nop.w
 8015e08:	636f4361 	.word	0x636f4361
 8015e0c:	3fd287a7 	.word	0x3fd287a7
 8015e10:	8b60c8b3 	.word	0x8b60c8b3
 8015e14:	3fc68a28 	.word	0x3fc68a28
 8015e18:	509f79fb 	.word	0x509f79fb
 8015e1c:	3fd34413 	.word	0x3fd34413
 8015e20:	08017731 	.word	0x08017731
 8015e24:	08017748 	.word	0x08017748
 8015e28:	7ff00000 	.word	0x7ff00000
 8015e2c:	08017701 	.word	0x08017701
 8015e30:	3ff80000 	.word	0x3ff80000
 8015e34:	08017898 	.word	0x08017898
 8015e38:	080177a0 	.word	0x080177a0
 8015e3c:	0801772d 	.word	0x0801772d
 8015e40:	08017700 	.word	0x08017700
 8015e44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015e48:	6018      	str	r0, [r3, #0]
 8015e4a:	9b03      	ldr	r3, [sp, #12]
 8015e4c:	2b0e      	cmp	r3, #14
 8015e4e:	f200 80a1 	bhi.w	8015f94 <_dtoa_r+0x444>
 8015e52:	2c00      	cmp	r4, #0
 8015e54:	f000 809e 	beq.w	8015f94 <_dtoa_r+0x444>
 8015e58:	2f00      	cmp	r7, #0
 8015e5a:	dd33      	ble.n	8015ec4 <_dtoa_r+0x374>
 8015e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80160d0 <_dtoa_r+0x580>)
 8015e5e:	f007 020f 	and.w	r2, r7, #15
 8015e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015e66:	ed93 7b00 	vldr	d7, [r3]
 8015e6a:	05f8      	lsls	r0, r7, #23
 8015e6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015e70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015e74:	d516      	bpl.n	8015ea4 <_dtoa_r+0x354>
 8015e76:	4b97      	ldr	r3, [pc, #604]	@ (80160d4 <_dtoa_r+0x584>)
 8015e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015e7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015e80:	f7ea fd04 	bl	800088c <__aeabi_ddiv>
 8015e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e88:	f004 040f 	and.w	r4, r4, #15
 8015e8c:	2603      	movs	r6, #3
 8015e8e:	4d91      	ldr	r5, [pc, #580]	@ (80160d4 <_dtoa_r+0x584>)
 8015e90:	b954      	cbnz	r4, 8015ea8 <_dtoa_r+0x358>
 8015e92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015e96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e9a:	f7ea fcf7 	bl	800088c <__aeabi_ddiv>
 8015e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ea2:	e028      	b.n	8015ef6 <_dtoa_r+0x3a6>
 8015ea4:	2602      	movs	r6, #2
 8015ea6:	e7f2      	b.n	8015e8e <_dtoa_r+0x33e>
 8015ea8:	07e1      	lsls	r1, r4, #31
 8015eaa:	d508      	bpl.n	8015ebe <_dtoa_r+0x36e>
 8015eac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015eb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015eb4:	f7ea fbc0 	bl	8000638 <__aeabi_dmul>
 8015eb8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015ebc:	3601      	adds	r6, #1
 8015ebe:	1064      	asrs	r4, r4, #1
 8015ec0:	3508      	adds	r5, #8
 8015ec2:	e7e5      	b.n	8015e90 <_dtoa_r+0x340>
 8015ec4:	f000 80af 	beq.w	8016026 <_dtoa_r+0x4d6>
 8015ec8:	427c      	negs	r4, r7
 8015eca:	4b81      	ldr	r3, [pc, #516]	@ (80160d0 <_dtoa_r+0x580>)
 8015ecc:	4d81      	ldr	r5, [pc, #516]	@ (80160d4 <_dtoa_r+0x584>)
 8015ece:	f004 020f 	and.w	r2, r4, #15
 8015ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015ede:	f7ea fbab 	bl	8000638 <__aeabi_dmul>
 8015ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ee6:	1124      	asrs	r4, r4, #4
 8015ee8:	2300      	movs	r3, #0
 8015eea:	2602      	movs	r6, #2
 8015eec:	2c00      	cmp	r4, #0
 8015eee:	f040 808f 	bne.w	8016010 <_dtoa_r+0x4c0>
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d1d3      	bne.n	8015e9e <_dtoa_r+0x34e>
 8015ef6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ef8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	f000 8094 	beq.w	801602a <_dtoa_r+0x4da>
 8015f02:	4b75      	ldr	r3, [pc, #468]	@ (80160d8 <_dtoa_r+0x588>)
 8015f04:	2200      	movs	r2, #0
 8015f06:	4620      	mov	r0, r4
 8015f08:	4629      	mov	r1, r5
 8015f0a:	f7ea fe07 	bl	8000b1c <__aeabi_dcmplt>
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	f000 808b 	beq.w	801602a <_dtoa_r+0x4da>
 8015f14:	9b03      	ldr	r3, [sp, #12]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	f000 8087 	beq.w	801602a <_dtoa_r+0x4da>
 8015f1c:	f1bb 0f00 	cmp.w	fp, #0
 8015f20:	dd34      	ble.n	8015f8c <_dtoa_r+0x43c>
 8015f22:	4620      	mov	r0, r4
 8015f24:	4b6d      	ldr	r3, [pc, #436]	@ (80160dc <_dtoa_r+0x58c>)
 8015f26:	2200      	movs	r2, #0
 8015f28:	4629      	mov	r1, r5
 8015f2a:	f7ea fb85 	bl	8000638 <__aeabi_dmul>
 8015f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f32:	f107 38ff 	add.w	r8, r7, #4294967295
 8015f36:	3601      	adds	r6, #1
 8015f38:	465c      	mov	r4, fp
 8015f3a:	4630      	mov	r0, r6
 8015f3c:	f7ea fb12 	bl	8000564 <__aeabi_i2d>
 8015f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f44:	f7ea fb78 	bl	8000638 <__aeabi_dmul>
 8015f48:	4b65      	ldr	r3, [pc, #404]	@ (80160e0 <_dtoa_r+0x590>)
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	f7ea f9be 	bl	80002cc <__adddf3>
 8015f50:	4605      	mov	r5, r0
 8015f52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015f56:	2c00      	cmp	r4, #0
 8015f58:	d16a      	bne.n	8016030 <_dtoa_r+0x4e0>
 8015f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f5e:	4b61      	ldr	r3, [pc, #388]	@ (80160e4 <_dtoa_r+0x594>)
 8015f60:	2200      	movs	r2, #0
 8015f62:	f7ea f9b1 	bl	80002c8 <__aeabi_dsub>
 8015f66:	4602      	mov	r2, r0
 8015f68:	460b      	mov	r3, r1
 8015f6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015f6e:	462a      	mov	r2, r5
 8015f70:	4633      	mov	r3, r6
 8015f72:	f7ea fdf1 	bl	8000b58 <__aeabi_dcmpgt>
 8015f76:	2800      	cmp	r0, #0
 8015f78:	f040 8298 	bne.w	80164ac <_dtoa_r+0x95c>
 8015f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015f80:	462a      	mov	r2, r5
 8015f82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015f86:	f7ea fdc9 	bl	8000b1c <__aeabi_dcmplt>
 8015f8a:	bb38      	cbnz	r0, 8015fdc <_dtoa_r+0x48c>
 8015f8c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015f90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015f94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	f2c0 8157 	blt.w	801624a <_dtoa_r+0x6fa>
 8015f9c:	2f0e      	cmp	r7, #14
 8015f9e:	f300 8154 	bgt.w	801624a <_dtoa_r+0x6fa>
 8015fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80160d0 <_dtoa_r+0x580>)
 8015fa4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015fa8:	ed93 7b00 	vldr	d7, [r3]
 8015fac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	ed8d 7b00 	vstr	d7, [sp]
 8015fb4:	f280 80e5 	bge.w	8016182 <_dtoa_r+0x632>
 8015fb8:	9b03      	ldr	r3, [sp, #12]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	f300 80e1 	bgt.w	8016182 <_dtoa_r+0x632>
 8015fc0:	d10c      	bne.n	8015fdc <_dtoa_r+0x48c>
 8015fc2:	4b48      	ldr	r3, [pc, #288]	@ (80160e4 <_dtoa_r+0x594>)
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	ec51 0b17 	vmov	r0, r1, d7
 8015fca:	f7ea fb35 	bl	8000638 <__aeabi_dmul>
 8015fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fd2:	f7ea fdb7 	bl	8000b44 <__aeabi_dcmpge>
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	f000 8266 	beq.w	80164a8 <_dtoa_r+0x958>
 8015fdc:	2400      	movs	r4, #0
 8015fde:	4625      	mov	r5, r4
 8015fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fe2:	4656      	mov	r6, sl
 8015fe4:	ea6f 0803 	mvn.w	r8, r3
 8015fe8:	2700      	movs	r7, #0
 8015fea:	4621      	mov	r1, r4
 8015fec:	4648      	mov	r0, r9
 8015fee:	f000 fcbf 	bl	8016970 <_Bfree>
 8015ff2:	2d00      	cmp	r5, #0
 8015ff4:	f000 80bd 	beq.w	8016172 <_dtoa_r+0x622>
 8015ff8:	b12f      	cbz	r7, 8016006 <_dtoa_r+0x4b6>
 8015ffa:	42af      	cmp	r7, r5
 8015ffc:	d003      	beq.n	8016006 <_dtoa_r+0x4b6>
 8015ffe:	4639      	mov	r1, r7
 8016000:	4648      	mov	r0, r9
 8016002:	f000 fcb5 	bl	8016970 <_Bfree>
 8016006:	4629      	mov	r1, r5
 8016008:	4648      	mov	r0, r9
 801600a:	f000 fcb1 	bl	8016970 <_Bfree>
 801600e:	e0b0      	b.n	8016172 <_dtoa_r+0x622>
 8016010:	07e2      	lsls	r2, r4, #31
 8016012:	d505      	bpl.n	8016020 <_dtoa_r+0x4d0>
 8016014:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016018:	f7ea fb0e 	bl	8000638 <__aeabi_dmul>
 801601c:	3601      	adds	r6, #1
 801601e:	2301      	movs	r3, #1
 8016020:	1064      	asrs	r4, r4, #1
 8016022:	3508      	adds	r5, #8
 8016024:	e762      	b.n	8015eec <_dtoa_r+0x39c>
 8016026:	2602      	movs	r6, #2
 8016028:	e765      	b.n	8015ef6 <_dtoa_r+0x3a6>
 801602a:	9c03      	ldr	r4, [sp, #12]
 801602c:	46b8      	mov	r8, r7
 801602e:	e784      	b.n	8015f3a <_dtoa_r+0x3ea>
 8016030:	4b27      	ldr	r3, [pc, #156]	@ (80160d0 <_dtoa_r+0x580>)
 8016032:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016034:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016038:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801603c:	4454      	add	r4, sl
 801603e:	2900      	cmp	r1, #0
 8016040:	d054      	beq.n	80160ec <_dtoa_r+0x59c>
 8016042:	4929      	ldr	r1, [pc, #164]	@ (80160e8 <_dtoa_r+0x598>)
 8016044:	2000      	movs	r0, #0
 8016046:	f7ea fc21 	bl	800088c <__aeabi_ddiv>
 801604a:	4633      	mov	r3, r6
 801604c:	462a      	mov	r2, r5
 801604e:	f7ea f93b 	bl	80002c8 <__aeabi_dsub>
 8016052:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8016056:	4656      	mov	r6, sl
 8016058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801605c:	f7ea fd9c 	bl	8000b98 <__aeabi_d2iz>
 8016060:	4605      	mov	r5, r0
 8016062:	f7ea fa7f 	bl	8000564 <__aeabi_i2d>
 8016066:	4602      	mov	r2, r0
 8016068:	460b      	mov	r3, r1
 801606a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801606e:	f7ea f92b 	bl	80002c8 <__aeabi_dsub>
 8016072:	3530      	adds	r5, #48	@ 0x30
 8016074:	4602      	mov	r2, r0
 8016076:	460b      	mov	r3, r1
 8016078:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801607c:	f806 5b01 	strb.w	r5, [r6], #1
 8016080:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016084:	f7ea fd4a 	bl	8000b1c <__aeabi_dcmplt>
 8016088:	2800      	cmp	r0, #0
 801608a:	d172      	bne.n	8016172 <_dtoa_r+0x622>
 801608c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016090:	4911      	ldr	r1, [pc, #68]	@ (80160d8 <_dtoa_r+0x588>)
 8016092:	2000      	movs	r0, #0
 8016094:	f7ea f918 	bl	80002c8 <__aeabi_dsub>
 8016098:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801609c:	f7ea fd3e 	bl	8000b1c <__aeabi_dcmplt>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	f040 80b4 	bne.w	801620e <_dtoa_r+0x6be>
 80160a6:	42a6      	cmp	r6, r4
 80160a8:	f43f af70 	beq.w	8015f8c <_dtoa_r+0x43c>
 80160ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80160b0:	4b0a      	ldr	r3, [pc, #40]	@ (80160dc <_dtoa_r+0x58c>)
 80160b2:	2200      	movs	r2, #0
 80160b4:	f7ea fac0 	bl	8000638 <__aeabi_dmul>
 80160b8:	4b08      	ldr	r3, [pc, #32]	@ (80160dc <_dtoa_r+0x58c>)
 80160ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80160be:	2200      	movs	r2, #0
 80160c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80160c4:	f7ea fab8 	bl	8000638 <__aeabi_dmul>
 80160c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80160cc:	e7c4      	b.n	8016058 <_dtoa_r+0x508>
 80160ce:	bf00      	nop
 80160d0:	08017898 	.word	0x08017898
 80160d4:	08017870 	.word	0x08017870
 80160d8:	3ff00000 	.word	0x3ff00000
 80160dc:	40240000 	.word	0x40240000
 80160e0:	401c0000 	.word	0x401c0000
 80160e4:	40140000 	.word	0x40140000
 80160e8:	3fe00000 	.word	0x3fe00000
 80160ec:	4631      	mov	r1, r6
 80160ee:	4628      	mov	r0, r5
 80160f0:	f7ea faa2 	bl	8000638 <__aeabi_dmul>
 80160f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80160f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80160fa:	4656      	mov	r6, sl
 80160fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016100:	f7ea fd4a 	bl	8000b98 <__aeabi_d2iz>
 8016104:	4605      	mov	r5, r0
 8016106:	f7ea fa2d 	bl	8000564 <__aeabi_i2d>
 801610a:	4602      	mov	r2, r0
 801610c:	460b      	mov	r3, r1
 801610e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016112:	f7ea f8d9 	bl	80002c8 <__aeabi_dsub>
 8016116:	3530      	adds	r5, #48	@ 0x30
 8016118:	f806 5b01 	strb.w	r5, [r6], #1
 801611c:	4602      	mov	r2, r0
 801611e:	460b      	mov	r3, r1
 8016120:	42a6      	cmp	r6, r4
 8016122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016126:	f04f 0200 	mov.w	r2, #0
 801612a:	d124      	bne.n	8016176 <_dtoa_r+0x626>
 801612c:	4baf      	ldr	r3, [pc, #700]	@ (80163ec <_dtoa_r+0x89c>)
 801612e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016132:	f7ea f8cb 	bl	80002cc <__adddf3>
 8016136:	4602      	mov	r2, r0
 8016138:	460b      	mov	r3, r1
 801613a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801613e:	f7ea fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 8016142:	2800      	cmp	r0, #0
 8016144:	d163      	bne.n	801620e <_dtoa_r+0x6be>
 8016146:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801614a:	49a8      	ldr	r1, [pc, #672]	@ (80163ec <_dtoa_r+0x89c>)
 801614c:	2000      	movs	r0, #0
 801614e:	f7ea f8bb 	bl	80002c8 <__aeabi_dsub>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801615a:	f7ea fcdf 	bl	8000b1c <__aeabi_dcmplt>
 801615e:	2800      	cmp	r0, #0
 8016160:	f43f af14 	beq.w	8015f8c <_dtoa_r+0x43c>
 8016164:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8016166:	1e73      	subs	r3, r6, #1
 8016168:	9313      	str	r3, [sp, #76]	@ 0x4c
 801616a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801616e:	2b30      	cmp	r3, #48	@ 0x30
 8016170:	d0f8      	beq.n	8016164 <_dtoa_r+0x614>
 8016172:	4647      	mov	r7, r8
 8016174:	e03b      	b.n	80161ee <_dtoa_r+0x69e>
 8016176:	4b9e      	ldr	r3, [pc, #632]	@ (80163f0 <_dtoa_r+0x8a0>)
 8016178:	f7ea fa5e 	bl	8000638 <__aeabi_dmul>
 801617c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016180:	e7bc      	b.n	80160fc <_dtoa_r+0x5ac>
 8016182:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8016186:	4656      	mov	r6, sl
 8016188:	e9dd 2300 	ldrd	r2, r3, [sp]
 801618c:	4620      	mov	r0, r4
 801618e:	4629      	mov	r1, r5
 8016190:	f7ea fb7c 	bl	800088c <__aeabi_ddiv>
 8016194:	f7ea fd00 	bl	8000b98 <__aeabi_d2iz>
 8016198:	4680      	mov	r8, r0
 801619a:	f7ea f9e3 	bl	8000564 <__aeabi_i2d>
 801619e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161a2:	f7ea fa49 	bl	8000638 <__aeabi_dmul>
 80161a6:	4602      	mov	r2, r0
 80161a8:	460b      	mov	r3, r1
 80161aa:	4620      	mov	r0, r4
 80161ac:	4629      	mov	r1, r5
 80161ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80161b2:	f7ea f889 	bl	80002c8 <__aeabi_dsub>
 80161b6:	f806 4b01 	strb.w	r4, [r6], #1
 80161ba:	9d03      	ldr	r5, [sp, #12]
 80161bc:	eba6 040a 	sub.w	r4, r6, sl
 80161c0:	42a5      	cmp	r5, r4
 80161c2:	4602      	mov	r2, r0
 80161c4:	460b      	mov	r3, r1
 80161c6:	d133      	bne.n	8016230 <_dtoa_r+0x6e0>
 80161c8:	f7ea f880 	bl	80002cc <__adddf3>
 80161cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161d0:	4604      	mov	r4, r0
 80161d2:	460d      	mov	r5, r1
 80161d4:	f7ea fcc0 	bl	8000b58 <__aeabi_dcmpgt>
 80161d8:	b9c0      	cbnz	r0, 801620c <_dtoa_r+0x6bc>
 80161da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161de:	4620      	mov	r0, r4
 80161e0:	4629      	mov	r1, r5
 80161e2:	f7ea fc91 	bl	8000b08 <__aeabi_dcmpeq>
 80161e6:	b110      	cbz	r0, 80161ee <_dtoa_r+0x69e>
 80161e8:	f018 0f01 	tst.w	r8, #1
 80161ec:	d10e      	bne.n	801620c <_dtoa_r+0x6bc>
 80161ee:	9902      	ldr	r1, [sp, #8]
 80161f0:	4648      	mov	r0, r9
 80161f2:	f000 fbbd 	bl	8016970 <_Bfree>
 80161f6:	2300      	movs	r3, #0
 80161f8:	7033      	strb	r3, [r6, #0]
 80161fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80161fc:	3701      	adds	r7, #1
 80161fe:	601f      	str	r7, [r3, #0]
 8016200:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016202:	2b00      	cmp	r3, #0
 8016204:	f000 824b 	beq.w	801669e <_dtoa_r+0xb4e>
 8016208:	601e      	str	r6, [r3, #0]
 801620a:	e248      	b.n	801669e <_dtoa_r+0xb4e>
 801620c:	46b8      	mov	r8, r7
 801620e:	4633      	mov	r3, r6
 8016210:	461e      	mov	r6, r3
 8016212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016216:	2a39      	cmp	r2, #57	@ 0x39
 8016218:	d106      	bne.n	8016228 <_dtoa_r+0x6d8>
 801621a:	459a      	cmp	sl, r3
 801621c:	d1f8      	bne.n	8016210 <_dtoa_r+0x6c0>
 801621e:	2230      	movs	r2, #48	@ 0x30
 8016220:	f108 0801 	add.w	r8, r8, #1
 8016224:	f88a 2000 	strb.w	r2, [sl]
 8016228:	781a      	ldrb	r2, [r3, #0]
 801622a:	3201      	adds	r2, #1
 801622c:	701a      	strb	r2, [r3, #0]
 801622e:	e7a0      	b.n	8016172 <_dtoa_r+0x622>
 8016230:	4b6f      	ldr	r3, [pc, #444]	@ (80163f0 <_dtoa_r+0x8a0>)
 8016232:	2200      	movs	r2, #0
 8016234:	f7ea fa00 	bl	8000638 <__aeabi_dmul>
 8016238:	2200      	movs	r2, #0
 801623a:	2300      	movs	r3, #0
 801623c:	4604      	mov	r4, r0
 801623e:	460d      	mov	r5, r1
 8016240:	f7ea fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8016244:	2800      	cmp	r0, #0
 8016246:	d09f      	beq.n	8016188 <_dtoa_r+0x638>
 8016248:	e7d1      	b.n	80161ee <_dtoa_r+0x69e>
 801624a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801624c:	2a00      	cmp	r2, #0
 801624e:	f000 80ea 	beq.w	8016426 <_dtoa_r+0x8d6>
 8016252:	9a07      	ldr	r2, [sp, #28]
 8016254:	2a01      	cmp	r2, #1
 8016256:	f300 80cd 	bgt.w	80163f4 <_dtoa_r+0x8a4>
 801625a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801625c:	2a00      	cmp	r2, #0
 801625e:	f000 80c1 	beq.w	80163e4 <_dtoa_r+0x894>
 8016262:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8016266:	9c08      	ldr	r4, [sp, #32]
 8016268:	9e00      	ldr	r6, [sp, #0]
 801626a:	9a00      	ldr	r2, [sp, #0]
 801626c:	441a      	add	r2, r3
 801626e:	9200      	str	r2, [sp, #0]
 8016270:	9a06      	ldr	r2, [sp, #24]
 8016272:	2101      	movs	r1, #1
 8016274:	441a      	add	r2, r3
 8016276:	4648      	mov	r0, r9
 8016278:	9206      	str	r2, [sp, #24]
 801627a:	f000 fc2d 	bl	8016ad8 <__i2b>
 801627e:	4605      	mov	r5, r0
 8016280:	b166      	cbz	r6, 801629c <_dtoa_r+0x74c>
 8016282:	9b06      	ldr	r3, [sp, #24]
 8016284:	2b00      	cmp	r3, #0
 8016286:	dd09      	ble.n	801629c <_dtoa_r+0x74c>
 8016288:	42b3      	cmp	r3, r6
 801628a:	9a00      	ldr	r2, [sp, #0]
 801628c:	bfa8      	it	ge
 801628e:	4633      	movge	r3, r6
 8016290:	1ad2      	subs	r2, r2, r3
 8016292:	9200      	str	r2, [sp, #0]
 8016294:	9a06      	ldr	r2, [sp, #24]
 8016296:	1af6      	subs	r6, r6, r3
 8016298:	1ad3      	subs	r3, r2, r3
 801629a:	9306      	str	r3, [sp, #24]
 801629c:	9b08      	ldr	r3, [sp, #32]
 801629e:	b30b      	cbz	r3, 80162e4 <_dtoa_r+0x794>
 80162a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	f000 80c6 	beq.w	8016434 <_dtoa_r+0x8e4>
 80162a8:	2c00      	cmp	r4, #0
 80162aa:	f000 80c0 	beq.w	801642e <_dtoa_r+0x8de>
 80162ae:	4629      	mov	r1, r5
 80162b0:	4622      	mov	r2, r4
 80162b2:	4648      	mov	r0, r9
 80162b4:	f000 fcc8 	bl	8016c48 <__pow5mult>
 80162b8:	9a02      	ldr	r2, [sp, #8]
 80162ba:	4601      	mov	r1, r0
 80162bc:	4605      	mov	r5, r0
 80162be:	4648      	mov	r0, r9
 80162c0:	f000 fc20 	bl	8016b04 <__multiply>
 80162c4:	9902      	ldr	r1, [sp, #8]
 80162c6:	4680      	mov	r8, r0
 80162c8:	4648      	mov	r0, r9
 80162ca:	f000 fb51 	bl	8016970 <_Bfree>
 80162ce:	9b08      	ldr	r3, [sp, #32]
 80162d0:	1b1b      	subs	r3, r3, r4
 80162d2:	9308      	str	r3, [sp, #32]
 80162d4:	f000 80b1 	beq.w	801643a <_dtoa_r+0x8ea>
 80162d8:	9a08      	ldr	r2, [sp, #32]
 80162da:	4641      	mov	r1, r8
 80162dc:	4648      	mov	r0, r9
 80162de:	f000 fcb3 	bl	8016c48 <__pow5mult>
 80162e2:	9002      	str	r0, [sp, #8]
 80162e4:	2101      	movs	r1, #1
 80162e6:	4648      	mov	r0, r9
 80162e8:	f000 fbf6 	bl	8016ad8 <__i2b>
 80162ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162ee:	4604      	mov	r4, r0
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	f000 81d8 	beq.w	80166a6 <_dtoa_r+0xb56>
 80162f6:	461a      	mov	r2, r3
 80162f8:	4601      	mov	r1, r0
 80162fa:	4648      	mov	r0, r9
 80162fc:	f000 fca4 	bl	8016c48 <__pow5mult>
 8016300:	9b07      	ldr	r3, [sp, #28]
 8016302:	2b01      	cmp	r3, #1
 8016304:	4604      	mov	r4, r0
 8016306:	f300 809f 	bgt.w	8016448 <_dtoa_r+0x8f8>
 801630a:	9b04      	ldr	r3, [sp, #16]
 801630c:	2b00      	cmp	r3, #0
 801630e:	f040 8097 	bne.w	8016440 <_dtoa_r+0x8f0>
 8016312:	9b05      	ldr	r3, [sp, #20]
 8016314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016318:	2b00      	cmp	r3, #0
 801631a:	f040 8093 	bne.w	8016444 <_dtoa_r+0x8f4>
 801631e:	9b05      	ldr	r3, [sp, #20]
 8016320:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016324:	0d1b      	lsrs	r3, r3, #20
 8016326:	051b      	lsls	r3, r3, #20
 8016328:	b133      	cbz	r3, 8016338 <_dtoa_r+0x7e8>
 801632a:	9b00      	ldr	r3, [sp, #0]
 801632c:	3301      	adds	r3, #1
 801632e:	9300      	str	r3, [sp, #0]
 8016330:	9b06      	ldr	r3, [sp, #24]
 8016332:	3301      	adds	r3, #1
 8016334:	9306      	str	r3, [sp, #24]
 8016336:	2301      	movs	r3, #1
 8016338:	9308      	str	r3, [sp, #32]
 801633a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 81b8 	beq.w	80166b2 <_dtoa_r+0xb62>
 8016342:	6923      	ldr	r3, [r4, #16]
 8016344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016348:	6918      	ldr	r0, [r3, #16]
 801634a:	f000 fb79 	bl	8016a40 <__hi0bits>
 801634e:	f1c0 0020 	rsb	r0, r0, #32
 8016352:	9b06      	ldr	r3, [sp, #24]
 8016354:	4418      	add	r0, r3
 8016356:	f010 001f 	ands.w	r0, r0, #31
 801635a:	f000 8082 	beq.w	8016462 <_dtoa_r+0x912>
 801635e:	f1c0 0320 	rsb	r3, r0, #32
 8016362:	2b04      	cmp	r3, #4
 8016364:	dd73      	ble.n	801644e <_dtoa_r+0x8fe>
 8016366:	9b00      	ldr	r3, [sp, #0]
 8016368:	f1c0 001c 	rsb	r0, r0, #28
 801636c:	4403      	add	r3, r0
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	9b06      	ldr	r3, [sp, #24]
 8016372:	4403      	add	r3, r0
 8016374:	4406      	add	r6, r0
 8016376:	9306      	str	r3, [sp, #24]
 8016378:	9b00      	ldr	r3, [sp, #0]
 801637a:	2b00      	cmp	r3, #0
 801637c:	dd05      	ble.n	801638a <_dtoa_r+0x83a>
 801637e:	9902      	ldr	r1, [sp, #8]
 8016380:	461a      	mov	r2, r3
 8016382:	4648      	mov	r0, r9
 8016384:	f000 fcba 	bl	8016cfc <__lshift>
 8016388:	9002      	str	r0, [sp, #8]
 801638a:	9b06      	ldr	r3, [sp, #24]
 801638c:	2b00      	cmp	r3, #0
 801638e:	dd05      	ble.n	801639c <_dtoa_r+0x84c>
 8016390:	4621      	mov	r1, r4
 8016392:	461a      	mov	r2, r3
 8016394:	4648      	mov	r0, r9
 8016396:	f000 fcb1 	bl	8016cfc <__lshift>
 801639a:	4604      	mov	r4, r0
 801639c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d061      	beq.n	8016466 <_dtoa_r+0x916>
 80163a2:	9802      	ldr	r0, [sp, #8]
 80163a4:	4621      	mov	r1, r4
 80163a6:	f000 fd15 	bl	8016dd4 <__mcmp>
 80163aa:	2800      	cmp	r0, #0
 80163ac:	da5b      	bge.n	8016466 <_dtoa_r+0x916>
 80163ae:	2300      	movs	r3, #0
 80163b0:	9902      	ldr	r1, [sp, #8]
 80163b2:	220a      	movs	r2, #10
 80163b4:	4648      	mov	r0, r9
 80163b6:	f000 fafd 	bl	80169b4 <__multadd>
 80163ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163bc:	9002      	str	r0, [sp, #8]
 80163be:	f107 38ff 	add.w	r8, r7, #4294967295
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	f000 8177 	beq.w	80166b6 <_dtoa_r+0xb66>
 80163c8:	4629      	mov	r1, r5
 80163ca:	2300      	movs	r3, #0
 80163cc:	220a      	movs	r2, #10
 80163ce:	4648      	mov	r0, r9
 80163d0:	f000 faf0 	bl	80169b4 <__multadd>
 80163d4:	f1bb 0f00 	cmp.w	fp, #0
 80163d8:	4605      	mov	r5, r0
 80163da:	dc6f      	bgt.n	80164bc <_dtoa_r+0x96c>
 80163dc:	9b07      	ldr	r3, [sp, #28]
 80163de:	2b02      	cmp	r3, #2
 80163e0:	dc49      	bgt.n	8016476 <_dtoa_r+0x926>
 80163e2:	e06b      	b.n	80164bc <_dtoa_r+0x96c>
 80163e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80163e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80163ea:	e73c      	b.n	8016266 <_dtoa_r+0x716>
 80163ec:	3fe00000 	.word	0x3fe00000
 80163f0:	40240000 	.word	0x40240000
 80163f4:	9b03      	ldr	r3, [sp, #12]
 80163f6:	1e5c      	subs	r4, r3, #1
 80163f8:	9b08      	ldr	r3, [sp, #32]
 80163fa:	42a3      	cmp	r3, r4
 80163fc:	db09      	blt.n	8016412 <_dtoa_r+0x8c2>
 80163fe:	1b1c      	subs	r4, r3, r4
 8016400:	9b03      	ldr	r3, [sp, #12]
 8016402:	2b00      	cmp	r3, #0
 8016404:	f6bf af30 	bge.w	8016268 <_dtoa_r+0x718>
 8016408:	9b00      	ldr	r3, [sp, #0]
 801640a:	9a03      	ldr	r2, [sp, #12]
 801640c:	1a9e      	subs	r6, r3, r2
 801640e:	2300      	movs	r3, #0
 8016410:	e72b      	b.n	801626a <_dtoa_r+0x71a>
 8016412:	9b08      	ldr	r3, [sp, #32]
 8016414:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016416:	9408      	str	r4, [sp, #32]
 8016418:	1ae3      	subs	r3, r4, r3
 801641a:	441a      	add	r2, r3
 801641c:	9e00      	ldr	r6, [sp, #0]
 801641e:	9b03      	ldr	r3, [sp, #12]
 8016420:	920d      	str	r2, [sp, #52]	@ 0x34
 8016422:	2400      	movs	r4, #0
 8016424:	e721      	b.n	801626a <_dtoa_r+0x71a>
 8016426:	9c08      	ldr	r4, [sp, #32]
 8016428:	9e00      	ldr	r6, [sp, #0]
 801642a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801642c:	e728      	b.n	8016280 <_dtoa_r+0x730>
 801642e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8016432:	e751      	b.n	80162d8 <_dtoa_r+0x788>
 8016434:	9a08      	ldr	r2, [sp, #32]
 8016436:	9902      	ldr	r1, [sp, #8]
 8016438:	e750      	b.n	80162dc <_dtoa_r+0x78c>
 801643a:	f8cd 8008 	str.w	r8, [sp, #8]
 801643e:	e751      	b.n	80162e4 <_dtoa_r+0x794>
 8016440:	2300      	movs	r3, #0
 8016442:	e779      	b.n	8016338 <_dtoa_r+0x7e8>
 8016444:	9b04      	ldr	r3, [sp, #16]
 8016446:	e777      	b.n	8016338 <_dtoa_r+0x7e8>
 8016448:	2300      	movs	r3, #0
 801644a:	9308      	str	r3, [sp, #32]
 801644c:	e779      	b.n	8016342 <_dtoa_r+0x7f2>
 801644e:	d093      	beq.n	8016378 <_dtoa_r+0x828>
 8016450:	9a00      	ldr	r2, [sp, #0]
 8016452:	331c      	adds	r3, #28
 8016454:	441a      	add	r2, r3
 8016456:	9200      	str	r2, [sp, #0]
 8016458:	9a06      	ldr	r2, [sp, #24]
 801645a:	441a      	add	r2, r3
 801645c:	441e      	add	r6, r3
 801645e:	9206      	str	r2, [sp, #24]
 8016460:	e78a      	b.n	8016378 <_dtoa_r+0x828>
 8016462:	4603      	mov	r3, r0
 8016464:	e7f4      	b.n	8016450 <_dtoa_r+0x900>
 8016466:	9b03      	ldr	r3, [sp, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	46b8      	mov	r8, r7
 801646c:	dc20      	bgt.n	80164b0 <_dtoa_r+0x960>
 801646e:	469b      	mov	fp, r3
 8016470:	9b07      	ldr	r3, [sp, #28]
 8016472:	2b02      	cmp	r3, #2
 8016474:	dd1e      	ble.n	80164b4 <_dtoa_r+0x964>
 8016476:	f1bb 0f00 	cmp.w	fp, #0
 801647a:	f47f adb1 	bne.w	8015fe0 <_dtoa_r+0x490>
 801647e:	4621      	mov	r1, r4
 8016480:	465b      	mov	r3, fp
 8016482:	2205      	movs	r2, #5
 8016484:	4648      	mov	r0, r9
 8016486:	f000 fa95 	bl	80169b4 <__multadd>
 801648a:	4601      	mov	r1, r0
 801648c:	4604      	mov	r4, r0
 801648e:	9802      	ldr	r0, [sp, #8]
 8016490:	f000 fca0 	bl	8016dd4 <__mcmp>
 8016494:	2800      	cmp	r0, #0
 8016496:	f77f ada3 	ble.w	8015fe0 <_dtoa_r+0x490>
 801649a:	4656      	mov	r6, sl
 801649c:	2331      	movs	r3, #49	@ 0x31
 801649e:	f806 3b01 	strb.w	r3, [r6], #1
 80164a2:	f108 0801 	add.w	r8, r8, #1
 80164a6:	e59f      	b.n	8015fe8 <_dtoa_r+0x498>
 80164a8:	9c03      	ldr	r4, [sp, #12]
 80164aa:	46b8      	mov	r8, r7
 80164ac:	4625      	mov	r5, r4
 80164ae:	e7f4      	b.n	801649a <_dtoa_r+0x94a>
 80164b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80164b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	f000 8101 	beq.w	80166be <_dtoa_r+0xb6e>
 80164bc:	2e00      	cmp	r6, #0
 80164be:	dd05      	ble.n	80164cc <_dtoa_r+0x97c>
 80164c0:	4629      	mov	r1, r5
 80164c2:	4632      	mov	r2, r6
 80164c4:	4648      	mov	r0, r9
 80164c6:	f000 fc19 	bl	8016cfc <__lshift>
 80164ca:	4605      	mov	r5, r0
 80164cc:	9b08      	ldr	r3, [sp, #32]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d05c      	beq.n	801658c <_dtoa_r+0xa3c>
 80164d2:	6869      	ldr	r1, [r5, #4]
 80164d4:	4648      	mov	r0, r9
 80164d6:	f000 fa0b 	bl	80168f0 <_Balloc>
 80164da:	4606      	mov	r6, r0
 80164dc:	b928      	cbnz	r0, 80164ea <_dtoa_r+0x99a>
 80164de:	4b82      	ldr	r3, [pc, #520]	@ (80166e8 <_dtoa_r+0xb98>)
 80164e0:	4602      	mov	r2, r0
 80164e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80164e6:	f7ff bb4a 	b.w	8015b7e <_dtoa_r+0x2e>
 80164ea:	692a      	ldr	r2, [r5, #16]
 80164ec:	3202      	adds	r2, #2
 80164ee:	0092      	lsls	r2, r2, #2
 80164f0:	f105 010c 	add.w	r1, r5, #12
 80164f4:	300c      	adds	r0, #12
 80164f6:	f7ff fa92 	bl	8015a1e <memcpy>
 80164fa:	2201      	movs	r2, #1
 80164fc:	4631      	mov	r1, r6
 80164fe:	4648      	mov	r0, r9
 8016500:	f000 fbfc 	bl	8016cfc <__lshift>
 8016504:	f10a 0301 	add.w	r3, sl, #1
 8016508:	9300      	str	r3, [sp, #0]
 801650a:	eb0a 030b 	add.w	r3, sl, fp
 801650e:	9308      	str	r3, [sp, #32]
 8016510:	9b04      	ldr	r3, [sp, #16]
 8016512:	f003 0301 	and.w	r3, r3, #1
 8016516:	462f      	mov	r7, r5
 8016518:	9306      	str	r3, [sp, #24]
 801651a:	4605      	mov	r5, r0
 801651c:	9b00      	ldr	r3, [sp, #0]
 801651e:	9802      	ldr	r0, [sp, #8]
 8016520:	4621      	mov	r1, r4
 8016522:	f103 3bff 	add.w	fp, r3, #4294967295
 8016526:	f7ff fa88 	bl	8015a3a <quorem>
 801652a:	4603      	mov	r3, r0
 801652c:	3330      	adds	r3, #48	@ 0x30
 801652e:	9003      	str	r0, [sp, #12]
 8016530:	4639      	mov	r1, r7
 8016532:	9802      	ldr	r0, [sp, #8]
 8016534:	9309      	str	r3, [sp, #36]	@ 0x24
 8016536:	f000 fc4d 	bl	8016dd4 <__mcmp>
 801653a:	462a      	mov	r2, r5
 801653c:	9004      	str	r0, [sp, #16]
 801653e:	4621      	mov	r1, r4
 8016540:	4648      	mov	r0, r9
 8016542:	f000 fc63 	bl	8016e0c <__mdiff>
 8016546:	68c2      	ldr	r2, [r0, #12]
 8016548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801654a:	4606      	mov	r6, r0
 801654c:	bb02      	cbnz	r2, 8016590 <_dtoa_r+0xa40>
 801654e:	4601      	mov	r1, r0
 8016550:	9802      	ldr	r0, [sp, #8]
 8016552:	f000 fc3f 	bl	8016dd4 <__mcmp>
 8016556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016558:	4602      	mov	r2, r0
 801655a:	4631      	mov	r1, r6
 801655c:	4648      	mov	r0, r9
 801655e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016560:	9309      	str	r3, [sp, #36]	@ 0x24
 8016562:	f000 fa05 	bl	8016970 <_Bfree>
 8016566:	9b07      	ldr	r3, [sp, #28]
 8016568:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801656a:	9e00      	ldr	r6, [sp, #0]
 801656c:	ea42 0103 	orr.w	r1, r2, r3
 8016570:	9b06      	ldr	r3, [sp, #24]
 8016572:	4319      	orrs	r1, r3
 8016574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016576:	d10d      	bne.n	8016594 <_dtoa_r+0xa44>
 8016578:	2b39      	cmp	r3, #57	@ 0x39
 801657a:	d027      	beq.n	80165cc <_dtoa_r+0xa7c>
 801657c:	9a04      	ldr	r2, [sp, #16]
 801657e:	2a00      	cmp	r2, #0
 8016580:	dd01      	ble.n	8016586 <_dtoa_r+0xa36>
 8016582:	9b03      	ldr	r3, [sp, #12]
 8016584:	3331      	adds	r3, #49	@ 0x31
 8016586:	f88b 3000 	strb.w	r3, [fp]
 801658a:	e52e      	b.n	8015fea <_dtoa_r+0x49a>
 801658c:	4628      	mov	r0, r5
 801658e:	e7b9      	b.n	8016504 <_dtoa_r+0x9b4>
 8016590:	2201      	movs	r2, #1
 8016592:	e7e2      	b.n	801655a <_dtoa_r+0xa0a>
 8016594:	9904      	ldr	r1, [sp, #16]
 8016596:	2900      	cmp	r1, #0
 8016598:	db04      	blt.n	80165a4 <_dtoa_r+0xa54>
 801659a:	9807      	ldr	r0, [sp, #28]
 801659c:	4301      	orrs	r1, r0
 801659e:	9806      	ldr	r0, [sp, #24]
 80165a0:	4301      	orrs	r1, r0
 80165a2:	d120      	bne.n	80165e6 <_dtoa_r+0xa96>
 80165a4:	2a00      	cmp	r2, #0
 80165a6:	ddee      	ble.n	8016586 <_dtoa_r+0xa36>
 80165a8:	9902      	ldr	r1, [sp, #8]
 80165aa:	9300      	str	r3, [sp, #0]
 80165ac:	2201      	movs	r2, #1
 80165ae:	4648      	mov	r0, r9
 80165b0:	f000 fba4 	bl	8016cfc <__lshift>
 80165b4:	4621      	mov	r1, r4
 80165b6:	9002      	str	r0, [sp, #8]
 80165b8:	f000 fc0c 	bl	8016dd4 <__mcmp>
 80165bc:	2800      	cmp	r0, #0
 80165be:	9b00      	ldr	r3, [sp, #0]
 80165c0:	dc02      	bgt.n	80165c8 <_dtoa_r+0xa78>
 80165c2:	d1e0      	bne.n	8016586 <_dtoa_r+0xa36>
 80165c4:	07da      	lsls	r2, r3, #31
 80165c6:	d5de      	bpl.n	8016586 <_dtoa_r+0xa36>
 80165c8:	2b39      	cmp	r3, #57	@ 0x39
 80165ca:	d1da      	bne.n	8016582 <_dtoa_r+0xa32>
 80165cc:	2339      	movs	r3, #57	@ 0x39
 80165ce:	f88b 3000 	strb.w	r3, [fp]
 80165d2:	4633      	mov	r3, r6
 80165d4:	461e      	mov	r6, r3
 80165d6:	3b01      	subs	r3, #1
 80165d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80165dc:	2a39      	cmp	r2, #57	@ 0x39
 80165de:	d04e      	beq.n	801667e <_dtoa_r+0xb2e>
 80165e0:	3201      	adds	r2, #1
 80165e2:	701a      	strb	r2, [r3, #0]
 80165e4:	e501      	b.n	8015fea <_dtoa_r+0x49a>
 80165e6:	2a00      	cmp	r2, #0
 80165e8:	dd03      	ble.n	80165f2 <_dtoa_r+0xaa2>
 80165ea:	2b39      	cmp	r3, #57	@ 0x39
 80165ec:	d0ee      	beq.n	80165cc <_dtoa_r+0xa7c>
 80165ee:	3301      	adds	r3, #1
 80165f0:	e7c9      	b.n	8016586 <_dtoa_r+0xa36>
 80165f2:	9a00      	ldr	r2, [sp, #0]
 80165f4:	9908      	ldr	r1, [sp, #32]
 80165f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80165fa:	428a      	cmp	r2, r1
 80165fc:	d028      	beq.n	8016650 <_dtoa_r+0xb00>
 80165fe:	9902      	ldr	r1, [sp, #8]
 8016600:	2300      	movs	r3, #0
 8016602:	220a      	movs	r2, #10
 8016604:	4648      	mov	r0, r9
 8016606:	f000 f9d5 	bl	80169b4 <__multadd>
 801660a:	42af      	cmp	r7, r5
 801660c:	9002      	str	r0, [sp, #8]
 801660e:	f04f 0300 	mov.w	r3, #0
 8016612:	f04f 020a 	mov.w	r2, #10
 8016616:	4639      	mov	r1, r7
 8016618:	4648      	mov	r0, r9
 801661a:	d107      	bne.n	801662c <_dtoa_r+0xadc>
 801661c:	f000 f9ca 	bl	80169b4 <__multadd>
 8016620:	4607      	mov	r7, r0
 8016622:	4605      	mov	r5, r0
 8016624:	9b00      	ldr	r3, [sp, #0]
 8016626:	3301      	adds	r3, #1
 8016628:	9300      	str	r3, [sp, #0]
 801662a:	e777      	b.n	801651c <_dtoa_r+0x9cc>
 801662c:	f000 f9c2 	bl	80169b4 <__multadd>
 8016630:	4629      	mov	r1, r5
 8016632:	4607      	mov	r7, r0
 8016634:	2300      	movs	r3, #0
 8016636:	220a      	movs	r2, #10
 8016638:	4648      	mov	r0, r9
 801663a:	f000 f9bb 	bl	80169b4 <__multadd>
 801663e:	4605      	mov	r5, r0
 8016640:	e7f0      	b.n	8016624 <_dtoa_r+0xad4>
 8016642:	f1bb 0f00 	cmp.w	fp, #0
 8016646:	bfcc      	ite	gt
 8016648:	465e      	movgt	r6, fp
 801664a:	2601      	movle	r6, #1
 801664c:	4456      	add	r6, sl
 801664e:	2700      	movs	r7, #0
 8016650:	9902      	ldr	r1, [sp, #8]
 8016652:	9300      	str	r3, [sp, #0]
 8016654:	2201      	movs	r2, #1
 8016656:	4648      	mov	r0, r9
 8016658:	f000 fb50 	bl	8016cfc <__lshift>
 801665c:	4621      	mov	r1, r4
 801665e:	9002      	str	r0, [sp, #8]
 8016660:	f000 fbb8 	bl	8016dd4 <__mcmp>
 8016664:	2800      	cmp	r0, #0
 8016666:	dcb4      	bgt.n	80165d2 <_dtoa_r+0xa82>
 8016668:	d102      	bne.n	8016670 <_dtoa_r+0xb20>
 801666a:	9b00      	ldr	r3, [sp, #0]
 801666c:	07db      	lsls	r3, r3, #31
 801666e:	d4b0      	bmi.n	80165d2 <_dtoa_r+0xa82>
 8016670:	4633      	mov	r3, r6
 8016672:	461e      	mov	r6, r3
 8016674:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016678:	2a30      	cmp	r2, #48	@ 0x30
 801667a:	d0fa      	beq.n	8016672 <_dtoa_r+0xb22>
 801667c:	e4b5      	b.n	8015fea <_dtoa_r+0x49a>
 801667e:	459a      	cmp	sl, r3
 8016680:	d1a8      	bne.n	80165d4 <_dtoa_r+0xa84>
 8016682:	2331      	movs	r3, #49	@ 0x31
 8016684:	f108 0801 	add.w	r8, r8, #1
 8016688:	f88a 3000 	strb.w	r3, [sl]
 801668c:	e4ad      	b.n	8015fea <_dtoa_r+0x49a>
 801668e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016690:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80166ec <_dtoa_r+0xb9c>
 8016694:	b11b      	cbz	r3, 801669e <_dtoa_r+0xb4e>
 8016696:	f10a 0308 	add.w	r3, sl, #8
 801669a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801669c:	6013      	str	r3, [r2, #0]
 801669e:	4650      	mov	r0, sl
 80166a0:	b017      	add	sp, #92	@ 0x5c
 80166a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166a6:	9b07      	ldr	r3, [sp, #28]
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	f77f ae2e 	ble.w	801630a <_dtoa_r+0x7ba>
 80166ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80166b0:	9308      	str	r3, [sp, #32]
 80166b2:	2001      	movs	r0, #1
 80166b4:	e64d      	b.n	8016352 <_dtoa_r+0x802>
 80166b6:	f1bb 0f00 	cmp.w	fp, #0
 80166ba:	f77f aed9 	ble.w	8016470 <_dtoa_r+0x920>
 80166be:	4656      	mov	r6, sl
 80166c0:	9802      	ldr	r0, [sp, #8]
 80166c2:	4621      	mov	r1, r4
 80166c4:	f7ff f9b9 	bl	8015a3a <quorem>
 80166c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80166cc:	f806 3b01 	strb.w	r3, [r6], #1
 80166d0:	eba6 020a 	sub.w	r2, r6, sl
 80166d4:	4593      	cmp	fp, r2
 80166d6:	ddb4      	ble.n	8016642 <_dtoa_r+0xaf2>
 80166d8:	9902      	ldr	r1, [sp, #8]
 80166da:	2300      	movs	r3, #0
 80166dc:	220a      	movs	r2, #10
 80166de:	4648      	mov	r0, r9
 80166e0:	f000 f968 	bl	80169b4 <__multadd>
 80166e4:	9002      	str	r0, [sp, #8]
 80166e6:	e7eb      	b.n	80166c0 <_dtoa_r+0xb70>
 80166e8:	080177a0 	.word	0x080177a0
 80166ec:	08017724 	.word	0x08017724

080166f0 <_free_r>:
 80166f0:	b538      	push	{r3, r4, r5, lr}
 80166f2:	4605      	mov	r5, r0
 80166f4:	2900      	cmp	r1, #0
 80166f6:	d041      	beq.n	801677c <_free_r+0x8c>
 80166f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166fc:	1f0c      	subs	r4, r1, #4
 80166fe:	2b00      	cmp	r3, #0
 8016700:	bfb8      	it	lt
 8016702:	18e4      	addlt	r4, r4, r3
 8016704:	f000 f8e8 	bl	80168d8 <__malloc_lock>
 8016708:	4a1d      	ldr	r2, [pc, #116]	@ (8016780 <_free_r+0x90>)
 801670a:	6813      	ldr	r3, [r2, #0]
 801670c:	b933      	cbnz	r3, 801671c <_free_r+0x2c>
 801670e:	6063      	str	r3, [r4, #4]
 8016710:	6014      	str	r4, [r2, #0]
 8016712:	4628      	mov	r0, r5
 8016714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016718:	f000 b8e4 	b.w	80168e4 <__malloc_unlock>
 801671c:	42a3      	cmp	r3, r4
 801671e:	d908      	bls.n	8016732 <_free_r+0x42>
 8016720:	6820      	ldr	r0, [r4, #0]
 8016722:	1821      	adds	r1, r4, r0
 8016724:	428b      	cmp	r3, r1
 8016726:	bf01      	itttt	eq
 8016728:	6819      	ldreq	r1, [r3, #0]
 801672a:	685b      	ldreq	r3, [r3, #4]
 801672c:	1809      	addeq	r1, r1, r0
 801672e:	6021      	streq	r1, [r4, #0]
 8016730:	e7ed      	b.n	801670e <_free_r+0x1e>
 8016732:	461a      	mov	r2, r3
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	b10b      	cbz	r3, 801673c <_free_r+0x4c>
 8016738:	42a3      	cmp	r3, r4
 801673a:	d9fa      	bls.n	8016732 <_free_r+0x42>
 801673c:	6811      	ldr	r1, [r2, #0]
 801673e:	1850      	adds	r0, r2, r1
 8016740:	42a0      	cmp	r0, r4
 8016742:	d10b      	bne.n	801675c <_free_r+0x6c>
 8016744:	6820      	ldr	r0, [r4, #0]
 8016746:	4401      	add	r1, r0
 8016748:	1850      	adds	r0, r2, r1
 801674a:	4283      	cmp	r3, r0
 801674c:	6011      	str	r1, [r2, #0]
 801674e:	d1e0      	bne.n	8016712 <_free_r+0x22>
 8016750:	6818      	ldr	r0, [r3, #0]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	6053      	str	r3, [r2, #4]
 8016756:	4408      	add	r0, r1
 8016758:	6010      	str	r0, [r2, #0]
 801675a:	e7da      	b.n	8016712 <_free_r+0x22>
 801675c:	d902      	bls.n	8016764 <_free_r+0x74>
 801675e:	230c      	movs	r3, #12
 8016760:	602b      	str	r3, [r5, #0]
 8016762:	e7d6      	b.n	8016712 <_free_r+0x22>
 8016764:	6820      	ldr	r0, [r4, #0]
 8016766:	1821      	adds	r1, r4, r0
 8016768:	428b      	cmp	r3, r1
 801676a:	bf04      	itt	eq
 801676c:	6819      	ldreq	r1, [r3, #0]
 801676e:	685b      	ldreq	r3, [r3, #4]
 8016770:	6063      	str	r3, [r4, #4]
 8016772:	bf04      	itt	eq
 8016774:	1809      	addeq	r1, r1, r0
 8016776:	6021      	streq	r1, [r4, #0]
 8016778:	6054      	str	r4, [r2, #4]
 801677a:	e7ca      	b.n	8016712 <_free_r+0x22>
 801677c:	bd38      	pop	{r3, r4, r5, pc}
 801677e:	bf00      	nop
 8016780:	20002ad4 	.word	0x20002ad4

08016784 <malloc>:
 8016784:	4b02      	ldr	r3, [pc, #8]	@ (8016790 <malloc+0xc>)
 8016786:	4601      	mov	r1, r0
 8016788:	6818      	ldr	r0, [r3, #0]
 801678a:	f000 b825 	b.w	80167d8 <_malloc_r>
 801678e:	bf00      	nop
 8016790:	20000074 	.word	0x20000074

08016794 <sbrk_aligned>:
 8016794:	b570      	push	{r4, r5, r6, lr}
 8016796:	4e0f      	ldr	r6, [pc, #60]	@ (80167d4 <sbrk_aligned+0x40>)
 8016798:	460c      	mov	r4, r1
 801679a:	6831      	ldr	r1, [r6, #0]
 801679c:	4605      	mov	r5, r0
 801679e:	b911      	cbnz	r1, 80167a6 <sbrk_aligned+0x12>
 80167a0:	f000 fe92 	bl	80174c8 <_sbrk_r>
 80167a4:	6030      	str	r0, [r6, #0]
 80167a6:	4621      	mov	r1, r4
 80167a8:	4628      	mov	r0, r5
 80167aa:	f000 fe8d 	bl	80174c8 <_sbrk_r>
 80167ae:	1c43      	adds	r3, r0, #1
 80167b0:	d103      	bne.n	80167ba <sbrk_aligned+0x26>
 80167b2:	f04f 34ff 	mov.w	r4, #4294967295
 80167b6:	4620      	mov	r0, r4
 80167b8:	bd70      	pop	{r4, r5, r6, pc}
 80167ba:	1cc4      	adds	r4, r0, #3
 80167bc:	f024 0403 	bic.w	r4, r4, #3
 80167c0:	42a0      	cmp	r0, r4
 80167c2:	d0f8      	beq.n	80167b6 <sbrk_aligned+0x22>
 80167c4:	1a21      	subs	r1, r4, r0
 80167c6:	4628      	mov	r0, r5
 80167c8:	f000 fe7e 	bl	80174c8 <_sbrk_r>
 80167cc:	3001      	adds	r0, #1
 80167ce:	d1f2      	bne.n	80167b6 <sbrk_aligned+0x22>
 80167d0:	e7ef      	b.n	80167b2 <sbrk_aligned+0x1e>
 80167d2:	bf00      	nop
 80167d4:	20002ad0 	.word	0x20002ad0

080167d8 <_malloc_r>:
 80167d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167dc:	1ccd      	adds	r5, r1, #3
 80167de:	f025 0503 	bic.w	r5, r5, #3
 80167e2:	3508      	adds	r5, #8
 80167e4:	2d0c      	cmp	r5, #12
 80167e6:	bf38      	it	cc
 80167e8:	250c      	movcc	r5, #12
 80167ea:	2d00      	cmp	r5, #0
 80167ec:	4606      	mov	r6, r0
 80167ee:	db01      	blt.n	80167f4 <_malloc_r+0x1c>
 80167f0:	42a9      	cmp	r1, r5
 80167f2:	d904      	bls.n	80167fe <_malloc_r+0x26>
 80167f4:	230c      	movs	r3, #12
 80167f6:	6033      	str	r3, [r6, #0]
 80167f8:	2000      	movs	r0, #0
 80167fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80168d4 <_malloc_r+0xfc>
 8016802:	f000 f869 	bl	80168d8 <__malloc_lock>
 8016806:	f8d8 3000 	ldr.w	r3, [r8]
 801680a:	461c      	mov	r4, r3
 801680c:	bb44      	cbnz	r4, 8016860 <_malloc_r+0x88>
 801680e:	4629      	mov	r1, r5
 8016810:	4630      	mov	r0, r6
 8016812:	f7ff ffbf 	bl	8016794 <sbrk_aligned>
 8016816:	1c43      	adds	r3, r0, #1
 8016818:	4604      	mov	r4, r0
 801681a:	d158      	bne.n	80168ce <_malloc_r+0xf6>
 801681c:	f8d8 4000 	ldr.w	r4, [r8]
 8016820:	4627      	mov	r7, r4
 8016822:	2f00      	cmp	r7, #0
 8016824:	d143      	bne.n	80168ae <_malloc_r+0xd6>
 8016826:	2c00      	cmp	r4, #0
 8016828:	d04b      	beq.n	80168c2 <_malloc_r+0xea>
 801682a:	6823      	ldr	r3, [r4, #0]
 801682c:	4639      	mov	r1, r7
 801682e:	4630      	mov	r0, r6
 8016830:	eb04 0903 	add.w	r9, r4, r3
 8016834:	f000 fe48 	bl	80174c8 <_sbrk_r>
 8016838:	4581      	cmp	r9, r0
 801683a:	d142      	bne.n	80168c2 <_malloc_r+0xea>
 801683c:	6821      	ldr	r1, [r4, #0]
 801683e:	1a6d      	subs	r5, r5, r1
 8016840:	4629      	mov	r1, r5
 8016842:	4630      	mov	r0, r6
 8016844:	f7ff ffa6 	bl	8016794 <sbrk_aligned>
 8016848:	3001      	adds	r0, #1
 801684a:	d03a      	beq.n	80168c2 <_malloc_r+0xea>
 801684c:	6823      	ldr	r3, [r4, #0]
 801684e:	442b      	add	r3, r5
 8016850:	6023      	str	r3, [r4, #0]
 8016852:	f8d8 3000 	ldr.w	r3, [r8]
 8016856:	685a      	ldr	r2, [r3, #4]
 8016858:	bb62      	cbnz	r2, 80168b4 <_malloc_r+0xdc>
 801685a:	f8c8 7000 	str.w	r7, [r8]
 801685e:	e00f      	b.n	8016880 <_malloc_r+0xa8>
 8016860:	6822      	ldr	r2, [r4, #0]
 8016862:	1b52      	subs	r2, r2, r5
 8016864:	d420      	bmi.n	80168a8 <_malloc_r+0xd0>
 8016866:	2a0b      	cmp	r2, #11
 8016868:	d917      	bls.n	801689a <_malloc_r+0xc2>
 801686a:	1961      	adds	r1, r4, r5
 801686c:	42a3      	cmp	r3, r4
 801686e:	6025      	str	r5, [r4, #0]
 8016870:	bf18      	it	ne
 8016872:	6059      	strne	r1, [r3, #4]
 8016874:	6863      	ldr	r3, [r4, #4]
 8016876:	bf08      	it	eq
 8016878:	f8c8 1000 	streq.w	r1, [r8]
 801687c:	5162      	str	r2, [r4, r5]
 801687e:	604b      	str	r3, [r1, #4]
 8016880:	4630      	mov	r0, r6
 8016882:	f000 f82f 	bl	80168e4 <__malloc_unlock>
 8016886:	f104 000b 	add.w	r0, r4, #11
 801688a:	1d23      	adds	r3, r4, #4
 801688c:	f020 0007 	bic.w	r0, r0, #7
 8016890:	1ac2      	subs	r2, r0, r3
 8016892:	bf1c      	itt	ne
 8016894:	1a1b      	subne	r3, r3, r0
 8016896:	50a3      	strne	r3, [r4, r2]
 8016898:	e7af      	b.n	80167fa <_malloc_r+0x22>
 801689a:	6862      	ldr	r2, [r4, #4]
 801689c:	42a3      	cmp	r3, r4
 801689e:	bf0c      	ite	eq
 80168a0:	f8c8 2000 	streq.w	r2, [r8]
 80168a4:	605a      	strne	r2, [r3, #4]
 80168a6:	e7eb      	b.n	8016880 <_malloc_r+0xa8>
 80168a8:	4623      	mov	r3, r4
 80168aa:	6864      	ldr	r4, [r4, #4]
 80168ac:	e7ae      	b.n	801680c <_malloc_r+0x34>
 80168ae:	463c      	mov	r4, r7
 80168b0:	687f      	ldr	r7, [r7, #4]
 80168b2:	e7b6      	b.n	8016822 <_malloc_r+0x4a>
 80168b4:	461a      	mov	r2, r3
 80168b6:	685b      	ldr	r3, [r3, #4]
 80168b8:	42a3      	cmp	r3, r4
 80168ba:	d1fb      	bne.n	80168b4 <_malloc_r+0xdc>
 80168bc:	2300      	movs	r3, #0
 80168be:	6053      	str	r3, [r2, #4]
 80168c0:	e7de      	b.n	8016880 <_malloc_r+0xa8>
 80168c2:	230c      	movs	r3, #12
 80168c4:	6033      	str	r3, [r6, #0]
 80168c6:	4630      	mov	r0, r6
 80168c8:	f000 f80c 	bl	80168e4 <__malloc_unlock>
 80168cc:	e794      	b.n	80167f8 <_malloc_r+0x20>
 80168ce:	6005      	str	r5, [r0, #0]
 80168d0:	e7d6      	b.n	8016880 <_malloc_r+0xa8>
 80168d2:	bf00      	nop
 80168d4:	20002ad4 	.word	0x20002ad4

080168d8 <__malloc_lock>:
 80168d8:	4801      	ldr	r0, [pc, #4]	@ (80168e0 <__malloc_lock+0x8>)
 80168da:	f7ff b89e 	b.w	8015a1a <__retarget_lock_acquire_recursive>
 80168de:	bf00      	nop
 80168e0:	20002acc 	.word	0x20002acc

080168e4 <__malloc_unlock>:
 80168e4:	4801      	ldr	r0, [pc, #4]	@ (80168ec <__malloc_unlock+0x8>)
 80168e6:	f7ff b899 	b.w	8015a1c <__retarget_lock_release_recursive>
 80168ea:	bf00      	nop
 80168ec:	20002acc 	.word	0x20002acc

080168f0 <_Balloc>:
 80168f0:	b570      	push	{r4, r5, r6, lr}
 80168f2:	69c6      	ldr	r6, [r0, #28]
 80168f4:	4604      	mov	r4, r0
 80168f6:	460d      	mov	r5, r1
 80168f8:	b976      	cbnz	r6, 8016918 <_Balloc+0x28>
 80168fa:	2010      	movs	r0, #16
 80168fc:	f7ff ff42 	bl	8016784 <malloc>
 8016900:	4602      	mov	r2, r0
 8016902:	61e0      	str	r0, [r4, #28]
 8016904:	b920      	cbnz	r0, 8016910 <_Balloc+0x20>
 8016906:	4b18      	ldr	r3, [pc, #96]	@ (8016968 <_Balloc+0x78>)
 8016908:	4818      	ldr	r0, [pc, #96]	@ (801696c <_Balloc+0x7c>)
 801690a:	216b      	movs	r1, #107	@ 0x6b
 801690c:	f000 fdec 	bl	80174e8 <__assert_func>
 8016910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016914:	6006      	str	r6, [r0, #0]
 8016916:	60c6      	str	r6, [r0, #12]
 8016918:	69e6      	ldr	r6, [r4, #28]
 801691a:	68f3      	ldr	r3, [r6, #12]
 801691c:	b183      	cbz	r3, 8016940 <_Balloc+0x50>
 801691e:	69e3      	ldr	r3, [r4, #28]
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016926:	b9b8      	cbnz	r0, 8016958 <_Balloc+0x68>
 8016928:	2101      	movs	r1, #1
 801692a:	fa01 f605 	lsl.w	r6, r1, r5
 801692e:	1d72      	adds	r2, r6, #5
 8016930:	0092      	lsls	r2, r2, #2
 8016932:	4620      	mov	r0, r4
 8016934:	f000 fdf6 	bl	8017524 <_calloc_r>
 8016938:	b160      	cbz	r0, 8016954 <_Balloc+0x64>
 801693a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801693e:	e00e      	b.n	801695e <_Balloc+0x6e>
 8016940:	2221      	movs	r2, #33	@ 0x21
 8016942:	2104      	movs	r1, #4
 8016944:	4620      	mov	r0, r4
 8016946:	f000 fded 	bl	8017524 <_calloc_r>
 801694a:	69e3      	ldr	r3, [r4, #28]
 801694c:	60f0      	str	r0, [r6, #12]
 801694e:	68db      	ldr	r3, [r3, #12]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d1e4      	bne.n	801691e <_Balloc+0x2e>
 8016954:	2000      	movs	r0, #0
 8016956:	bd70      	pop	{r4, r5, r6, pc}
 8016958:	6802      	ldr	r2, [r0, #0]
 801695a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801695e:	2300      	movs	r3, #0
 8016960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016964:	e7f7      	b.n	8016956 <_Balloc+0x66>
 8016966:	bf00      	nop
 8016968:	08017731 	.word	0x08017731
 801696c:	080177b1 	.word	0x080177b1

08016970 <_Bfree>:
 8016970:	b570      	push	{r4, r5, r6, lr}
 8016972:	69c6      	ldr	r6, [r0, #28]
 8016974:	4605      	mov	r5, r0
 8016976:	460c      	mov	r4, r1
 8016978:	b976      	cbnz	r6, 8016998 <_Bfree+0x28>
 801697a:	2010      	movs	r0, #16
 801697c:	f7ff ff02 	bl	8016784 <malloc>
 8016980:	4602      	mov	r2, r0
 8016982:	61e8      	str	r0, [r5, #28]
 8016984:	b920      	cbnz	r0, 8016990 <_Bfree+0x20>
 8016986:	4b09      	ldr	r3, [pc, #36]	@ (80169ac <_Bfree+0x3c>)
 8016988:	4809      	ldr	r0, [pc, #36]	@ (80169b0 <_Bfree+0x40>)
 801698a:	218f      	movs	r1, #143	@ 0x8f
 801698c:	f000 fdac 	bl	80174e8 <__assert_func>
 8016990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016994:	6006      	str	r6, [r0, #0]
 8016996:	60c6      	str	r6, [r0, #12]
 8016998:	b13c      	cbz	r4, 80169aa <_Bfree+0x3a>
 801699a:	69eb      	ldr	r3, [r5, #28]
 801699c:	6862      	ldr	r2, [r4, #4]
 801699e:	68db      	ldr	r3, [r3, #12]
 80169a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80169a4:	6021      	str	r1, [r4, #0]
 80169a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80169aa:	bd70      	pop	{r4, r5, r6, pc}
 80169ac:	08017731 	.word	0x08017731
 80169b0:	080177b1 	.word	0x080177b1

080169b4 <__multadd>:
 80169b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169b8:	690d      	ldr	r5, [r1, #16]
 80169ba:	4607      	mov	r7, r0
 80169bc:	460c      	mov	r4, r1
 80169be:	461e      	mov	r6, r3
 80169c0:	f101 0c14 	add.w	ip, r1, #20
 80169c4:	2000      	movs	r0, #0
 80169c6:	f8dc 3000 	ldr.w	r3, [ip]
 80169ca:	b299      	uxth	r1, r3
 80169cc:	fb02 6101 	mla	r1, r2, r1, r6
 80169d0:	0c1e      	lsrs	r6, r3, #16
 80169d2:	0c0b      	lsrs	r3, r1, #16
 80169d4:	fb02 3306 	mla	r3, r2, r6, r3
 80169d8:	b289      	uxth	r1, r1
 80169da:	3001      	adds	r0, #1
 80169dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80169e0:	4285      	cmp	r5, r0
 80169e2:	f84c 1b04 	str.w	r1, [ip], #4
 80169e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80169ea:	dcec      	bgt.n	80169c6 <__multadd+0x12>
 80169ec:	b30e      	cbz	r6, 8016a32 <__multadd+0x7e>
 80169ee:	68a3      	ldr	r3, [r4, #8]
 80169f0:	42ab      	cmp	r3, r5
 80169f2:	dc19      	bgt.n	8016a28 <__multadd+0x74>
 80169f4:	6861      	ldr	r1, [r4, #4]
 80169f6:	4638      	mov	r0, r7
 80169f8:	3101      	adds	r1, #1
 80169fa:	f7ff ff79 	bl	80168f0 <_Balloc>
 80169fe:	4680      	mov	r8, r0
 8016a00:	b928      	cbnz	r0, 8016a0e <__multadd+0x5a>
 8016a02:	4602      	mov	r2, r0
 8016a04:	4b0c      	ldr	r3, [pc, #48]	@ (8016a38 <__multadd+0x84>)
 8016a06:	480d      	ldr	r0, [pc, #52]	@ (8016a3c <__multadd+0x88>)
 8016a08:	21ba      	movs	r1, #186	@ 0xba
 8016a0a:	f000 fd6d 	bl	80174e8 <__assert_func>
 8016a0e:	6922      	ldr	r2, [r4, #16]
 8016a10:	3202      	adds	r2, #2
 8016a12:	f104 010c 	add.w	r1, r4, #12
 8016a16:	0092      	lsls	r2, r2, #2
 8016a18:	300c      	adds	r0, #12
 8016a1a:	f7ff f800 	bl	8015a1e <memcpy>
 8016a1e:	4621      	mov	r1, r4
 8016a20:	4638      	mov	r0, r7
 8016a22:	f7ff ffa5 	bl	8016970 <_Bfree>
 8016a26:	4644      	mov	r4, r8
 8016a28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016a2c:	3501      	adds	r5, #1
 8016a2e:	615e      	str	r6, [r3, #20]
 8016a30:	6125      	str	r5, [r4, #16]
 8016a32:	4620      	mov	r0, r4
 8016a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a38:	080177a0 	.word	0x080177a0
 8016a3c:	080177b1 	.word	0x080177b1

08016a40 <__hi0bits>:
 8016a40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016a44:	4603      	mov	r3, r0
 8016a46:	bf36      	itet	cc
 8016a48:	0403      	lslcc	r3, r0, #16
 8016a4a:	2000      	movcs	r0, #0
 8016a4c:	2010      	movcc	r0, #16
 8016a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016a52:	bf3c      	itt	cc
 8016a54:	021b      	lslcc	r3, r3, #8
 8016a56:	3008      	addcc	r0, #8
 8016a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016a5c:	bf3c      	itt	cc
 8016a5e:	011b      	lslcc	r3, r3, #4
 8016a60:	3004      	addcc	r0, #4
 8016a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016a66:	bf3c      	itt	cc
 8016a68:	009b      	lslcc	r3, r3, #2
 8016a6a:	3002      	addcc	r0, #2
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	db05      	blt.n	8016a7c <__hi0bits+0x3c>
 8016a70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016a74:	f100 0001 	add.w	r0, r0, #1
 8016a78:	bf08      	it	eq
 8016a7a:	2020      	moveq	r0, #32
 8016a7c:	4770      	bx	lr

08016a7e <__lo0bits>:
 8016a7e:	6803      	ldr	r3, [r0, #0]
 8016a80:	4602      	mov	r2, r0
 8016a82:	f013 0007 	ands.w	r0, r3, #7
 8016a86:	d00b      	beq.n	8016aa0 <__lo0bits+0x22>
 8016a88:	07d9      	lsls	r1, r3, #31
 8016a8a:	d421      	bmi.n	8016ad0 <__lo0bits+0x52>
 8016a8c:	0798      	lsls	r0, r3, #30
 8016a8e:	bf49      	itett	mi
 8016a90:	085b      	lsrmi	r3, r3, #1
 8016a92:	089b      	lsrpl	r3, r3, #2
 8016a94:	2001      	movmi	r0, #1
 8016a96:	6013      	strmi	r3, [r2, #0]
 8016a98:	bf5c      	itt	pl
 8016a9a:	6013      	strpl	r3, [r2, #0]
 8016a9c:	2002      	movpl	r0, #2
 8016a9e:	4770      	bx	lr
 8016aa0:	b299      	uxth	r1, r3
 8016aa2:	b909      	cbnz	r1, 8016aa8 <__lo0bits+0x2a>
 8016aa4:	0c1b      	lsrs	r3, r3, #16
 8016aa6:	2010      	movs	r0, #16
 8016aa8:	b2d9      	uxtb	r1, r3
 8016aaa:	b909      	cbnz	r1, 8016ab0 <__lo0bits+0x32>
 8016aac:	3008      	adds	r0, #8
 8016aae:	0a1b      	lsrs	r3, r3, #8
 8016ab0:	0719      	lsls	r1, r3, #28
 8016ab2:	bf04      	itt	eq
 8016ab4:	091b      	lsreq	r3, r3, #4
 8016ab6:	3004      	addeq	r0, #4
 8016ab8:	0799      	lsls	r1, r3, #30
 8016aba:	bf04      	itt	eq
 8016abc:	089b      	lsreq	r3, r3, #2
 8016abe:	3002      	addeq	r0, #2
 8016ac0:	07d9      	lsls	r1, r3, #31
 8016ac2:	d403      	bmi.n	8016acc <__lo0bits+0x4e>
 8016ac4:	085b      	lsrs	r3, r3, #1
 8016ac6:	f100 0001 	add.w	r0, r0, #1
 8016aca:	d003      	beq.n	8016ad4 <__lo0bits+0x56>
 8016acc:	6013      	str	r3, [r2, #0]
 8016ace:	4770      	bx	lr
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	4770      	bx	lr
 8016ad4:	2020      	movs	r0, #32
 8016ad6:	4770      	bx	lr

08016ad8 <__i2b>:
 8016ad8:	b510      	push	{r4, lr}
 8016ada:	460c      	mov	r4, r1
 8016adc:	2101      	movs	r1, #1
 8016ade:	f7ff ff07 	bl	80168f0 <_Balloc>
 8016ae2:	4602      	mov	r2, r0
 8016ae4:	b928      	cbnz	r0, 8016af2 <__i2b+0x1a>
 8016ae6:	4b05      	ldr	r3, [pc, #20]	@ (8016afc <__i2b+0x24>)
 8016ae8:	4805      	ldr	r0, [pc, #20]	@ (8016b00 <__i2b+0x28>)
 8016aea:	f240 1145 	movw	r1, #325	@ 0x145
 8016aee:	f000 fcfb 	bl	80174e8 <__assert_func>
 8016af2:	2301      	movs	r3, #1
 8016af4:	6144      	str	r4, [r0, #20]
 8016af6:	6103      	str	r3, [r0, #16]
 8016af8:	bd10      	pop	{r4, pc}
 8016afa:	bf00      	nop
 8016afc:	080177a0 	.word	0x080177a0
 8016b00:	080177b1 	.word	0x080177b1

08016b04 <__multiply>:
 8016b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b08:	4617      	mov	r7, r2
 8016b0a:	690a      	ldr	r2, [r1, #16]
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	bfa8      	it	ge
 8016b12:	463b      	movge	r3, r7
 8016b14:	4689      	mov	r9, r1
 8016b16:	bfa4      	itt	ge
 8016b18:	460f      	movge	r7, r1
 8016b1a:	4699      	movge	r9, r3
 8016b1c:	693d      	ldr	r5, [r7, #16]
 8016b1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016b22:	68bb      	ldr	r3, [r7, #8]
 8016b24:	6879      	ldr	r1, [r7, #4]
 8016b26:	eb05 060a 	add.w	r6, r5, sl
 8016b2a:	42b3      	cmp	r3, r6
 8016b2c:	b085      	sub	sp, #20
 8016b2e:	bfb8      	it	lt
 8016b30:	3101      	addlt	r1, #1
 8016b32:	f7ff fedd 	bl	80168f0 <_Balloc>
 8016b36:	b930      	cbnz	r0, 8016b46 <__multiply+0x42>
 8016b38:	4602      	mov	r2, r0
 8016b3a:	4b41      	ldr	r3, [pc, #260]	@ (8016c40 <__multiply+0x13c>)
 8016b3c:	4841      	ldr	r0, [pc, #260]	@ (8016c44 <__multiply+0x140>)
 8016b3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016b42:	f000 fcd1 	bl	80174e8 <__assert_func>
 8016b46:	f100 0414 	add.w	r4, r0, #20
 8016b4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016b4e:	4623      	mov	r3, r4
 8016b50:	2200      	movs	r2, #0
 8016b52:	4573      	cmp	r3, lr
 8016b54:	d320      	bcc.n	8016b98 <__multiply+0x94>
 8016b56:	f107 0814 	add.w	r8, r7, #20
 8016b5a:	f109 0114 	add.w	r1, r9, #20
 8016b5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016b62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016b66:	9302      	str	r3, [sp, #8]
 8016b68:	1beb      	subs	r3, r5, r7
 8016b6a:	3b15      	subs	r3, #21
 8016b6c:	f023 0303 	bic.w	r3, r3, #3
 8016b70:	3304      	adds	r3, #4
 8016b72:	3715      	adds	r7, #21
 8016b74:	42bd      	cmp	r5, r7
 8016b76:	bf38      	it	cc
 8016b78:	2304      	movcc	r3, #4
 8016b7a:	9301      	str	r3, [sp, #4]
 8016b7c:	9b02      	ldr	r3, [sp, #8]
 8016b7e:	9103      	str	r1, [sp, #12]
 8016b80:	428b      	cmp	r3, r1
 8016b82:	d80c      	bhi.n	8016b9e <__multiply+0x9a>
 8016b84:	2e00      	cmp	r6, #0
 8016b86:	dd03      	ble.n	8016b90 <__multiply+0x8c>
 8016b88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d055      	beq.n	8016c3c <__multiply+0x138>
 8016b90:	6106      	str	r6, [r0, #16]
 8016b92:	b005      	add	sp, #20
 8016b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b98:	f843 2b04 	str.w	r2, [r3], #4
 8016b9c:	e7d9      	b.n	8016b52 <__multiply+0x4e>
 8016b9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016ba2:	f1ba 0f00 	cmp.w	sl, #0
 8016ba6:	d01f      	beq.n	8016be8 <__multiply+0xe4>
 8016ba8:	46c4      	mov	ip, r8
 8016baa:	46a1      	mov	r9, r4
 8016bac:	2700      	movs	r7, #0
 8016bae:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016bb2:	f8d9 3000 	ldr.w	r3, [r9]
 8016bb6:	fa1f fb82 	uxth.w	fp, r2
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8016bc0:	443b      	add	r3, r7
 8016bc2:	f8d9 7000 	ldr.w	r7, [r9]
 8016bc6:	0c12      	lsrs	r2, r2, #16
 8016bc8:	0c3f      	lsrs	r7, r7, #16
 8016bca:	fb0a 7202 	mla	r2, sl, r2, r7
 8016bce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016bd2:	b29b      	uxth	r3, r3
 8016bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016bd8:	4565      	cmp	r5, ip
 8016bda:	f849 3b04 	str.w	r3, [r9], #4
 8016bde:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016be2:	d8e4      	bhi.n	8016bae <__multiply+0xaa>
 8016be4:	9b01      	ldr	r3, [sp, #4]
 8016be6:	50e7      	str	r7, [r4, r3]
 8016be8:	9b03      	ldr	r3, [sp, #12]
 8016bea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016bee:	3104      	adds	r1, #4
 8016bf0:	f1b9 0f00 	cmp.w	r9, #0
 8016bf4:	d020      	beq.n	8016c38 <__multiply+0x134>
 8016bf6:	6823      	ldr	r3, [r4, #0]
 8016bf8:	4647      	mov	r7, r8
 8016bfa:	46a4      	mov	ip, r4
 8016bfc:	f04f 0a00 	mov.w	sl, #0
 8016c00:	f8b7 b000 	ldrh.w	fp, [r7]
 8016c04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016c08:	fb09 220b 	mla	r2, r9, fp, r2
 8016c0c:	4452      	add	r2, sl
 8016c0e:	b29b      	uxth	r3, r3
 8016c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c14:	f84c 3b04 	str.w	r3, [ip], #4
 8016c18:	f857 3b04 	ldr.w	r3, [r7], #4
 8016c1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c20:	f8bc 3000 	ldrh.w	r3, [ip]
 8016c24:	fb09 330a 	mla	r3, r9, sl, r3
 8016c28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016c2c:	42bd      	cmp	r5, r7
 8016c2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c32:	d8e5      	bhi.n	8016c00 <__multiply+0xfc>
 8016c34:	9a01      	ldr	r2, [sp, #4]
 8016c36:	50a3      	str	r3, [r4, r2]
 8016c38:	3404      	adds	r4, #4
 8016c3a:	e79f      	b.n	8016b7c <__multiply+0x78>
 8016c3c:	3e01      	subs	r6, #1
 8016c3e:	e7a1      	b.n	8016b84 <__multiply+0x80>
 8016c40:	080177a0 	.word	0x080177a0
 8016c44:	080177b1 	.word	0x080177b1

08016c48 <__pow5mult>:
 8016c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c4c:	4615      	mov	r5, r2
 8016c4e:	f012 0203 	ands.w	r2, r2, #3
 8016c52:	4607      	mov	r7, r0
 8016c54:	460e      	mov	r6, r1
 8016c56:	d007      	beq.n	8016c68 <__pow5mult+0x20>
 8016c58:	4c25      	ldr	r4, [pc, #148]	@ (8016cf0 <__pow5mult+0xa8>)
 8016c5a:	3a01      	subs	r2, #1
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016c62:	f7ff fea7 	bl	80169b4 <__multadd>
 8016c66:	4606      	mov	r6, r0
 8016c68:	10ad      	asrs	r5, r5, #2
 8016c6a:	d03d      	beq.n	8016ce8 <__pow5mult+0xa0>
 8016c6c:	69fc      	ldr	r4, [r7, #28]
 8016c6e:	b97c      	cbnz	r4, 8016c90 <__pow5mult+0x48>
 8016c70:	2010      	movs	r0, #16
 8016c72:	f7ff fd87 	bl	8016784 <malloc>
 8016c76:	4602      	mov	r2, r0
 8016c78:	61f8      	str	r0, [r7, #28]
 8016c7a:	b928      	cbnz	r0, 8016c88 <__pow5mult+0x40>
 8016c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8016cf4 <__pow5mult+0xac>)
 8016c7e:	481e      	ldr	r0, [pc, #120]	@ (8016cf8 <__pow5mult+0xb0>)
 8016c80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016c84:	f000 fc30 	bl	80174e8 <__assert_func>
 8016c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c8c:	6004      	str	r4, [r0, #0]
 8016c8e:	60c4      	str	r4, [r0, #12]
 8016c90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016c98:	b94c      	cbnz	r4, 8016cae <__pow5mult+0x66>
 8016c9a:	f240 2171 	movw	r1, #625	@ 0x271
 8016c9e:	4638      	mov	r0, r7
 8016ca0:	f7ff ff1a 	bl	8016ad8 <__i2b>
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016caa:	4604      	mov	r4, r0
 8016cac:	6003      	str	r3, [r0, #0]
 8016cae:	f04f 0900 	mov.w	r9, #0
 8016cb2:	07eb      	lsls	r3, r5, #31
 8016cb4:	d50a      	bpl.n	8016ccc <__pow5mult+0x84>
 8016cb6:	4631      	mov	r1, r6
 8016cb8:	4622      	mov	r2, r4
 8016cba:	4638      	mov	r0, r7
 8016cbc:	f7ff ff22 	bl	8016b04 <__multiply>
 8016cc0:	4631      	mov	r1, r6
 8016cc2:	4680      	mov	r8, r0
 8016cc4:	4638      	mov	r0, r7
 8016cc6:	f7ff fe53 	bl	8016970 <_Bfree>
 8016cca:	4646      	mov	r6, r8
 8016ccc:	106d      	asrs	r5, r5, #1
 8016cce:	d00b      	beq.n	8016ce8 <__pow5mult+0xa0>
 8016cd0:	6820      	ldr	r0, [r4, #0]
 8016cd2:	b938      	cbnz	r0, 8016ce4 <__pow5mult+0x9c>
 8016cd4:	4622      	mov	r2, r4
 8016cd6:	4621      	mov	r1, r4
 8016cd8:	4638      	mov	r0, r7
 8016cda:	f7ff ff13 	bl	8016b04 <__multiply>
 8016cde:	6020      	str	r0, [r4, #0]
 8016ce0:	f8c0 9000 	str.w	r9, [r0]
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	e7e4      	b.n	8016cb2 <__pow5mult+0x6a>
 8016ce8:	4630      	mov	r0, r6
 8016cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cee:	bf00      	nop
 8016cf0:	08017864 	.word	0x08017864
 8016cf4:	08017731 	.word	0x08017731
 8016cf8:	080177b1 	.word	0x080177b1

08016cfc <__lshift>:
 8016cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d00:	460c      	mov	r4, r1
 8016d02:	6849      	ldr	r1, [r1, #4]
 8016d04:	6923      	ldr	r3, [r4, #16]
 8016d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016d0a:	68a3      	ldr	r3, [r4, #8]
 8016d0c:	4607      	mov	r7, r0
 8016d0e:	4691      	mov	r9, r2
 8016d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016d14:	f108 0601 	add.w	r6, r8, #1
 8016d18:	42b3      	cmp	r3, r6
 8016d1a:	db0b      	blt.n	8016d34 <__lshift+0x38>
 8016d1c:	4638      	mov	r0, r7
 8016d1e:	f7ff fde7 	bl	80168f0 <_Balloc>
 8016d22:	4605      	mov	r5, r0
 8016d24:	b948      	cbnz	r0, 8016d3a <__lshift+0x3e>
 8016d26:	4602      	mov	r2, r0
 8016d28:	4b28      	ldr	r3, [pc, #160]	@ (8016dcc <__lshift+0xd0>)
 8016d2a:	4829      	ldr	r0, [pc, #164]	@ (8016dd0 <__lshift+0xd4>)
 8016d2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016d30:	f000 fbda 	bl	80174e8 <__assert_func>
 8016d34:	3101      	adds	r1, #1
 8016d36:	005b      	lsls	r3, r3, #1
 8016d38:	e7ee      	b.n	8016d18 <__lshift+0x1c>
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	f100 0114 	add.w	r1, r0, #20
 8016d40:	f100 0210 	add.w	r2, r0, #16
 8016d44:	4618      	mov	r0, r3
 8016d46:	4553      	cmp	r3, sl
 8016d48:	db33      	blt.n	8016db2 <__lshift+0xb6>
 8016d4a:	6920      	ldr	r0, [r4, #16]
 8016d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016d50:	f104 0314 	add.w	r3, r4, #20
 8016d54:	f019 091f 	ands.w	r9, r9, #31
 8016d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016d5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016d60:	d02b      	beq.n	8016dba <__lshift+0xbe>
 8016d62:	f1c9 0e20 	rsb	lr, r9, #32
 8016d66:	468a      	mov	sl, r1
 8016d68:	2200      	movs	r2, #0
 8016d6a:	6818      	ldr	r0, [r3, #0]
 8016d6c:	fa00 f009 	lsl.w	r0, r0, r9
 8016d70:	4310      	orrs	r0, r2
 8016d72:	f84a 0b04 	str.w	r0, [sl], #4
 8016d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d7a:	459c      	cmp	ip, r3
 8016d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016d80:	d8f3      	bhi.n	8016d6a <__lshift+0x6e>
 8016d82:	ebac 0304 	sub.w	r3, ip, r4
 8016d86:	3b15      	subs	r3, #21
 8016d88:	f023 0303 	bic.w	r3, r3, #3
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	f104 0015 	add.w	r0, r4, #21
 8016d92:	4560      	cmp	r0, ip
 8016d94:	bf88      	it	hi
 8016d96:	2304      	movhi	r3, #4
 8016d98:	50ca      	str	r2, [r1, r3]
 8016d9a:	b10a      	cbz	r2, 8016da0 <__lshift+0xa4>
 8016d9c:	f108 0602 	add.w	r6, r8, #2
 8016da0:	3e01      	subs	r6, #1
 8016da2:	4638      	mov	r0, r7
 8016da4:	612e      	str	r6, [r5, #16]
 8016da6:	4621      	mov	r1, r4
 8016da8:	f7ff fde2 	bl	8016970 <_Bfree>
 8016dac:	4628      	mov	r0, r5
 8016dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016db6:	3301      	adds	r3, #1
 8016db8:	e7c5      	b.n	8016d46 <__lshift+0x4a>
 8016dba:	3904      	subs	r1, #4
 8016dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016dc4:	459c      	cmp	ip, r3
 8016dc6:	d8f9      	bhi.n	8016dbc <__lshift+0xc0>
 8016dc8:	e7ea      	b.n	8016da0 <__lshift+0xa4>
 8016dca:	bf00      	nop
 8016dcc:	080177a0 	.word	0x080177a0
 8016dd0:	080177b1 	.word	0x080177b1

08016dd4 <__mcmp>:
 8016dd4:	690a      	ldr	r2, [r1, #16]
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	6900      	ldr	r0, [r0, #16]
 8016dda:	1a80      	subs	r0, r0, r2
 8016ddc:	b530      	push	{r4, r5, lr}
 8016dde:	d10e      	bne.n	8016dfe <__mcmp+0x2a>
 8016de0:	3314      	adds	r3, #20
 8016de2:	3114      	adds	r1, #20
 8016de4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016de8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016dec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016df0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016df4:	4295      	cmp	r5, r2
 8016df6:	d003      	beq.n	8016e00 <__mcmp+0x2c>
 8016df8:	d205      	bcs.n	8016e06 <__mcmp+0x32>
 8016dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8016dfe:	bd30      	pop	{r4, r5, pc}
 8016e00:	42a3      	cmp	r3, r4
 8016e02:	d3f3      	bcc.n	8016dec <__mcmp+0x18>
 8016e04:	e7fb      	b.n	8016dfe <__mcmp+0x2a>
 8016e06:	2001      	movs	r0, #1
 8016e08:	e7f9      	b.n	8016dfe <__mcmp+0x2a>
	...

08016e0c <__mdiff>:
 8016e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e10:	4689      	mov	r9, r1
 8016e12:	4606      	mov	r6, r0
 8016e14:	4611      	mov	r1, r2
 8016e16:	4648      	mov	r0, r9
 8016e18:	4614      	mov	r4, r2
 8016e1a:	f7ff ffdb 	bl	8016dd4 <__mcmp>
 8016e1e:	1e05      	subs	r5, r0, #0
 8016e20:	d112      	bne.n	8016e48 <__mdiff+0x3c>
 8016e22:	4629      	mov	r1, r5
 8016e24:	4630      	mov	r0, r6
 8016e26:	f7ff fd63 	bl	80168f0 <_Balloc>
 8016e2a:	4602      	mov	r2, r0
 8016e2c:	b928      	cbnz	r0, 8016e3a <__mdiff+0x2e>
 8016e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8016f2c <__mdiff+0x120>)
 8016e30:	f240 2137 	movw	r1, #567	@ 0x237
 8016e34:	483e      	ldr	r0, [pc, #248]	@ (8016f30 <__mdiff+0x124>)
 8016e36:	f000 fb57 	bl	80174e8 <__assert_func>
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016e40:	4610      	mov	r0, r2
 8016e42:	b003      	add	sp, #12
 8016e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e48:	bfbc      	itt	lt
 8016e4a:	464b      	movlt	r3, r9
 8016e4c:	46a1      	movlt	r9, r4
 8016e4e:	4630      	mov	r0, r6
 8016e50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016e54:	bfba      	itte	lt
 8016e56:	461c      	movlt	r4, r3
 8016e58:	2501      	movlt	r5, #1
 8016e5a:	2500      	movge	r5, #0
 8016e5c:	f7ff fd48 	bl	80168f0 <_Balloc>
 8016e60:	4602      	mov	r2, r0
 8016e62:	b918      	cbnz	r0, 8016e6c <__mdiff+0x60>
 8016e64:	4b31      	ldr	r3, [pc, #196]	@ (8016f2c <__mdiff+0x120>)
 8016e66:	f240 2145 	movw	r1, #581	@ 0x245
 8016e6a:	e7e3      	b.n	8016e34 <__mdiff+0x28>
 8016e6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016e70:	6926      	ldr	r6, [r4, #16]
 8016e72:	60c5      	str	r5, [r0, #12]
 8016e74:	f109 0310 	add.w	r3, r9, #16
 8016e78:	f109 0514 	add.w	r5, r9, #20
 8016e7c:	f104 0e14 	add.w	lr, r4, #20
 8016e80:	f100 0b14 	add.w	fp, r0, #20
 8016e84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016e88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016e8c:	9301      	str	r3, [sp, #4]
 8016e8e:	46d9      	mov	r9, fp
 8016e90:	f04f 0c00 	mov.w	ip, #0
 8016e94:	9b01      	ldr	r3, [sp, #4]
 8016e96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016e9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016e9e:	9301      	str	r3, [sp, #4]
 8016ea0:	fa1f f38a 	uxth.w	r3, sl
 8016ea4:	4619      	mov	r1, r3
 8016ea6:	b283      	uxth	r3, r0
 8016ea8:	1acb      	subs	r3, r1, r3
 8016eaa:	0c00      	lsrs	r0, r0, #16
 8016eac:	4463      	add	r3, ip
 8016eae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016eb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016ebc:	4576      	cmp	r6, lr
 8016ebe:	f849 3b04 	str.w	r3, [r9], #4
 8016ec2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016ec6:	d8e5      	bhi.n	8016e94 <__mdiff+0x88>
 8016ec8:	1b33      	subs	r3, r6, r4
 8016eca:	3b15      	subs	r3, #21
 8016ecc:	f023 0303 	bic.w	r3, r3, #3
 8016ed0:	3415      	adds	r4, #21
 8016ed2:	3304      	adds	r3, #4
 8016ed4:	42a6      	cmp	r6, r4
 8016ed6:	bf38      	it	cc
 8016ed8:	2304      	movcc	r3, #4
 8016eda:	441d      	add	r5, r3
 8016edc:	445b      	add	r3, fp
 8016ede:	461e      	mov	r6, r3
 8016ee0:	462c      	mov	r4, r5
 8016ee2:	4544      	cmp	r4, r8
 8016ee4:	d30e      	bcc.n	8016f04 <__mdiff+0xf8>
 8016ee6:	f108 0103 	add.w	r1, r8, #3
 8016eea:	1b49      	subs	r1, r1, r5
 8016eec:	f021 0103 	bic.w	r1, r1, #3
 8016ef0:	3d03      	subs	r5, #3
 8016ef2:	45a8      	cmp	r8, r5
 8016ef4:	bf38      	it	cc
 8016ef6:	2100      	movcc	r1, #0
 8016ef8:	440b      	add	r3, r1
 8016efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016efe:	b191      	cbz	r1, 8016f26 <__mdiff+0x11a>
 8016f00:	6117      	str	r7, [r2, #16]
 8016f02:	e79d      	b.n	8016e40 <__mdiff+0x34>
 8016f04:	f854 1b04 	ldr.w	r1, [r4], #4
 8016f08:	46e6      	mov	lr, ip
 8016f0a:	0c08      	lsrs	r0, r1, #16
 8016f0c:	fa1c fc81 	uxtah	ip, ip, r1
 8016f10:	4471      	add	r1, lr
 8016f12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016f16:	b289      	uxth	r1, r1
 8016f18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016f1c:	f846 1b04 	str.w	r1, [r6], #4
 8016f20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016f24:	e7dd      	b.n	8016ee2 <__mdiff+0xd6>
 8016f26:	3f01      	subs	r7, #1
 8016f28:	e7e7      	b.n	8016efa <__mdiff+0xee>
 8016f2a:	bf00      	nop
 8016f2c:	080177a0 	.word	0x080177a0
 8016f30:	080177b1 	.word	0x080177b1

08016f34 <__d2b>:
 8016f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f38:	460f      	mov	r7, r1
 8016f3a:	2101      	movs	r1, #1
 8016f3c:	ec59 8b10 	vmov	r8, r9, d0
 8016f40:	4616      	mov	r6, r2
 8016f42:	f7ff fcd5 	bl	80168f0 <_Balloc>
 8016f46:	4604      	mov	r4, r0
 8016f48:	b930      	cbnz	r0, 8016f58 <__d2b+0x24>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	4b23      	ldr	r3, [pc, #140]	@ (8016fdc <__d2b+0xa8>)
 8016f4e:	4824      	ldr	r0, [pc, #144]	@ (8016fe0 <__d2b+0xac>)
 8016f50:	f240 310f 	movw	r1, #783	@ 0x30f
 8016f54:	f000 fac8 	bl	80174e8 <__assert_func>
 8016f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f60:	b10d      	cbz	r5, 8016f66 <__d2b+0x32>
 8016f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	f1b8 0300 	subs.w	r3, r8, #0
 8016f6c:	d023      	beq.n	8016fb6 <__d2b+0x82>
 8016f6e:	4668      	mov	r0, sp
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	f7ff fd84 	bl	8016a7e <__lo0bits>
 8016f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016f7a:	b1d0      	cbz	r0, 8016fb2 <__d2b+0x7e>
 8016f7c:	f1c0 0320 	rsb	r3, r0, #32
 8016f80:	fa02 f303 	lsl.w	r3, r2, r3
 8016f84:	430b      	orrs	r3, r1
 8016f86:	40c2      	lsrs	r2, r0
 8016f88:	6163      	str	r3, [r4, #20]
 8016f8a:	9201      	str	r2, [sp, #4]
 8016f8c:	9b01      	ldr	r3, [sp, #4]
 8016f8e:	61a3      	str	r3, [r4, #24]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	bf0c      	ite	eq
 8016f94:	2201      	moveq	r2, #1
 8016f96:	2202      	movne	r2, #2
 8016f98:	6122      	str	r2, [r4, #16]
 8016f9a:	b1a5      	cbz	r5, 8016fc6 <__d2b+0x92>
 8016f9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016fa0:	4405      	add	r5, r0
 8016fa2:	603d      	str	r5, [r7, #0]
 8016fa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016fa8:	6030      	str	r0, [r6, #0]
 8016faa:	4620      	mov	r0, r4
 8016fac:	b003      	add	sp, #12
 8016fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fb2:	6161      	str	r1, [r4, #20]
 8016fb4:	e7ea      	b.n	8016f8c <__d2b+0x58>
 8016fb6:	a801      	add	r0, sp, #4
 8016fb8:	f7ff fd61 	bl	8016a7e <__lo0bits>
 8016fbc:	9b01      	ldr	r3, [sp, #4]
 8016fbe:	6163      	str	r3, [r4, #20]
 8016fc0:	3020      	adds	r0, #32
 8016fc2:	2201      	movs	r2, #1
 8016fc4:	e7e8      	b.n	8016f98 <__d2b+0x64>
 8016fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016fca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016fce:	6038      	str	r0, [r7, #0]
 8016fd0:	6918      	ldr	r0, [r3, #16]
 8016fd2:	f7ff fd35 	bl	8016a40 <__hi0bits>
 8016fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016fda:	e7e5      	b.n	8016fa8 <__d2b+0x74>
 8016fdc:	080177a0 	.word	0x080177a0
 8016fe0:	080177b1 	.word	0x080177b1

08016fe4 <__sfputc_r>:
 8016fe4:	6893      	ldr	r3, [r2, #8]
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	b410      	push	{r4}
 8016fec:	6093      	str	r3, [r2, #8]
 8016fee:	da08      	bge.n	8017002 <__sfputc_r+0x1e>
 8016ff0:	6994      	ldr	r4, [r2, #24]
 8016ff2:	42a3      	cmp	r3, r4
 8016ff4:	db01      	blt.n	8016ffa <__sfputc_r+0x16>
 8016ff6:	290a      	cmp	r1, #10
 8016ff8:	d103      	bne.n	8017002 <__sfputc_r+0x1e>
 8016ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ffe:	f7fe bbe6 	b.w	80157ce <__swbuf_r>
 8017002:	6813      	ldr	r3, [r2, #0]
 8017004:	1c58      	adds	r0, r3, #1
 8017006:	6010      	str	r0, [r2, #0]
 8017008:	7019      	strb	r1, [r3, #0]
 801700a:	4608      	mov	r0, r1
 801700c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017010:	4770      	bx	lr

08017012 <__sfputs_r>:
 8017012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017014:	4606      	mov	r6, r0
 8017016:	460f      	mov	r7, r1
 8017018:	4614      	mov	r4, r2
 801701a:	18d5      	adds	r5, r2, r3
 801701c:	42ac      	cmp	r4, r5
 801701e:	d101      	bne.n	8017024 <__sfputs_r+0x12>
 8017020:	2000      	movs	r0, #0
 8017022:	e007      	b.n	8017034 <__sfputs_r+0x22>
 8017024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017028:	463a      	mov	r2, r7
 801702a:	4630      	mov	r0, r6
 801702c:	f7ff ffda 	bl	8016fe4 <__sfputc_r>
 8017030:	1c43      	adds	r3, r0, #1
 8017032:	d1f3      	bne.n	801701c <__sfputs_r+0xa>
 8017034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017038 <_vfiprintf_r>:
 8017038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801703c:	460d      	mov	r5, r1
 801703e:	b09d      	sub	sp, #116	@ 0x74
 8017040:	4614      	mov	r4, r2
 8017042:	4698      	mov	r8, r3
 8017044:	4606      	mov	r6, r0
 8017046:	b118      	cbz	r0, 8017050 <_vfiprintf_r+0x18>
 8017048:	6a03      	ldr	r3, [r0, #32]
 801704a:	b90b      	cbnz	r3, 8017050 <_vfiprintf_r+0x18>
 801704c:	f7fe fad6 	bl	80155fc <__sinit>
 8017050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017052:	07d9      	lsls	r1, r3, #31
 8017054:	d405      	bmi.n	8017062 <_vfiprintf_r+0x2a>
 8017056:	89ab      	ldrh	r3, [r5, #12]
 8017058:	059a      	lsls	r2, r3, #22
 801705a:	d402      	bmi.n	8017062 <_vfiprintf_r+0x2a>
 801705c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801705e:	f7fe fcdc 	bl	8015a1a <__retarget_lock_acquire_recursive>
 8017062:	89ab      	ldrh	r3, [r5, #12]
 8017064:	071b      	lsls	r3, r3, #28
 8017066:	d501      	bpl.n	801706c <_vfiprintf_r+0x34>
 8017068:	692b      	ldr	r3, [r5, #16]
 801706a:	b99b      	cbnz	r3, 8017094 <_vfiprintf_r+0x5c>
 801706c:	4629      	mov	r1, r5
 801706e:	4630      	mov	r0, r6
 8017070:	f7fe fbec 	bl	801584c <__swsetup_r>
 8017074:	b170      	cbz	r0, 8017094 <_vfiprintf_r+0x5c>
 8017076:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017078:	07dc      	lsls	r4, r3, #31
 801707a:	d504      	bpl.n	8017086 <_vfiprintf_r+0x4e>
 801707c:	f04f 30ff 	mov.w	r0, #4294967295
 8017080:	b01d      	add	sp, #116	@ 0x74
 8017082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017086:	89ab      	ldrh	r3, [r5, #12]
 8017088:	0598      	lsls	r0, r3, #22
 801708a:	d4f7      	bmi.n	801707c <_vfiprintf_r+0x44>
 801708c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801708e:	f7fe fcc5 	bl	8015a1c <__retarget_lock_release_recursive>
 8017092:	e7f3      	b.n	801707c <_vfiprintf_r+0x44>
 8017094:	2300      	movs	r3, #0
 8017096:	9309      	str	r3, [sp, #36]	@ 0x24
 8017098:	2320      	movs	r3, #32
 801709a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801709e:	f8cd 800c 	str.w	r8, [sp, #12]
 80170a2:	2330      	movs	r3, #48	@ 0x30
 80170a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017254 <_vfiprintf_r+0x21c>
 80170a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170ac:	f04f 0901 	mov.w	r9, #1
 80170b0:	4623      	mov	r3, r4
 80170b2:	469a      	mov	sl, r3
 80170b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170b8:	b10a      	cbz	r2, 80170be <_vfiprintf_r+0x86>
 80170ba:	2a25      	cmp	r2, #37	@ 0x25
 80170bc:	d1f9      	bne.n	80170b2 <_vfiprintf_r+0x7a>
 80170be:	ebba 0b04 	subs.w	fp, sl, r4
 80170c2:	d00b      	beq.n	80170dc <_vfiprintf_r+0xa4>
 80170c4:	465b      	mov	r3, fp
 80170c6:	4622      	mov	r2, r4
 80170c8:	4629      	mov	r1, r5
 80170ca:	4630      	mov	r0, r6
 80170cc:	f7ff ffa1 	bl	8017012 <__sfputs_r>
 80170d0:	3001      	adds	r0, #1
 80170d2:	f000 80a7 	beq.w	8017224 <_vfiprintf_r+0x1ec>
 80170d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170d8:	445a      	add	r2, fp
 80170da:	9209      	str	r2, [sp, #36]	@ 0x24
 80170dc:	f89a 3000 	ldrb.w	r3, [sl]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f000 809f 	beq.w	8017224 <_vfiprintf_r+0x1ec>
 80170e6:	2300      	movs	r3, #0
 80170e8:	f04f 32ff 	mov.w	r2, #4294967295
 80170ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170f0:	f10a 0a01 	add.w	sl, sl, #1
 80170f4:	9304      	str	r3, [sp, #16]
 80170f6:	9307      	str	r3, [sp, #28]
 80170f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80170fe:	4654      	mov	r4, sl
 8017100:	2205      	movs	r2, #5
 8017102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017106:	4853      	ldr	r0, [pc, #332]	@ (8017254 <_vfiprintf_r+0x21c>)
 8017108:	f7e9 f882 	bl	8000210 <memchr>
 801710c:	9a04      	ldr	r2, [sp, #16]
 801710e:	b9d8      	cbnz	r0, 8017148 <_vfiprintf_r+0x110>
 8017110:	06d1      	lsls	r1, r2, #27
 8017112:	bf44      	itt	mi
 8017114:	2320      	movmi	r3, #32
 8017116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801711a:	0713      	lsls	r3, r2, #28
 801711c:	bf44      	itt	mi
 801711e:	232b      	movmi	r3, #43	@ 0x2b
 8017120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017124:	f89a 3000 	ldrb.w	r3, [sl]
 8017128:	2b2a      	cmp	r3, #42	@ 0x2a
 801712a:	d015      	beq.n	8017158 <_vfiprintf_r+0x120>
 801712c:	9a07      	ldr	r2, [sp, #28]
 801712e:	4654      	mov	r4, sl
 8017130:	2000      	movs	r0, #0
 8017132:	f04f 0c0a 	mov.w	ip, #10
 8017136:	4621      	mov	r1, r4
 8017138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801713c:	3b30      	subs	r3, #48	@ 0x30
 801713e:	2b09      	cmp	r3, #9
 8017140:	d94b      	bls.n	80171da <_vfiprintf_r+0x1a2>
 8017142:	b1b0      	cbz	r0, 8017172 <_vfiprintf_r+0x13a>
 8017144:	9207      	str	r2, [sp, #28]
 8017146:	e014      	b.n	8017172 <_vfiprintf_r+0x13a>
 8017148:	eba0 0308 	sub.w	r3, r0, r8
 801714c:	fa09 f303 	lsl.w	r3, r9, r3
 8017150:	4313      	orrs	r3, r2
 8017152:	9304      	str	r3, [sp, #16]
 8017154:	46a2      	mov	sl, r4
 8017156:	e7d2      	b.n	80170fe <_vfiprintf_r+0xc6>
 8017158:	9b03      	ldr	r3, [sp, #12]
 801715a:	1d19      	adds	r1, r3, #4
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	9103      	str	r1, [sp, #12]
 8017160:	2b00      	cmp	r3, #0
 8017162:	bfbb      	ittet	lt
 8017164:	425b      	neglt	r3, r3
 8017166:	f042 0202 	orrlt.w	r2, r2, #2
 801716a:	9307      	strge	r3, [sp, #28]
 801716c:	9307      	strlt	r3, [sp, #28]
 801716e:	bfb8      	it	lt
 8017170:	9204      	strlt	r2, [sp, #16]
 8017172:	7823      	ldrb	r3, [r4, #0]
 8017174:	2b2e      	cmp	r3, #46	@ 0x2e
 8017176:	d10a      	bne.n	801718e <_vfiprintf_r+0x156>
 8017178:	7863      	ldrb	r3, [r4, #1]
 801717a:	2b2a      	cmp	r3, #42	@ 0x2a
 801717c:	d132      	bne.n	80171e4 <_vfiprintf_r+0x1ac>
 801717e:	9b03      	ldr	r3, [sp, #12]
 8017180:	1d1a      	adds	r2, r3, #4
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	9203      	str	r2, [sp, #12]
 8017186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801718a:	3402      	adds	r4, #2
 801718c:	9305      	str	r3, [sp, #20]
 801718e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017264 <_vfiprintf_r+0x22c>
 8017192:	7821      	ldrb	r1, [r4, #0]
 8017194:	2203      	movs	r2, #3
 8017196:	4650      	mov	r0, sl
 8017198:	f7e9 f83a 	bl	8000210 <memchr>
 801719c:	b138      	cbz	r0, 80171ae <_vfiprintf_r+0x176>
 801719e:	9b04      	ldr	r3, [sp, #16]
 80171a0:	eba0 000a 	sub.w	r0, r0, sl
 80171a4:	2240      	movs	r2, #64	@ 0x40
 80171a6:	4082      	lsls	r2, r0
 80171a8:	4313      	orrs	r3, r2
 80171aa:	3401      	adds	r4, #1
 80171ac:	9304      	str	r3, [sp, #16]
 80171ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171b2:	4829      	ldr	r0, [pc, #164]	@ (8017258 <_vfiprintf_r+0x220>)
 80171b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171b8:	2206      	movs	r2, #6
 80171ba:	f7e9 f829 	bl	8000210 <memchr>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d03f      	beq.n	8017242 <_vfiprintf_r+0x20a>
 80171c2:	4b26      	ldr	r3, [pc, #152]	@ (801725c <_vfiprintf_r+0x224>)
 80171c4:	bb1b      	cbnz	r3, 801720e <_vfiprintf_r+0x1d6>
 80171c6:	9b03      	ldr	r3, [sp, #12]
 80171c8:	3307      	adds	r3, #7
 80171ca:	f023 0307 	bic.w	r3, r3, #7
 80171ce:	3308      	adds	r3, #8
 80171d0:	9303      	str	r3, [sp, #12]
 80171d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171d4:	443b      	add	r3, r7
 80171d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80171d8:	e76a      	b.n	80170b0 <_vfiprintf_r+0x78>
 80171da:	fb0c 3202 	mla	r2, ip, r2, r3
 80171de:	460c      	mov	r4, r1
 80171e0:	2001      	movs	r0, #1
 80171e2:	e7a8      	b.n	8017136 <_vfiprintf_r+0xfe>
 80171e4:	2300      	movs	r3, #0
 80171e6:	3401      	adds	r4, #1
 80171e8:	9305      	str	r3, [sp, #20]
 80171ea:	4619      	mov	r1, r3
 80171ec:	f04f 0c0a 	mov.w	ip, #10
 80171f0:	4620      	mov	r0, r4
 80171f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171f6:	3a30      	subs	r2, #48	@ 0x30
 80171f8:	2a09      	cmp	r2, #9
 80171fa:	d903      	bls.n	8017204 <_vfiprintf_r+0x1cc>
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d0c6      	beq.n	801718e <_vfiprintf_r+0x156>
 8017200:	9105      	str	r1, [sp, #20]
 8017202:	e7c4      	b.n	801718e <_vfiprintf_r+0x156>
 8017204:	fb0c 2101 	mla	r1, ip, r1, r2
 8017208:	4604      	mov	r4, r0
 801720a:	2301      	movs	r3, #1
 801720c:	e7f0      	b.n	80171f0 <_vfiprintf_r+0x1b8>
 801720e:	ab03      	add	r3, sp, #12
 8017210:	9300      	str	r3, [sp, #0]
 8017212:	462a      	mov	r2, r5
 8017214:	4b12      	ldr	r3, [pc, #72]	@ (8017260 <_vfiprintf_r+0x228>)
 8017216:	a904      	add	r1, sp, #16
 8017218:	4630      	mov	r0, r6
 801721a:	f7fd fdad 	bl	8014d78 <_printf_float>
 801721e:	4607      	mov	r7, r0
 8017220:	1c78      	adds	r0, r7, #1
 8017222:	d1d6      	bne.n	80171d2 <_vfiprintf_r+0x19a>
 8017224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017226:	07d9      	lsls	r1, r3, #31
 8017228:	d405      	bmi.n	8017236 <_vfiprintf_r+0x1fe>
 801722a:	89ab      	ldrh	r3, [r5, #12]
 801722c:	059a      	lsls	r2, r3, #22
 801722e:	d402      	bmi.n	8017236 <_vfiprintf_r+0x1fe>
 8017230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017232:	f7fe fbf3 	bl	8015a1c <__retarget_lock_release_recursive>
 8017236:	89ab      	ldrh	r3, [r5, #12]
 8017238:	065b      	lsls	r3, r3, #25
 801723a:	f53f af1f 	bmi.w	801707c <_vfiprintf_r+0x44>
 801723e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017240:	e71e      	b.n	8017080 <_vfiprintf_r+0x48>
 8017242:	ab03      	add	r3, sp, #12
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	462a      	mov	r2, r5
 8017248:	4b05      	ldr	r3, [pc, #20]	@ (8017260 <_vfiprintf_r+0x228>)
 801724a:	a904      	add	r1, sp, #16
 801724c:	4630      	mov	r0, r6
 801724e:	f7fe f82b 	bl	80152a8 <_printf_i>
 8017252:	e7e4      	b.n	801721e <_vfiprintf_r+0x1e6>
 8017254:	0801780a 	.word	0x0801780a
 8017258:	08017814 	.word	0x08017814
 801725c:	08014d79 	.word	0x08014d79
 8017260:	08017013 	.word	0x08017013
 8017264:	08017810 	.word	0x08017810

08017268 <__sflush_r>:
 8017268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017270:	0716      	lsls	r6, r2, #28
 8017272:	4605      	mov	r5, r0
 8017274:	460c      	mov	r4, r1
 8017276:	d454      	bmi.n	8017322 <__sflush_r+0xba>
 8017278:	684b      	ldr	r3, [r1, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	dc02      	bgt.n	8017284 <__sflush_r+0x1c>
 801727e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017280:	2b00      	cmp	r3, #0
 8017282:	dd48      	ble.n	8017316 <__sflush_r+0xae>
 8017284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017286:	2e00      	cmp	r6, #0
 8017288:	d045      	beq.n	8017316 <__sflush_r+0xae>
 801728a:	2300      	movs	r3, #0
 801728c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017290:	682f      	ldr	r7, [r5, #0]
 8017292:	6a21      	ldr	r1, [r4, #32]
 8017294:	602b      	str	r3, [r5, #0]
 8017296:	d030      	beq.n	80172fa <__sflush_r+0x92>
 8017298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	0759      	lsls	r1, r3, #29
 801729e:	d505      	bpl.n	80172ac <__sflush_r+0x44>
 80172a0:	6863      	ldr	r3, [r4, #4]
 80172a2:	1ad2      	subs	r2, r2, r3
 80172a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80172a6:	b10b      	cbz	r3, 80172ac <__sflush_r+0x44>
 80172a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80172aa:	1ad2      	subs	r2, r2, r3
 80172ac:	2300      	movs	r3, #0
 80172ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80172b0:	6a21      	ldr	r1, [r4, #32]
 80172b2:	4628      	mov	r0, r5
 80172b4:	47b0      	blx	r6
 80172b6:	1c43      	adds	r3, r0, #1
 80172b8:	89a3      	ldrh	r3, [r4, #12]
 80172ba:	d106      	bne.n	80172ca <__sflush_r+0x62>
 80172bc:	6829      	ldr	r1, [r5, #0]
 80172be:	291d      	cmp	r1, #29
 80172c0:	d82b      	bhi.n	801731a <__sflush_r+0xb2>
 80172c2:	4a2a      	ldr	r2, [pc, #168]	@ (801736c <__sflush_r+0x104>)
 80172c4:	40ca      	lsrs	r2, r1
 80172c6:	07d6      	lsls	r6, r2, #31
 80172c8:	d527      	bpl.n	801731a <__sflush_r+0xb2>
 80172ca:	2200      	movs	r2, #0
 80172cc:	6062      	str	r2, [r4, #4]
 80172ce:	04d9      	lsls	r1, r3, #19
 80172d0:	6922      	ldr	r2, [r4, #16]
 80172d2:	6022      	str	r2, [r4, #0]
 80172d4:	d504      	bpl.n	80172e0 <__sflush_r+0x78>
 80172d6:	1c42      	adds	r2, r0, #1
 80172d8:	d101      	bne.n	80172de <__sflush_r+0x76>
 80172da:	682b      	ldr	r3, [r5, #0]
 80172dc:	b903      	cbnz	r3, 80172e0 <__sflush_r+0x78>
 80172de:	6560      	str	r0, [r4, #84]	@ 0x54
 80172e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172e2:	602f      	str	r7, [r5, #0]
 80172e4:	b1b9      	cbz	r1, 8017316 <__sflush_r+0xae>
 80172e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172ea:	4299      	cmp	r1, r3
 80172ec:	d002      	beq.n	80172f4 <__sflush_r+0x8c>
 80172ee:	4628      	mov	r0, r5
 80172f0:	f7ff f9fe 	bl	80166f0 <_free_r>
 80172f4:	2300      	movs	r3, #0
 80172f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80172f8:	e00d      	b.n	8017316 <__sflush_r+0xae>
 80172fa:	2301      	movs	r3, #1
 80172fc:	4628      	mov	r0, r5
 80172fe:	47b0      	blx	r6
 8017300:	4602      	mov	r2, r0
 8017302:	1c50      	adds	r0, r2, #1
 8017304:	d1c9      	bne.n	801729a <__sflush_r+0x32>
 8017306:	682b      	ldr	r3, [r5, #0]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d0c6      	beq.n	801729a <__sflush_r+0x32>
 801730c:	2b1d      	cmp	r3, #29
 801730e:	d001      	beq.n	8017314 <__sflush_r+0xac>
 8017310:	2b16      	cmp	r3, #22
 8017312:	d11e      	bne.n	8017352 <__sflush_r+0xea>
 8017314:	602f      	str	r7, [r5, #0]
 8017316:	2000      	movs	r0, #0
 8017318:	e022      	b.n	8017360 <__sflush_r+0xf8>
 801731a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801731e:	b21b      	sxth	r3, r3
 8017320:	e01b      	b.n	801735a <__sflush_r+0xf2>
 8017322:	690f      	ldr	r7, [r1, #16]
 8017324:	2f00      	cmp	r7, #0
 8017326:	d0f6      	beq.n	8017316 <__sflush_r+0xae>
 8017328:	0793      	lsls	r3, r2, #30
 801732a:	680e      	ldr	r6, [r1, #0]
 801732c:	bf08      	it	eq
 801732e:	694b      	ldreq	r3, [r1, #20]
 8017330:	600f      	str	r7, [r1, #0]
 8017332:	bf18      	it	ne
 8017334:	2300      	movne	r3, #0
 8017336:	eba6 0807 	sub.w	r8, r6, r7
 801733a:	608b      	str	r3, [r1, #8]
 801733c:	f1b8 0f00 	cmp.w	r8, #0
 8017340:	dde9      	ble.n	8017316 <__sflush_r+0xae>
 8017342:	6a21      	ldr	r1, [r4, #32]
 8017344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017346:	4643      	mov	r3, r8
 8017348:	463a      	mov	r2, r7
 801734a:	4628      	mov	r0, r5
 801734c:	47b0      	blx	r6
 801734e:	2800      	cmp	r0, #0
 8017350:	dc08      	bgt.n	8017364 <__sflush_r+0xfc>
 8017352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801735a:	81a3      	strh	r3, [r4, #12]
 801735c:	f04f 30ff 	mov.w	r0, #4294967295
 8017360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017364:	4407      	add	r7, r0
 8017366:	eba8 0800 	sub.w	r8, r8, r0
 801736a:	e7e7      	b.n	801733c <__sflush_r+0xd4>
 801736c:	20400001 	.word	0x20400001

08017370 <_fflush_r>:
 8017370:	b538      	push	{r3, r4, r5, lr}
 8017372:	690b      	ldr	r3, [r1, #16]
 8017374:	4605      	mov	r5, r0
 8017376:	460c      	mov	r4, r1
 8017378:	b913      	cbnz	r3, 8017380 <_fflush_r+0x10>
 801737a:	2500      	movs	r5, #0
 801737c:	4628      	mov	r0, r5
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	b118      	cbz	r0, 801738a <_fflush_r+0x1a>
 8017382:	6a03      	ldr	r3, [r0, #32]
 8017384:	b90b      	cbnz	r3, 801738a <_fflush_r+0x1a>
 8017386:	f7fe f939 	bl	80155fc <__sinit>
 801738a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d0f3      	beq.n	801737a <_fflush_r+0xa>
 8017392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017394:	07d0      	lsls	r0, r2, #31
 8017396:	d404      	bmi.n	80173a2 <_fflush_r+0x32>
 8017398:	0599      	lsls	r1, r3, #22
 801739a:	d402      	bmi.n	80173a2 <_fflush_r+0x32>
 801739c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801739e:	f7fe fb3c 	bl	8015a1a <__retarget_lock_acquire_recursive>
 80173a2:	4628      	mov	r0, r5
 80173a4:	4621      	mov	r1, r4
 80173a6:	f7ff ff5f 	bl	8017268 <__sflush_r>
 80173aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80173ac:	07da      	lsls	r2, r3, #31
 80173ae:	4605      	mov	r5, r0
 80173b0:	d4e4      	bmi.n	801737c <_fflush_r+0xc>
 80173b2:	89a3      	ldrh	r3, [r4, #12]
 80173b4:	059b      	lsls	r3, r3, #22
 80173b6:	d4e1      	bmi.n	801737c <_fflush_r+0xc>
 80173b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80173ba:	f7fe fb2f 	bl	8015a1c <__retarget_lock_release_recursive>
 80173be:	e7dd      	b.n	801737c <_fflush_r+0xc>

080173c0 <__swhatbuf_r>:
 80173c0:	b570      	push	{r4, r5, r6, lr}
 80173c2:	460c      	mov	r4, r1
 80173c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c8:	2900      	cmp	r1, #0
 80173ca:	b096      	sub	sp, #88	@ 0x58
 80173cc:	4615      	mov	r5, r2
 80173ce:	461e      	mov	r6, r3
 80173d0:	da0d      	bge.n	80173ee <__swhatbuf_r+0x2e>
 80173d2:	89a3      	ldrh	r3, [r4, #12]
 80173d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173d8:	f04f 0100 	mov.w	r1, #0
 80173dc:	bf14      	ite	ne
 80173de:	2340      	movne	r3, #64	@ 0x40
 80173e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173e4:	2000      	movs	r0, #0
 80173e6:	6031      	str	r1, [r6, #0]
 80173e8:	602b      	str	r3, [r5, #0]
 80173ea:	b016      	add	sp, #88	@ 0x58
 80173ec:	bd70      	pop	{r4, r5, r6, pc}
 80173ee:	466a      	mov	r2, sp
 80173f0:	f000 f848 	bl	8017484 <_fstat_r>
 80173f4:	2800      	cmp	r0, #0
 80173f6:	dbec      	blt.n	80173d2 <__swhatbuf_r+0x12>
 80173f8:	9901      	ldr	r1, [sp, #4]
 80173fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80173fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017402:	4259      	negs	r1, r3
 8017404:	4159      	adcs	r1, r3
 8017406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801740a:	e7eb      	b.n	80173e4 <__swhatbuf_r+0x24>

0801740c <__smakebuf_r>:
 801740c:	898b      	ldrh	r3, [r1, #12]
 801740e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017410:	079d      	lsls	r5, r3, #30
 8017412:	4606      	mov	r6, r0
 8017414:	460c      	mov	r4, r1
 8017416:	d507      	bpl.n	8017428 <__smakebuf_r+0x1c>
 8017418:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801741c:	6023      	str	r3, [r4, #0]
 801741e:	6123      	str	r3, [r4, #16]
 8017420:	2301      	movs	r3, #1
 8017422:	6163      	str	r3, [r4, #20]
 8017424:	b003      	add	sp, #12
 8017426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017428:	ab01      	add	r3, sp, #4
 801742a:	466a      	mov	r2, sp
 801742c:	f7ff ffc8 	bl	80173c0 <__swhatbuf_r>
 8017430:	9f00      	ldr	r7, [sp, #0]
 8017432:	4605      	mov	r5, r0
 8017434:	4639      	mov	r1, r7
 8017436:	4630      	mov	r0, r6
 8017438:	f7ff f9ce 	bl	80167d8 <_malloc_r>
 801743c:	b948      	cbnz	r0, 8017452 <__smakebuf_r+0x46>
 801743e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017442:	059a      	lsls	r2, r3, #22
 8017444:	d4ee      	bmi.n	8017424 <__smakebuf_r+0x18>
 8017446:	f023 0303 	bic.w	r3, r3, #3
 801744a:	f043 0302 	orr.w	r3, r3, #2
 801744e:	81a3      	strh	r3, [r4, #12]
 8017450:	e7e2      	b.n	8017418 <__smakebuf_r+0xc>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	6020      	str	r0, [r4, #0]
 8017456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801745a:	81a3      	strh	r3, [r4, #12]
 801745c:	9b01      	ldr	r3, [sp, #4]
 801745e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017462:	b15b      	cbz	r3, 801747c <__smakebuf_r+0x70>
 8017464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017468:	4630      	mov	r0, r6
 801746a:	f000 f81d 	bl	80174a8 <_isatty_r>
 801746e:	b128      	cbz	r0, 801747c <__smakebuf_r+0x70>
 8017470:	89a3      	ldrh	r3, [r4, #12]
 8017472:	f023 0303 	bic.w	r3, r3, #3
 8017476:	f043 0301 	orr.w	r3, r3, #1
 801747a:	81a3      	strh	r3, [r4, #12]
 801747c:	89a3      	ldrh	r3, [r4, #12]
 801747e:	431d      	orrs	r5, r3
 8017480:	81a5      	strh	r5, [r4, #12]
 8017482:	e7cf      	b.n	8017424 <__smakebuf_r+0x18>

08017484 <_fstat_r>:
 8017484:	b538      	push	{r3, r4, r5, lr}
 8017486:	4d07      	ldr	r5, [pc, #28]	@ (80174a4 <_fstat_r+0x20>)
 8017488:	2300      	movs	r3, #0
 801748a:	4604      	mov	r4, r0
 801748c:	4608      	mov	r0, r1
 801748e:	4611      	mov	r1, r2
 8017490:	602b      	str	r3, [r5, #0]
 8017492:	f7ea f8a3 	bl	80015dc <_fstat>
 8017496:	1c43      	adds	r3, r0, #1
 8017498:	d102      	bne.n	80174a0 <_fstat_r+0x1c>
 801749a:	682b      	ldr	r3, [r5, #0]
 801749c:	b103      	cbz	r3, 80174a0 <_fstat_r+0x1c>
 801749e:	6023      	str	r3, [r4, #0]
 80174a0:	bd38      	pop	{r3, r4, r5, pc}
 80174a2:	bf00      	nop
 80174a4:	20002ac8 	.word	0x20002ac8

080174a8 <_isatty_r>:
 80174a8:	b538      	push	{r3, r4, r5, lr}
 80174aa:	4d06      	ldr	r5, [pc, #24]	@ (80174c4 <_isatty_r+0x1c>)
 80174ac:	2300      	movs	r3, #0
 80174ae:	4604      	mov	r4, r0
 80174b0:	4608      	mov	r0, r1
 80174b2:	602b      	str	r3, [r5, #0]
 80174b4:	f7ea f8a2 	bl	80015fc <_isatty>
 80174b8:	1c43      	adds	r3, r0, #1
 80174ba:	d102      	bne.n	80174c2 <_isatty_r+0x1a>
 80174bc:	682b      	ldr	r3, [r5, #0]
 80174be:	b103      	cbz	r3, 80174c2 <_isatty_r+0x1a>
 80174c0:	6023      	str	r3, [r4, #0]
 80174c2:	bd38      	pop	{r3, r4, r5, pc}
 80174c4:	20002ac8 	.word	0x20002ac8

080174c8 <_sbrk_r>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	4d06      	ldr	r5, [pc, #24]	@ (80174e4 <_sbrk_r+0x1c>)
 80174cc:	2300      	movs	r3, #0
 80174ce:	4604      	mov	r4, r0
 80174d0:	4608      	mov	r0, r1
 80174d2:	602b      	str	r3, [r5, #0]
 80174d4:	f7ea f8aa 	bl	800162c <_sbrk>
 80174d8:	1c43      	adds	r3, r0, #1
 80174da:	d102      	bne.n	80174e2 <_sbrk_r+0x1a>
 80174dc:	682b      	ldr	r3, [r5, #0]
 80174de:	b103      	cbz	r3, 80174e2 <_sbrk_r+0x1a>
 80174e0:	6023      	str	r3, [r4, #0]
 80174e2:	bd38      	pop	{r3, r4, r5, pc}
 80174e4:	20002ac8 	.word	0x20002ac8

080174e8 <__assert_func>:
 80174e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174ea:	4614      	mov	r4, r2
 80174ec:	461a      	mov	r2, r3
 80174ee:	4b09      	ldr	r3, [pc, #36]	@ (8017514 <__assert_func+0x2c>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	4605      	mov	r5, r0
 80174f4:	68d8      	ldr	r0, [r3, #12]
 80174f6:	b14c      	cbz	r4, 801750c <__assert_func+0x24>
 80174f8:	4b07      	ldr	r3, [pc, #28]	@ (8017518 <__assert_func+0x30>)
 80174fa:	9100      	str	r1, [sp, #0]
 80174fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017500:	4906      	ldr	r1, [pc, #24]	@ (801751c <__assert_func+0x34>)
 8017502:	462b      	mov	r3, r5
 8017504:	f000 f842 	bl	801758c <fiprintf>
 8017508:	f000 f852 	bl	80175b0 <abort>
 801750c:	4b04      	ldr	r3, [pc, #16]	@ (8017520 <__assert_func+0x38>)
 801750e:	461c      	mov	r4, r3
 8017510:	e7f3      	b.n	80174fa <__assert_func+0x12>
 8017512:	bf00      	nop
 8017514:	20000074 	.word	0x20000074
 8017518:	08017825 	.word	0x08017825
 801751c:	08017832 	.word	0x08017832
 8017520:	08017860 	.word	0x08017860

08017524 <_calloc_r>:
 8017524:	b570      	push	{r4, r5, r6, lr}
 8017526:	fba1 5402 	umull	r5, r4, r1, r2
 801752a:	b934      	cbnz	r4, 801753a <_calloc_r+0x16>
 801752c:	4629      	mov	r1, r5
 801752e:	f7ff f953 	bl	80167d8 <_malloc_r>
 8017532:	4606      	mov	r6, r0
 8017534:	b928      	cbnz	r0, 8017542 <_calloc_r+0x1e>
 8017536:	4630      	mov	r0, r6
 8017538:	bd70      	pop	{r4, r5, r6, pc}
 801753a:	220c      	movs	r2, #12
 801753c:	6002      	str	r2, [r0, #0]
 801753e:	2600      	movs	r6, #0
 8017540:	e7f9      	b.n	8017536 <_calloc_r+0x12>
 8017542:	462a      	mov	r2, r5
 8017544:	4621      	mov	r1, r4
 8017546:	f7fe f9d7 	bl	80158f8 <memset>
 801754a:	e7f4      	b.n	8017536 <_calloc_r+0x12>

0801754c <__ascii_mbtowc>:
 801754c:	b082      	sub	sp, #8
 801754e:	b901      	cbnz	r1, 8017552 <__ascii_mbtowc+0x6>
 8017550:	a901      	add	r1, sp, #4
 8017552:	b142      	cbz	r2, 8017566 <__ascii_mbtowc+0x1a>
 8017554:	b14b      	cbz	r3, 801756a <__ascii_mbtowc+0x1e>
 8017556:	7813      	ldrb	r3, [r2, #0]
 8017558:	600b      	str	r3, [r1, #0]
 801755a:	7812      	ldrb	r2, [r2, #0]
 801755c:	1e10      	subs	r0, r2, #0
 801755e:	bf18      	it	ne
 8017560:	2001      	movne	r0, #1
 8017562:	b002      	add	sp, #8
 8017564:	4770      	bx	lr
 8017566:	4610      	mov	r0, r2
 8017568:	e7fb      	b.n	8017562 <__ascii_mbtowc+0x16>
 801756a:	f06f 0001 	mvn.w	r0, #1
 801756e:	e7f8      	b.n	8017562 <__ascii_mbtowc+0x16>

08017570 <__ascii_wctomb>:
 8017570:	4603      	mov	r3, r0
 8017572:	4608      	mov	r0, r1
 8017574:	b141      	cbz	r1, 8017588 <__ascii_wctomb+0x18>
 8017576:	2aff      	cmp	r2, #255	@ 0xff
 8017578:	d904      	bls.n	8017584 <__ascii_wctomb+0x14>
 801757a:	228a      	movs	r2, #138	@ 0x8a
 801757c:	601a      	str	r2, [r3, #0]
 801757e:	f04f 30ff 	mov.w	r0, #4294967295
 8017582:	4770      	bx	lr
 8017584:	700a      	strb	r2, [r1, #0]
 8017586:	2001      	movs	r0, #1
 8017588:	4770      	bx	lr
	...

0801758c <fiprintf>:
 801758c:	b40e      	push	{r1, r2, r3}
 801758e:	b503      	push	{r0, r1, lr}
 8017590:	4601      	mov	r1, r0
 8017592:	ab03      	add	r3, sp, #12
 8017594:	4805      	ldr	r0, [pc, #20]	@ (80175ac <fiprintf+0x20>)
 8017596:	f853 2b04 	ldr.w	r2, [r3], #4
 801759a:	6800      	ldr	r0, [r0, #0]
 801759c:	9301      	str	r3, [sp, #4]
 801759e:	f7ff fd4b 	bl	8017038 <_vfiprintf_r>
 80175a2:	b002      	add	sp, #8
 80175a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80175a8:	b003      	add	sp, #12
 80175aa:	4770      	bx	lr
 80175ac:	20000074 	.word	0x20000074

080175b0 <abort>:
 80175b0:	b508      	push	{r3, lr}
 80175b2:	2006      	movs	r0, #6
 80175b4:	f000 f82c 	bl	8017610 <raise>
 80175b8:	2001      	movs	r0, #1
 80175ba:	f7e9 ffbf 	bl	800153c <_exit>

080175be <_raise_r>:
 80175be:	291f      	cmp	r1, #31
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	4605      	mov	r5, r0
 80175c4:	460c      	mov	r4, r1
 80175c6:	d904      	bls.n	80175d2 <_raise_r+0x14>
 80175c8:	2316      	movs	r3, #22
 80175ca:	6003      	str	r3, [r0, #0]
 80175cc:	f04f 30ff 	mov.w	r0, #4294967295
 80175d0:	bd38      	pop	{r3, r4, r5, pc}
 80175d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80175d4:	b112      	cbz	r2, 80175dc <_raise_r+0x1e>
 80175d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175da:	b94b      	cbnz	r3, 80175f0 <_raise_r+0x32>
 80175dc:	4628      	mov	r0, r5
 80175de:	f000 f831 	bl	8017644 <_getpid_r>
 80175e2:	4622      	mov	r2, r4
 80175e4:	4601      	mov	r1, r0
 80175e6:	4628      	mov	r0, r5
 80175e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175ec:	f000 b818 	b.w	8017620 <_kill_r>
 80175f0:	2b01      	cmp	r3, #1
 80175f2:	d00a      	beq.n	801760a <_raise_r+0x4c>
 80175f4:	1c59      	adds	r1, r3, #1
 80175f6:	d103      	bne.n	8017600 <_raise_r+0x42>
 80175f8:	2316      	movs	r3, #22
 80175fa:	6003      	str	r3, [r0, #0]
 80175fc:	2001      	movs	r0, #1
 80175fe:	e7e7      	b.n	80175d0 <_raise_r+0x12>
 8017600:	2100      	movs	r1, #0
 8017602:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017606:	4620      	mov	r0, r4
 8017608:	4798      	blx	r3
 801760a:	2000      	movs	r0, #0
 801760c:	e7e0      	b.n	80175d0 <_raise_r+0x12>
	...

08017610 <raise>:
 8017610:	4b02      	ldr	r3, [pc, #8]	@ (801761c <raise+0xc>)
 8017612:	4601      	mov	r1, r0
 8017614:	6818      	ldr	r0, [r3, #0]
 8017616:	f7ff bfd2 	b.w	80175be <_raise_r>
 801761a:	bf00      	nop
 801761c:	20000074 	.word	0x20000074

08017620 <_kill_r>:
 8017620:	b538      	push	{r3, r4, r5, lr}
 8017622:	4d07      	ldr	r5, [pc, #28]	@ (8017640 <_kill_r+0x20>)
 8017624:	2300      	movs	r3, #0
 8017626:	4604      	mov	r4, r0
 8017628:	4608      	mov	r0, r1
 801762a:	4611      	mov	r1, r2
 801762c:	602b      	str	r3, [r5, #0]
 801762e:	f7e9 ff75 	bl	800151c <_kill>
 8017632:	1c43      	adds	r3, r0, #1
 8017634:	d102      	bne.n	801763c <_kill_r+0x1c>
 8017636:	682b      	ldr	r3, [r5, #0]
 8017638:	b103      	cbz	r3, 801763c <_kill_r+0x1c>
 801763a:	6023      	str	r3, [r4, #0]
 801763c:	bd38      	pop	{r3, r4, r5, pc}
 801763e:	bf00      	nop
 8017640:	20002ac8 	.word	0x20002ac8

08017644 <_getpid_r>:
 8017644:	f7e9 bf62 	b.w	800150c <_getpid>

08017648 <_init>:
 8017648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801764a:	bf00      	nop
 801764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801764e:	bc08      	pop	{r3}
 8017650:	469e      	mov	lr, r3
 8017652:	4770      	bx	lr

08017654 <_fini>:
 8017654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017656:	bf00      	nop
 8017658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801765a:	bc08      	pop	{r3}
 801765c:	469e      	mov	lr, r3
 801765e:	4770      	bx	lr
